
TestPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eac  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fbd8  08008088  08008088  00018088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c60  08017c60  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08017c60  08017c60  00027c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c68  08017c68  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c68  08017c68  00027c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c6c  08017c6c  00027c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08017c70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000007c  08017cec  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08017cec  0003027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001375a  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002435  00000000  00000000  00043806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00045c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00046cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e01f  00000000  00000000  00047ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a92  00000000  00000000  00065cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5a76  00000000  00000000  00079759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f1cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  0013f220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800806c 	.word	0x0800806c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000080 	.word	0x20000080
 8000214:	0800806c 	.word	0x0800806c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <setPWM>:
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */

void setPWM(double freq, int duty_percent)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e92:	6078      	str	r0, [r7, #4]
	if (freq == 0) {
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ea0:	f7ff fdde 	bl	8000a60 <__aeabi_dcmpeq>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <setPWM+0x2a>
		TIM3->CCR1 = 0;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <setPWM+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 8000eb0:	e03b      	b.n	8000f2a <setPWM+0xa2>
	}
	TIM3->ARR = 100000.0 / freq - 1;
 8000eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000eb6:	a11e      	add	r1, pc, #120	; (adr r1, 8000f30 <setPWM+0xa8>)
 8000eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ebc:	f7ff fc92 	bl	80007e4 <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <setPWM+0xb4>)
 8000ece:	f7ff f9a7 	bl	8000220 <__aeabi_dsub>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4c18      	ldr	r4, [pc, #96]	; (8000f38 <setPWM+0xb0>)
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fe30 	bl	8000b40 <__aeabi_d2uiz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->CCR1 = (double)duty_percent * (TIM3->ARR + 1) / 100.0;
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fae9 	bl	80004bc <__aeabi_i2d>
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <setPWM+0xb0>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fad1 	bl	800049c <__aeabi_ui2d>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff fb45 	bl	8000590 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <setPWM+0xb8>)
 8000f14:	f7ff fc66 	bl	80007e4 <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4c06      	ldr	r4, [pc, #24]	; (8000f38 <setPWM+0xb0>)
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fe0d 	bl	8000b40 <__aeabi_d2uiz>
 8000f26:	4603      	mov	r3, r0
 8000f28:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40f86a00 	.word	0x40f86a00
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	3ff00000 	.word	0x3ff00000
 8000f40:	40590000 	.word	0x40590000
 8000f44:	00000000 	.word	0x00000000

08000f48 <note_to_frequency>:

double note_to_frequency(int note)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	return 440.0 * pow(2, (note - 69)/12.0);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b45      	subs	r3, #69	; 0x45
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fab1 	bl	80004bc <__aeabi_i2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <note_to_frequency+0x60>)
 8000f60:	f7ff fc40 	bl	80007e4 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	ec43 2b17 	vmov	d7, r2, r3
 8000f6c:	eeb0 1a47 	vmov.f32	s2, s14
 8000f70:	eef0 1a67 	vmov.f32	s3, s15
 8000f74:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000fa0 <note_to_frequency+0x58>
 8000f78:	f006 f95c 	bl	8007234 <pow>
 8000f7c:	ec51 0b10 	vmov	r0, r1, d0
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <note_to_frequency+0x64>)
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f92:	eeb0 0a47 	vmov.f32	s0, s14
 8000f96:	eef0 0a67 	vmov.f32	s1, s15
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40000000 	.word	0x40000000
 8000fa8:	40280000 	.word	0x40280000
 8000fac:	407b8000 	.word	0x407b8000

08000fb0 <produce_sound>:

void produce_sound(int note, int lasting_millisecond)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	if (output_device == OUTPUT_BUZZER) {
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <produce_sound+0x100>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d123      	bne.n	800100a <produce_sound+0x5a>
		if (note == 0) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <produce_sound+0x2c>
			setPWM(0, 100);
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	ed9f 0b37 	vldr	d0, [pc, #220]	; 80010a8 <produce_sound+0xf8>
 8000fce:	f7ff ff5b 	bl	8000e88 <setPWM>
			HAL_Delay(lasting_millisecond);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fa1d 	bl	8002414 <HAL_Delay>
			return ;
 8000fda:	e060      	b.n	800109e <produce_sound+0xee>
		}
		double freq = note_to_frequency(note);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffb3 	bl	8000f48 <note_to_frequency>
 8000fe2:	ed87 0b04 	vstr	d0, [r7, #16]
		setPWM(freq, DEFAULT_DUTY);
 8000fe6:	205f      	movs	r0, #95	; 0x5f
 8000fe8:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fec:	f7ff ff4c 	bl	8000e88 <setPWM>
		HAL_Delay(lasting_millisecond);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fa0e 	bl	8002414 <HAL_Delay>
		setPWM(0, 100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 80010a8 <produce_sound+0xf8>
 8000ffe:	f7ff ff43 	bl	8000e88 <setPWM>
		HAL_Delay(50);
 8001002:	2032      	movs	r0, #50	; 0x32
 8001004:	f001 fa06 	bl	8002414 <HAL_Delay>
 8001008:	e049      	b.n	800109e <produce_sound+0xee>
	}
	else {
		// send MIDI
		if (note == 0) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <produce_sound+0x6a>
			HAL_Delay(lasting_millisecond);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f9fe 	bl	8002414 <HAL_Delay>
 8001018:	e041      	b.n	800109e <produce_sound+0xee>
			return ;
		}
		unsigned char operation;
		unsigned char sound;
		unsigned char force;
		operation = 0x90;
 800101a:	2390      	movs	r3, #144	; 0x90
 800101c:	73fb      	strb	r3, [r7, #15]
		sound = note;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73bb      	strb	r3, [r7, #14]
		force = 0x7F;
 8001024:	237f      	movs	r3, #127	; 0x7f
 8001026:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&hlpuart1, &operation, 1, 0xffff);
 8001028:	f107 010f 	add.w	r1, r7, #15
 800102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001030:	2201      	movs	r2, #1
 8001032:	4820      	ldr	r0, [pc, #128]	; (80010b4 <produce_sound+0x104>)
 8001034:	f004 f8d6 	bl	80051e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &sound, 1, 0xffff);
 8001038:	f107 010e 	add.w	r1, r7, #14
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	2201      	movs	r2, #1
 8001042:	481c      	ldr	r0, [pc, #112]	; (80010b4 <produce_sound+0x104>)
 8001044:	f004 f8ce 	bl	80051e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &force, 1, 0xffff);
 8001048:	f107 010d 	add.w	r1, r7, #13
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	2201      	movs	r2, #1
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <produce_sound+0x104>)
 8001054:	f004 f8c6 	bl	80051e4 <HAL_UART_Transmit>
		HAL_Delay(lasting_millisecond);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 f9da 	bl	8002414 <HAL_Delay>
		operation = 0x80;
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	73fb      	strb	r3, [r7, #15]
		force = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&hlpuart1, &operation, 1, 0xffff);
 8001068:	f107 010f 	add.w	r1, r7, #15
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	2201      	movs	r2, #1
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <produce_sound+0x104>)
 8001074:	f004 f8b6 	bl	80051e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &sound, 1, 0xffff);
 8001078:	f107 010e 	add.w	r1, r7, #14
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	2201      	movs	r2, #1
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <produce_sound+0x104>)
 8001084:	f004 f8ae 	bl	80051e4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &force, 1, 0xffff);
 8001088:	f107 010d 	add.w	r1, r7, #13
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	2201      	movs	r2, #1
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <produce_sound+0x104>)
 8001094:	f004 f8a6 	bl	80051e4 <HAL_UART_Transmit>
		HAL_Delay(50);
 8001098:	2032      	movs	r0, #50	; 0x32
 800109a:	f001 f9bb 	bl	8002414 <HAL_Delay>
	}
}
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	f3af 8000 	nop.w
	...
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	200000bc 	.word	0x200000bc

080010b8 <init_piano>:

void init_piano()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	produce_sound(0, 1000);
 80010be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff ff74 	bl	8000fb0 <produce_sound>
	unsigned int i;
	for (i=0;i<8;i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	e00b      	b.n	80010e6 <init_piano+0x2e>
		produce_sound(MIDDLE_C + white_note[i], 200);
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <init_piano+0x44>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	333c      	adds	r3, #60	; 0x3c
 80010d8:	21c8      	movs	r1, #200	; 0xc8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff68 	bl	8000fb0 <produce_sound>
	for (i=0;i<8;i++) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d9f0      	bls.n	80010ce <init_piano+0x16>
	}
	produce_sound(0, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ff5e 	bl	8000fb0 <produce_sound>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08008088 	.word	0x08008088

08001100 <init_walkman>:

void init_walkman()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	pausing = 0;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <init_walkman+0x20>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
	speed = 1.0;
 800110a:	4906      	ldr	r1, [pc, #24]	; (8001124 <init_walkman+0x24>)
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <init_walkman+0x28>)
 8001112:	e9c1 2300 	strd	r2, r3, [r1]
//	tone_switching = 0;
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200000ac 	.word	0x200000ac
 8001124:	20000000 	.word	0x20000000
 8001128:	3ff00000 	.word	0x3ff00000

0800112c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Keys interrupt
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113c:	f040 80de 	bne.w	80012fc <HAL_GPIO_EXTI_Callback+0x1d0>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001140:	2101      	movs	r1, #1
 8001142:	48b1      	ldr	r0, [pc, #708]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001144:	f001 fcda 	bl	8002afc <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80d4 	beq.w	80012f8 <HAL_GPIO_EXTI_Callback+0x1cc>
			// switch mode
			play_mode = (play_mode + 1) % TOTAL_MODES;
 8001150:	4bae      	ldr	r3, [pc, #696]	; (800140c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	4bae      	ldr	r3, [pc, #696]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001158:	fb83 2301 	smull	r2, r3, r3, r1
 800115c:	105a      	asrs	r2, r3, #1
 800115e:	17cb      	asrs	r3, r1, #31
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	1aca      	subs	r2, r1, r3
 800116a:	4ba8      	ldr	r3, [pc, #672]	; (800140c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800116c:	601a      	str	r2, [r3, #0]
			switch (play_mode) {
 800116e:	4ba7      	ldr	r3, [pc, #668]	; (800140c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b04      	cmp	r3, #4
 8001174:	f200 8227 	bhi.w	80015c6 <HAL_GPIO_EXTI_Callback+0x49a>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <HAL_GPIO_EXTI_Callback+0x54>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	08001195 	.word	0x08001195
 8001184:	080011d1 	.word	0x080011d1
 8001188:	0800121b 	.word	0x0800121b
 800118c:	08001265 	.word	0x08001265
 8001190:	080012af 	.word	0x080012af
			case PIANO_MODE:
				LED_state |= GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001194:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b9d      	ldr	r3, [pc, #628]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011a0:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	4898      	ldr	r0, [pc, #608]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011a8:	f001 fcc0 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4895      	ldr	r0, [pc, #596]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011b2:	f001 fcbb 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4892      	ldr	r0, [pc, #584]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011be:	f001 fcb5 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	488f      	ldr	r0, [pc, #572]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011ca:	f001 fcaf 	bl	8002b2c <HAL_GPIO_WritePin>
				break;
 80011ce:	e094      	b.n	80012fa <HAL_GPIO_EXTI_Callback+0x1ce>
			case SONG_MODE_1:
				LED_state |= GPIO_PIN_6;
 80011d0:	4b90      	ldr	r3, [pc, #576]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b8e      	ldr	r3, [pc, #568]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011dc:	801a      	strh	r2, [r3, #0]
				LED_state &= ~(GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9);
 80011de:	4b8d      	ldr	r3, [pc, #564]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b8a      	ldr	r3, [pc, #552]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80011ea:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	4885      	ldr	r0, [pc, #532]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011f2:	f001 fc9b 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	4883      	ldr	r0, [pc, #524]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011fc:	f001 fc96 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001206:	4880      	ldr	r0, [pc, #512]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001208:	f001 fc90 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001212:	487d      	ldr	r0, [pc, #500]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001214:	f001 fc8a 	bl	8002b2c <HAL_GPIO_WritePin>
				break;
 8001218:	e06f      	b.n	80012fa <HAL_GPIO_EXTI_Callback+0x1ce>
			case SONG_MODE_2:
				LED_state |= GPIO_PIN_7;
 800121a:	4b7e      	ldr	r3, [pc, #504]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001226:	801a      	strh	r2, [r3, #0]
				LED_state &= ~(GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9);
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	f423 7350 	bic.w	r3, r3, #832	; 0x340
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b78      	ldr	r3, [pc, #480]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001234:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4873      	ldr	r0, [pc, #460]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800123c:	f001 fc76 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	4870      	ldr	r0, [pc, #448]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001246:	f001 fc71 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	486d      	ldr	r0, [pc, #436]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001252:	f001 fc6b 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	486a      	ldr	r0, [pc, #424]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800125e:	f001 fc65 	bl	8002b2c <HAL_GPIO_WritePin>
				break;
 8001262:	e04a      	b.n	80012fa <HAL_GPIO_EXTI_Callback+0x1ce>
			case SONG_MODE_3:
				LED_state |= GPIO_PIN_8;
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b69      	ldr	r3, [pc, #420]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001270:	801a      	strh	r2, [r3, #0]
				LED_state &= ~(GPIO_PIN_7 | GPIO_PIN_6 | GPIO_PIN_9);
 8001272:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	f423 7330 	bic.w	r3, r3, #704	; 0x2c0
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800127e:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4860      	ldr	r0, [pc, #384]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001286:	f001 fc51 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	485e      	ldr	r0, [pc, #376]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001290:	f001 fc4c 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129a:	485b      	ldr	r0, [pc, #364]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800129c:	f001 fc46 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a6:	4858      	ldr	r0, [pc, #352]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012a8:	f001 fc40 	bl	8002b2c <HAL_GPIO_WritePin>
				break;
 80012ac:	e025      	b.n	80012fa <HAL_GPIO_EXTI_Callback+0x1ce>
			case SONG_MODE_4:
				LED_state |= GPIO_PIN_9;
 80012ae:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b56      	ldr	r3, [pc, #344]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80012ba:	801a      	strh	r2, [r3, #0]
				LED_state &= ~(GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_6);
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80012c8:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	484e      	ldr	r0, [pc, #312]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012d0:	f001 fc2c 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	484b      	ldr	r0, [pc, #300]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012da:	f001 fc27 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4848      	ldr	r0, [pc, #288]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012e6:	f001 fc21 	bl	8002b2c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	4845      	ldr	r0, [pc, #276]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012f2:	f001 fc1b 	bl	8002b2c <HAL_GPIO_WritePin>
				break;
 80012f6:	e000      	b.n	80012fa <HAL_GPIO_EXTI_Callback+0x1ce>
			}
		}
 80012f8:	bf00      	nop
		return ;
 80012fa:	e164      	b.n	80015c6 <HAL_GPIO_EXTI_Callback+0x49a>
	}

	if (play_mode == PIANO_MODE) {
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 80af 	bne.w	8001464 <HAL_GPIO_EXTI_Callback+0x338>
		current_note = MIDDLE_C;
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001308:	223c      	movs	r2, #60	; 0x3c
 800130a:	601a      	str	r2, [r3, #0]
		switch (GPIO_Pin) {
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2b80      	cmp	r3, #128	; 0x80
 8001310:	f000 8084 	beq.w	800141c <HAL_GPIO_EXTI_Callback+0x2f0>
 8001314:	2b80      	cmp	r3, #128	; 0x80
 8001316:	f300 8088 	bgt.w	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
 800131a:	2b20      	cmp	r3, #32
 800131c:	dc46      	bgt.n	80013ac <HAL_GPIO_EXTI_Callback+0x280>
 800131e:	2b02      	cmp	r3, #2
 8001320:	f2c0 8083 	blt.w	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
 8001324:	3b02      	subs	r3, #2
 8001326:	2b1e      	cmp	r3, #30
 8001328:	d87f      	bhi.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <HAL_GPIO_EXTI_Callback+0x204>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	080013b3 	.word	0x080013b3
 8001334:	0800142b 	.word	0x0800142b
 8001338:	080013c1 	.word	0x080013c1
 800133c:	0800142b 	.word	0x0800142b
 8001340:	0800142b 	.word	0x0800142b
 8001344:	0800142b 	.word	0x0800142b
 8001348:	080013cf 	.word	0x080013cf
 800134c:	0800142b 	.word	0x0800142b
 8001350:	0800142b 	.word	0x0800142b
 8001354:	0800142b 	.word	0x0800142b
 8001358:	0800142b 	.word	0x0800142b
 800135c:	0800142b 	.word	0x0800142b
 8001360:	0800142b 	.word	0x0800142b
 8001364:	0800142b 	.word	0x0800142b
 8001368:	080013dd 	.word	0x080013dd
 800136c:	0800142b 	.word	0x0800142b
 8001370:	0800142b 	.word	0x0800142b
 8001374:	0800142b 	.word	0x0800142b
 8001378:	0800142b 	.word	0x0800142b
 800137c:	0800142b 	.word	0x0800142b
 8001380:	0800142b 	.word	0x0800142b
 8001384:	0800142b 	.word	0x0800142b
 8001388:	0800142b 	.word	0x0800142b
 800138c:	0800142b 	.word	0x0800142b
 8001390:	0800142b 	.word	0x0800142b
 8001394:	0800142b 	.word	0x0800142b
 8001398:	0800142b 	.word	0x0800142b
 800139c:	0800142b 	.word	0x0800142b
 80013a0:	0800142b 	.word	0x0800142b
 80013a4:	0800142b 	.word	0x0800142b
 80013a8:	080013eb 	.word	0x080013eb
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d023      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x2cc>
 80013b0:	e03b      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
		case GPIO_PIN_1: current_note += white_note[0]; break;
 80013b2:	2200      	movs	r2, #0
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e034      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
		case GPIO_PIN_2: current_note += white_note[1]; break;
 80013c0:	2202      	movs	r2, #2
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02d      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
		case GPIO_PIN_3: current_note += white_note[2]; break;
 80013ce:	2204      	movs	r2, #4
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e026      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
		case GPIO_PIN_4: current_note += white_note[3]; break;
 80013dc:	2205      	movs	r2, #5
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e01f      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
		case GPIO_PIN_5: current_note += white_note[4]; break;
 80013ea:	2207      	movs	r2, #7
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e018      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
		case GPIO_PIN_6: current_note += white_note[5]; break;
 80013f8:	2209      	movs	r2, #9
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e011      	b.n	800142a <HAL_GPIO_EXTI_Callback+0x2fe>
 8001406:	bf00      	nop
 8001408:	48000800 	.word	0x48000800
 800140c:	20000098 	.word	0x20000098
 8001410:	66666667 	.word	0x66666667
 8001414:	20000008 	.word	0x20000008
 8001418:	200000a0 	.word	0x200000a0
		case GPIO_PIN_7: current_note += white_note[6]; break;
 800141c:	220b      	movs	r2, #11
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	bf00      	nop
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 800142a:	2101      	movs	r1, #1
 800142c:	4869      	ldr	r0, [pc, #420]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x4a8>)
 800142e:	f001 fb65 	bl	8002afc <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_GPIO_EXTI_Callback+0x316>
			// big button pushed down
			current_note += 12;
 8001438:	4b65      	ldr	r3, [pc, #404]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	330c      	adds	r3, #12
 800143e:	4a64      	ldr	r2, [pc, #400]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8001440:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0) {
 8001442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001446:	4864      	ldr	r0, [pc, #400]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x4ac>)
 8001448:	f001 fb58 	bl	8002afc <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x330>
			// small button pushed down
			current_note -= 12;
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3b0c      	subs	r3, #12
 8001458:	4a5d      	ldr	r2, [pc, #372]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800145a:	6013      	str	r3, [r2, #0]
		}
		sounding_buffer = 1;
 800145c:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <HAL_GPIO_EXTI_Callback+0x4b0>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e0a4      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
	}
	else {
		// switch the walkman
		switch (GPIO_Pin) {
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	f000 809a 	beq.w	80015a2 <HAL_GPIO_EXTI_Callback+0x476>
 800146e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001472:	f300 809c 	bgt.w	80015ae <HAL_GPIO_EXTI_Callback+0x482>
 8001476:	2b80      	cmp	r3, #128	; 0x80
 8001478:	f000 808d 	beq.w	8001596 <HAL_GPIO_EXTI_Callback+0x46a>
 800147c:	2b80      	cmp	r3, #128	; 0x80
 800147e:	f300 8096 	bgt.w	80015ae <HAL_GPIO_EXTI_Callback+0x482>
 8001482:	2b20      	cmp	r3, #32
 8001484:	dc48      	bgt.n	8001518 <HAL_GPIO_EXTI_Callback+0x3ec>
 8001486:	2b02      	cmp	r3, #2
 8001488:	f2c0 8091 	blt.w	80015ae <HAL_GPIO_EXTI_Callback+0x482>
 800148c:	3b02      	subs	r3, #2
 800148e:	2b1e      	cmp	r3, #30
 8001490:	f200 808d 	bhi.w	80015ae <HAL_GPIO_EXTI_Callback+0x482>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_GPIO_EXTI_Callback+0x370>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	0800151f 	.word	0x0800151f
 80014a0:	080015af 	.word	0x080015af
 80014a4:	08001535 	.word	0x08001535
 80014a8:	080015af 	.word	0x080015af
 80014ac:	080015af 	.word	0x080015af
 80014b0:	080015af 	.word	0x080015af
 80014b4:	08001547 	.word	0x08001547
 80014b8:	080015af 	.word	0x080015af
 80014bc:	080015af 	.word	0x080015af
 80014c0:	080015af 	.word	0x080015af
 80014c4:	080015af 	.word	0x080015af
 80014c8:	080015af 	.word	0x080015af
 80014cc:	080015af 	.word	0x080015af
 80014d0:	080015af 	.word	0x080015af
 80014d4:	08001563 	.word	0x08001563
 80014d8:	080015af 	.word	0x080015af
 80014dc:	080015af 	.word	0x080015af
 80014e0:	080015af 	.word	0x080015af
 80014e4:	080015af 	.word	0x080015af
 80014e8:	080015af 	.word	0x080015af
 80014ec:	080015af 	.word	0x080015af
 80014f0:	080015af 	.word	0x080015af
 80014f4:	080015af 	.word	0x080015af
 80014f8:	080015af 	.word	0x080015af
 80014fc:	080015af 	.word	0x080015af
 8001500:	080015af 	.word	0x080015af
 8001504:	080015af 	.word	0x080015af
 8001508:	080015af 	.word	0x080015af
 800150c:	080015af 	.word	0x080015af
 8001510:	080015af 	.word	0x080015af
 8001514:	0800157f 	.word	0x0800157f
 8001518:	2b40      	cmp	r3, #64	; 0x40
 800151a:	d036      	beq.n	800158a <HAL_GPIO_EXTI_Callback+0x45e>
 800151c:	e047      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_1: pausing = !pausing; break;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e03c      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_2: init_walkman(); tone_switching = 0; restart = 1; break;
 8001534:	f7ff fde4 	bl	8001100 <init_walkman>
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e033      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_3: speed += 0.25; break;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_GPIO_EXTI_Callback+0x4c0>)
 8001548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x4c4>)
 8001552:	f7fe fe67 	bl	8000224 <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4924      	ldr	r1, [pc, #144]	; (80015ec <HAL_GPIO_EXTI_Callback+0x4c0>)
 800155c:	e9c1 2300 	strd	r2, r3, [r1]
 8001560:	e025      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_4: speed -= 0.25; break;
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_GPIO_EXTI_Callback+0x4c0>)
 8001564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800156e:	f7fe fe57 	bl	8000220 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	491d      	ldr	r1, [pc, #116]	; (80015ec <HAL_GPIO_EXTI_Callback+0x4c0>)
 8001578:	e9c1 2300 	strd	r2, r3, [r1]
 800157c:	e017      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_5: tone_switching++; break;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e011      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_6: tone_switching--; break;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e00b      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_7: tone_switching += 12; break;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	330c      	adds	r3, #12
 800159c:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e005      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x482>
		case GPIO_PIN_8: tone_switching -= 12; break;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3b0c      	subs	r3, #12
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	bf00      	nop
		}
	}
	int i;
	for (i=0;i<0x3fff;i++);
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_EXTI_Callback+0x48e>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80015c0:	4293      	cmp	r3, r2
 80015c2:	ddf7      	ble.n	80015b4 <HAL_GPIO_EXTI_Callback+0x488>
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_EXTI_Callback+0x49c>
		return ;
 80015c6:	bf00      	nop
}
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000a0 	.word	0x200000a0
 80015d4:	48000800 	.word	0x48000800
 80015d8:	48000400 	.word	0x48000400
 80015dc:	200000a8 	.word	0x200000a8
 80015e0:	200000ac 	.word	0x200000ac
 80015e4:	200000b0 	.word	0x200000b0
 80015e8:	200000b4 	.word	0x200000b4
 80015ec:	20000000 	.word	0x20000000
 80015f0:	3fd00000 	.word	0x3fd00000

080015f4 <play_music>:



void play_music(const int* pnote, const int* pbeat, const int* ptone,
		int bpm, int tone_shift)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
	int i;
	int init_mode = play_mode;
 8001602:	4b50      	ldr	r3, [pc, #320]	; (8001744 <play_music+0x150>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	617b      	str	r3, [r7, #20]
	int init_tone = tone_switching;
 8001608:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <play_music+0x154>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
	if (init_mode == 0)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8093 	beq.w	800173c <play_music+0x148>
		return ;
	restart = 0;
 8001616:	4b4d      	ldr	r3, [pc, #308]	; (800174c <play_music+0x158>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
	for (i=0;pnote[i]!=-1 && play_mode == init_mode && tone_switching==init_tone && !restart;i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	e074      	b.n	800170c <play_music+0x118>
		while (pausing) ;
 8001622:	bf00      	nop
 8001624:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <play_music+0x15c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1fb      	bne.n	8001624 <play_music+0x30>
		int note = pnote[i]>0?(white_note[pnote[i]-1] + MIDDLE_C):0;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	dd0a      	ble.n	8001650 <play_music+0x5c>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	4a43      	ldr	r2, [pc, #268]	; (8001754 <play_music+0x160>)
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	333c      	adds	r3, #60	; 0x3c
 800164e:	e000      	b.n	8001652 <play_music+0x5e>
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
		switch (ptone[i]) {
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3303      	adds	r3, #3
 8001660:	2b06      	cmp	r3, #6
 8001662:	d829      	bhi.n	80016b8 <play_music+0xc4>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <play_music+0x78>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	080016b1 	.word	0x080016b1
 8001670:	080016a9 	.word	0x080016a9
 8001674:	08001699 	.word	0x08001699
 8001678:	080016b9 	.word	0x080016b9
 800167c:	08001689 	.word	0x08001689
 8001680:	080016a1 	.word	0x080016a1
 8001684:	08001691 	.word	0x08001691
		case 1:  note += 12; break;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	330c      	adds	r3, #12
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	e013      	b.n	80016b8 <play_music+0xc4>
		case 3:  note += 13; break;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	330d      	adds	r3, #13
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	e00f      	b.n	80016b8 <play_music+0xc4>
		case -1: note -= 12; break;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3b0c      	subs	r3, #12
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	e00b      	b.n	80016b8 <play_music+0xc4>
		case 2:  note++; break;
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e007      	b.n	80016b8 <play_music+0xc4>
		case -2: note--; break;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	e003      	b.n	80016b8 <play_music+0xc4>
		case -3: note -= 13; break;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	3b0d      	subs	r3, #13
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	bf00      	nop
		}
		if (note != 0)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <play_music+0xd4>
			note += tone_switching;
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <play_music+0x154>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4413      	add	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
		produce_sound(note, 60*1000*pbeat[i]/bpm/speed);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	4413      	add	r3, r2
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80016d6:	fb03 f202 	mul.w	r2, r3, r2
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe feeb 	bl	80004bc <__aeabi_i2d>
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <play_music+0x164>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f87a 	bl	80007e4 <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9fa 	bl	8000af0 <__aeabi_d2iz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	69b8      	ldr	r0, [r7, #24]
 8001702:	f7ff fc55 	bl	8000fb0 <produce_sound>
	for (i=0;pnote[i]!=-1 && play_mode == init_mode && tone_switching==init_tone && !restart;i++) {
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171a:	d010      	beq.n	800173e <play_music+0x14a>
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <play_music+0x150>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	429a      	cmp	r2, r3
 8001724:	d10b      	bne.n	800173e <play_music+0x14a>
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <play_music+0x154>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d106      	bne.n	800173e <play_music+0x14a>
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <play_music+0x158>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f43f af74 	beq.w	8001622 <play_music+0x2e>
 800173a:	e000      	b.n	800173e <play_music+0x14a>
		return ;
 800173c:	bf00      	nop
	}
}
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000098 	.word	0x20000098
 8001748:	200000b0 	.word	0x200000b0
 800174c:	200000b4 	.word	0x200000b4
 8001750:	200000ac 	.word	0x200000ac
 8001754:	08008088 	.word	0x08008088
 8001758:	20000000 	.word	0x20000000

0800175c <HAL_TIM_PeriodElapsedCallback>:
int key0_last_status = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //定时器的定时回调函数
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM4) //确定�?????? TIM4 引起的中�??????
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a31      	ldr	r2, [pc, #196]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d15c      	bne.n	8001828 <HAL_TIM_PeriodElapsedCallback+0xcc>
	{
		if (key0_last_status && KEY0) {
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d036      	beq.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001776:	2101      	movs	r1, #1
 8001778:	482f      	ldr	r0, [pc, #188]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800177a:	f001 f9bf 	bl	8002afc <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d02f      	beq.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0x88>
			// long pressed
			key0_long_pushed = 1;
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
			output_device = !output_device;
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf0c      	ite	eq
 8001792:	2301      	moveq	r3, #1
 8001794:	2300      	movne	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800179c:	601a      	str	r2, [r3, #0]
			if (output_device==OUTPUT_MIDI) {
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d116      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x78>
				uint16_t i;
				for (i=0x0040;i<=0x0200;i<<=1)
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	81fb      	strh	r3, [r7, #14]
 80017aa:	e00f      	b.n	80017cc <HAL_TIM_PeriodElapsedCallback+0x70>
					if (LED_state & i) {
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	4013      	ands	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x6a>
						HAL_GPIO_WritePin(GPIOC, i, 0);
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80017c2:	f001 f9b3 	bl	8002b2c <HAL_GPIO_WritePin>
				for (i=0x0040;i<=0x0200;i<<=1)
 80017c6:	89fb      	ldrh	r3, [r7, #14]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	81fb      	strh	r3, [r7, #14]
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d2:	d9eb      	bls.n	80017ac <HAL_TIM_PeriodElapsedCallback+0x50>
					}
			}
			while (KEY0);
 80017d4:	bf00      	nop
 80017d6:	2101      	movs	r1, #1
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80017da:	f001 f98f 	bl	8002afc <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f8      	bne.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x7a>
		}
		key0_last_status = KEY0;
 80017e4:	2101      	movs	r1, #1
 80017e6:	4814      	ldr	r0, [pc, #80]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80017e8:	f001 f988 	bl	8002afc <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80017f2:	601a      	str	r2, [r3, #0]
		if (output_device == OUTPUT_BUZZER) {
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d115      	bne.n	8001828 <HAL_TIM_PeriodElapsedCallback+0xcc>
			// blinking for BUZZER MODE
			uint16_t i;
			for (i=0x0040;i<=0x0200;i<<=1)
 80017fc:	2340      	movs	r3, #64	; 0x40
 80017fe:	81bb      	strh	r3, [r7, #12]
 8001800:	e00e      	b.n	8001820 <HAL_TIM_PeriodElapsedCallback+0xc4>
			if (LED_state & i) {
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001804:	881a      	ldrh	r2, [r3, #0]
 8001806:	89bb      	ldrh	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_TIM_PeriodElapsedCallback+0xbe>
				HAL_GPIO_TogglePin(GPIOC, i);
 8001810:	89bb      	ldrh	r3, [r7, #12]
 8001812:	4619      	mov	r1, r3
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001816:	f001 f9a1 	bl	8002b5c <HAL_GPIO_TogglePin>
			for (i=0x0040;i<=0x0200;i<<=1)
 800181a:	89bb      	ldrh	r3, [r7, #12]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	81bb      	strh	r3, [r7, #12]
 8001820:	89bb      	ldrh	r3, [r7, #12]
 8001822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001826:	d9ec      	bls.n	8001802 <HAL_TIM_PeriodElapsedCallback+0xa6>
			}
		}
	}
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40000800 	.word	0x40000800
 8001834:	20000274 	.word	0x20000274
 8001838:	48000800 	.word	0x48000800
 800183c:	200000a4 	.word	0x200000a4
 8001840:	2000009c 	.word	0x2000009c
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    switch (data_buff[0]) {
 8001850:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_UART_RxCpltCallback+0x124>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	2b11      	cmp	r3, #17
 8001858:	d87a      	bhi.n	8001950 <HAL_UART_RxCpltCallback+0x108>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <HAL_UART_RxCpltCallback+0x18>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	080018a9 	.word	0x080018a9
 8001864:	080018bf 	.word	0x080018bf
 8001868:	080018d1 	.word	0x080018d1
 800186c:	080018ed 	.word	0x080018ed
 8001870:	08001909 	.word	0x08001909
 8001874:	08001915 	.word	0x08001915
 8001878:	08001921 	.word	0x08001921
 800187c:	0800192d 	.word	0x0800192d
 8001880:	08001951 	.word	0x08001951
 8001884:	08001951 	.word	0x08001951
 8001888:	08001951 	.word	0x08001951
 800188c:	08001951 	.word	0x08001951
 8001890:	08001951 	.word	0x08001951
 8001894:	08001951 	.word	0x08001951
 8001898:	08001951 	.word	0x08001951
 800189c:	08001939 	.word	0x08001939
 80018a0:	08001941 	.word	0x08001941
 80018a4:	08001949 	.word	0x08001949
	case 0x01: pausing = !pausing; break;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_UART_RxCpltCallback+0x128>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_UART_RxCpltCallback+0x128>)
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e048      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x02: init_walkman(); tone_switching = 0; restart = 1; break;
 80018be:	f7ff fc1f 	bl	8001100 <init_walkman>
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_UART_RxCpltCallback+0x130>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e03f      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x03: speed += 0.25; break;
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_UART_RxCpltCallback+0x134>)
 80018d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_UART_RxCpltCallback+0x138>)
 80018dc:	f7fe fca2 	bl	8000224 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4925      	ldr	r1, [pc, #148]	; (800197c <HAL_UART_RxCpltCallback+0x134>)
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
 80018ea:	e031      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x04: speed -= 0.25; break;
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_UART_RxCpltCallback+0x134>)
 80018ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_UART_RxCpltCallback+0x138>)
 80018f8:	f7fe fc92 	bl	8000220 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	491e      	ldr	r1, [pc, #120]	; (800197c <HAL_UART_RxCpltCallback+0x134>)
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
 8001906:	e023      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x05: tone_switching++; break;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x06: tone_switching--; break;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3b01      	subs	r3, #1
 800191a:	4a16      	ldr	r2, [pc, #88]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e017      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x07: tone_switching+=12; break;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	330c      	adds	r3, #12
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e011      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x08: tone_switching-=12; break;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3b0c      	subs	r3, #12
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_UART_RxCpltCallback+0x12c>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x10: play_mode = 1; break;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_UART_RxCpltCallback+0x13c>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e007      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x11: play_mode = 2; break;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_UART_RxCpltCallback+0x13c>)
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e003      	b.n	8001950 <HAL_UART_RxCpltCallback+0x108>
	case 0x12: play_mode = 3; break;
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_UART_RxCpltCallback+0x13c>)
 800194a:	2203      	movs	r2, #3
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	bf00      	nop
	//		case GPIO_PIN_7: tone += 12; break;
	//		case GPIO_PIN_8: tone -= 12; break;
	}
  while(HAL_UART_Receive_IT(&huart1, data_buff, 1) != HAL_OK); // Wait completly receive 1 byte data, and put data in rDataBuffer
 8001950:	bf00      	nop
 8001952:	2201      	movs	r2, #1
 8001954:	4905      	ldr	r1, [pc, #20]	; (800196c <HAL_UART_RxCpltCallback+0x124>)
 8001956:	480c      	ldr	r0, [pc, #48]	; (8001988 <HAL_UART_RxCpltCallback+0x140>)
 8001958:	f003 fcda 	bl	8005310 <HAL_UART_Receive_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f7      	bne.n	8001952 <HAL_UART_RxCpltCallback+0x10a>
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200000b8 	.word	0x200000b8
 8001970:	200000ac 	.word	0x200000ac
 8001974:	200000b0 	.word	0x200000b0
 8001978:	200000b4 	.word	0x200000b4
 800197c:	20000000 	.word	0x20000000
 8001980:	3fd00000 	.word	0x3fd00000
 8001984:	20000098 	.word	0x20000098
 8001988:	2000014c 	.word	0x2000014c
 800198c:	00000000 	.word	0x00000000

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f000 fccc 	bl	8002332 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f885 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fa2d 	bl	8001dfc <MX_GPIO_Init>
  MX_TIM3_Init();
 80019a2:	f000 f961 	bl	8001c68 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 80019a6:	f000 f8c9 	bl	8001b3c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 80019aa:	f000 f9d7 	bl	8001d5c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80019ae:	f000 f90f 	bl	8001bd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //启动定时器TIM3通道1的PWM输出
 80019b2:	2100      	movs	r1, #0
 80019b4:	4834      	ldr	r0, [pc, #208]	; (8001a88 <main+0xf8>)
 80019b6:	f002 f9ff 	bl	8003db8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80019ba:	4834      	ldr	r0, [pc, #208]	; (8001a8c <main+0xfc>)
 80019bc:	f002 f930 	bl	8003c20 <HAL_TIM_Base_Start_IT>
  //定义函数
  setPWM(0, DEFAULT_DUTY);
 80019c0:	205f      	movs	r0, #95	; 0x5f
 80019c2:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001a80 <main+0xf0>
 80019c6:	f7ff fa5f 	bl	8000e88 <setPWM>
  HAL_UART_Receive_IT(&huart1,data_buff, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	4930      	ldr	r1, [pc, #192]	; (8001a90 <main+0x100>)
 80019ce:	4831      	ldr	r0, [pc, #196]	; (8001a94 <main+0x104>)
 80019d0:	f003 fc9e 	bl	8005310 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode == PIANO_MODE) {
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <main+0x108>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d114      	bne.n	8001a06 <main+0x76>
		  init_piano();
 80019dc:	f7ff fb6c 	bl	80010b8 <init_piano>
		  while (play_mode==PIANO_MODE) {
 80019e0:	e00d      	b.n	80019fe <main+0x6e>
			  if (sounding_buffer) {
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <main+0x10c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <main+0x6e>
				  produce_sound(current_note, 500);
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <main+0x110>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fadc 	bl	8000fb0 <produce_sound>
				  sounding_buffer = 0;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <main+0x10c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
		  while (play_mode==PIANO_MODE) {
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <main+0x108>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ed      	beq.n	80019e2 <main+0x52>
			  }
		  }
	  }
	  init_walkman();
 8001a06:	f7ff fb7b 	bl	8001100 <init_walkman>
	  HAL_Delay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0e:	f000 fd01 	bl	8002414 <HAL_Delay>
	  play_music(score[play_mode][1], score[play_mode][2], score[play_mode][3],
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <main+0x108>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8001a22:	4a20      	ldr	r2, [pc, #128]	; (8001aa4 <main+0x114>)
 8001a24:	1898      	adds	r0, r3, r2
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <main+0x108>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <main+0x114>)
 8001a38:	1899      	adds	r1, r3, r2
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <main+0x108>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <main+0x114>)
 8001a4e:	441a      	add	r2, r3
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <main+0x108>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4c13      	ldr	r4, [pc, #76]	; (8001aa4 <main+0x114>)
 8001a56:	f44f 55c9 	mov.w	r5, #6432	; 0x1920
 8001a5a:	fb05 f303 	mul.w	r3, r5, r3
 8001a5e:	4423      	add	r3, r4
 8001a60:	681c      	ldr	r4, [r3, #0]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <main+0x108>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4d0f      	ldr	r5, [pc, #60]	; (8001aa4 <main+0x114>)
 8001a68:	f44f 56c9 	mov.w	r6, #6432	; 0x1920
 8001a6c:	fb06 f303 	mul.w	r3, r6, r3
 8001a70:	442b      	add	r3, r5
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4623      	mov	r3, r4
 8001a7a:	f7ff fdbb 	bl	80015f4 <play_music>
	  if (play_mode == PIANO_MODE) {
 8001a7e:	e7a9      	b.n	80019d4 <main+0x44>
	...
 8001a88:	200001dc 	.word	0x200001dc
 8001a8c:	20000228 	.word	0x20000228
 8001a90:	200000b8 	.word	0x200000b8
 8001a94:	2000014c 	.word	0x2000014c
 8001a98:	20000098 	.word	0x20000098
 8001a9c:	200000a8 	.word	0x200000a8
 8001aa0:	200000a0 	.word	0x200000a0
 8001aa4:	080080ac 	.word	0x080080ac

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	; 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	2238      	movs	r2, #56	; 0x38
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 fbb4 	bl	8007224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f001 f878 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ada:	2302      	movs	r3, #2
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ae6:	2355      	movs	r3, #85	; 0x55
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 f914 	bl	8002d28 <HAL_RCC_OscConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001b06:	f000 fa2b 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2104      	movs	r1, #4
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fc18 	bl	8003358 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b2e:	f000 fa17 	bl	8001f60 <Error_Handler>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3750      	adds	r7, #80	; 0x50
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <MX_LPUART1_UART_Init+0x90>)
 8001b44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b7e:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b80:	f003 fae0 	bl	8005144 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b8a:	f000 f9e9 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001b92:	f005 fa52 	bl	800703a <HAL_UARTEx_SetTxFifoThreshold>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b9c:	f000 f9e0 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001ba4:	f005 fa87 	bl	80070b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001bae:	f000 f9d7 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_LPUART1_UART_Init+0x8c>)
 8001bb4:	f005 fa08 	bl	8006fc8 <HAL_UARTEx_DisableFifoMode>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001bbe:	f000 f9cf 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000bc 	.word	0x200000bc
 8001bcc:	40008000 	.word	0x40008000

08001bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <MX_USART1_UART_Init+0x94>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001bdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c18:	4811      	ldr	r0, [pc, #68]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c1a:	f003 fa93 	bl	8005144 <HAL_UART_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c24:	f000 f99c 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c2c:	f005 fa05 	bl	800703a <HAL_UARTEx_SetTxFifoThreshold>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c36:	f000 f993 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4808      	ldr	r0, [pc, #32]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c3e:	f005 fa3a 	bl	80070b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c48:	f000 f98a 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_USART1_UART_Init+0x90>)
 8001c4e:	f005 f9bb 	bl	8006fc8 <HAL_UARTEx_DisableFifoMode>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c58:	f000 f982 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000014c 	.word	0x2000014c
 8001c64:	40013800 	.word	0x40013800

08001c68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001c9c:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <MX_TIM3_Init+0xf0>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001ca2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001cb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cc2:	4824      	ldr	r0, [pc, #144]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001cc4:	f001 ff54 	bl	8003b70 <HAL_TIM_Base_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001cce:	f000 f947 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481d      	ldr	r0, [pc, #116]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001ce0:	f002 fbfe 	bl	80044e0 <HAL_TIM_ConfigClockSource>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001cea:	f000 f939 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cee:	4819      	ldr	r0, [pc, #100]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001cf0:	f002 f800 	bl	8003cf4 <HAL_TIM_PWM_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001cfa:	f000 f931 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4811      	ldr	r0, [pc, #68]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001d0e:	f003 f951 	bl	8004fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001d18:	f000 f922 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1c:	2360      	movs	r3, #96	; 0x60
 8001d1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001d20:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	4619      	mov	r1, r3
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001d36:	f002 fabf 	bl	80042b8 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001d40:	f000 f90e 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM3_Init+0xec>)
 8001d46:	f000 fa0f 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001d4a:	bf00      	nop
 8001d4c:	3738      	adds	r7, #56	; 0x38
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200001dc 	.word	0x200001dc
 8001d58:	40000400 	.word	0x40000400

08001d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <MX_TIM4_Init+0x9c>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16999;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d82:	f244 2267 	movw	r2, #16999	; 0x4267
 8001d86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d90:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001da2:	4814      	ldr	r0, [pc, #80]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001da4:	f001 fee4 	bl	8003b70 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001dae:	f000 f8d7 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001dc0:	f002 fb8e 	bl	80044e0 <HAL_TIM_ConfigClockSource>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001dca:	f000 f8c9 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001ddc:	f003 f8ea 	bl	8004fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001de6:	f000 f8bb 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000228 	.word	0x20000228
 8001df8:	40000800 	.word	0x40000800

08001dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a4f      	ldr	r2, [pc, #316]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <MX_GPIO_Init+0x158>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001e78:	4837      	ldr	r0, [pc, #220]	; (8001f58 <MX_GPIO_Init+0x15c>)
 8001e7a:	f000 fe57 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4830      	ldr	r0, [pc, #192]	; (8001f58 <MX_GPIO_Init+0x15c>)
 8001e96:	f000 fcaf 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	482a      	ldr	r0, [pc, #168]	; (8001f58 <MX_GPIO_Init+0x15c>)
 8001eae:	f000 fca3 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001eb2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001eb6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4824      	ldr	r0, [pc, #144]	; (8001f5c <MX_GPIO_Init+0x160>)
 8001eca:	f000 fc95 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ece:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	481c      	ldr	r0, [pc, #112]	; (8001f58 <MX_GPIO_Init+0x15c>)
 8001ee8:	f000 fc86 	bl	80027f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2007      	movs	r0, #7
 8001ef2:	f000 fb8c 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ef6:	2007      	movs	r0, #7
 8001ef8:	f000 fba3 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2008      	movs	r0, #8
 8001f02:	f000 fb84 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f06:	2008      	movs	r0, #8
 8001f08:	f000 fb9b 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2009      	movs	r0, #9
 8001f12:	f000 fb7c 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f16:	2009      	movs	r0, #9
 8001f18:	f000 fb93 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2101      	movs	r1, #1
 8001f20:	200a      	movs	r0, #10
 8001f22:	f000 fb74 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f26:	200a      	movs	r0, #10
 8001f28:	f000 fb8b 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2017      	movs	r0, #23
 8001f32:	f000 fb6c 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f36:	2017      	movs	r0, #23
 8001f38:	f000 fb83 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	2028      	movs	r0, #40	; 0x28
 8001f42:	f000 fb64 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f46:	2028      	movs	r0, #40	; 0x28
 8001f48:	f000 fb7b 	bl	8002642 <HAL_NVIC_EnableIRQ>

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	48000800 	.word	0x48000800
 8001f5c:	48000400 	.word	0x48000400

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <Error_Handler+0x8>
	...

08001f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6593      	str	r3, [r2, #88]	; 0x58
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fa2:	f000 feb1 	bl	8002d08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b09c      	sub	sp, #112	; 0x70
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	2244      	movs	r2, #68	; 0x44
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f005 f925 	bl	8007224 <memset>
  if(huart->Instance==LPUART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a41      	ldr	r2, [pc, #260]	; (80020e4 <HAL_UART_MspInit+0x130>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d137      	bne.n	8002054 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f001 fbcd 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ffc:	f7ff ffb0 	bl	8001f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	4a38      	ldr	r2, [pc, #224]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_UART_MspInit+0x134>)
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_UART_MspInit+0x134>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	4a32      	ldr	r2, [pc, #200]	; (80020e8 <HAL_UART_MspInit+0x134>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002030:	230c      	movs	r3, #12
 8002032:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002040:	230c      	movs	r3, #12
 8002042:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204e:	f000 fbd3 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002052:	e042      	b.n	80020da <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_UART_MspInit+0x138>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d13d      	bne.n	80020da <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800205e:	2301      	movs	r3, #1
 8002060:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fb90 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002076:	f7ff ff73 	bl	8001f60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_UART_MspInit+0x134>)
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6613      	str	r3, [r2, #96]	; 0x60
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_UART_MspInit+0x134>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_UART_MspInit+0x134>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020aa:	2330      	movs	r3, #48	; 0x30
 80020ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ba:	2307      	movs	r3, #7
 80020bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020c2:	4619      	mov	r1, r3
 80020c4:	480a      	ldr	r0, [pc, #40]	; (80020f0 <HAL_UART_MspInit+0x13c>)
 80020c6:	f000 fb97 	bl	80027f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2101      	movs	r1, #1
 80020ce:	2025      	movs	r0, #37	; 0x25
 80020d0:	f000 fa9d 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020d4:	2025      	movs	r0, #37	; 0x25
 80020d6:	f000 fab4 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3770      	adds	r7, #112	; 0x70
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40008000 	.word	0x40008000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40013800 	.word	0x40013800
 80020f0:	48000800 	.word	0x48000800

080020f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_TIM_Base_MspInit+0x68>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10c      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_TIM_Base_MspInit+0x6c>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_TIM_Base_MspInit+0x6c>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_TIM_Base_MspInit+0x6c>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800211e:	e018      	b.n	8002152 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_TIM_Base_MspInit+0x70>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d113      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_TIM_Base_MspInit+0x6c>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_TIM_Base_MspInit+0x6c>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x6c>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2101      	movs	r1, #1
 8002146:	201e      	movs	r0, #30
 8002148:	f000 fa61 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800214c:	201e      	movs	r0, #30
 800214e:	f000 fa78 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40000400 	.word	0x40000400
 8002160:	40021000 	.word	0x40021000
 8002164:	40000800 	.word	0x40000800

08002168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <HAL_TIM_MspPostInit+0x64>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11c      	bne.n	80021c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_TIM_MspPostInit+0x68>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_TIM_MspPostInit+0x68>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_TIM_MspPostInit+0x68>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c0:	f000 fb1a 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40021000 	.word	0x40021000

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <NMI_Handler+0x4>

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f000 f8da 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800222c:	2002      	movs	r0, #2
 800222e:	f000 fcaf 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}

08002236 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800223a:	2004      	movs	r0, #4
 800223c:	f000 fca8 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002248:	2008      	movs	r0, #8
 800224a:	f000 fca1 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}

08002252 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002256:	2010      	movs	r0, #16
 8002258:	f000 fc9a 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002264:	2020      	movs	r0, #32
 8002266:	f000 fc93 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800226a:	2040      	movs	r0, #64	; 0x40
 800226c:	f000 fc90 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002270:	2080      	movs	r0, #128	; 0x80
 8002272:	f000 fc8d 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002276:	f44f 7080 	mov.w	r0, #256	; 0x100
 800227a:	f000 fc89 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <TIM4_IRQHandler+0x10>)
 800228a:	f001 fe95 	bl	8003fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000228 	.word	0x20000228

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f003 f88d 	bl	80053bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000014c 	.word	0x2000014c

080022ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022b4:	f000 fc6c 	bl	8002b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022e6:	490e      	ldr	r1, [pc, #56]	; (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022fc:	4c0b      	ldr	r4, [pc, #44]	; (800232c <LoopForever+0x16>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800230a:	f7ff ffd7 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f004 ff65 	bl	80071dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002312:	f7ff fb3d 	bl	8001990 <main>

08002316 <LoopForever>:

LoopForever:
    b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002324:	08017c70 	.word	0x08017c70
  ldr r2, =_sbss
 8002328:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800232c:	2000027c 	.word	0x2000027c

08002330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC1_2_IRQHandler>

08002332 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233c:	2003      	movs	r0, #3
 800233e:	f000 f95b 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002342:	200f      	movs	r0, #15
 8002344:	f000 f80e 	bl	8002364 <HAL_InitTick>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	e001      	b.n	8002358 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002354:	f7ff fe0a 	bl	8001f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002358:	79fb      	ldrb	r3, [r7, #7]

}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_InitTick+0x68>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d022      	beq.n	80023be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_InitTick+0x6c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_InitTick+0x68>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002384:	fbb1 f3f3 	udiv	r3, r1, r3
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f966 	bl	800265e <HAL_SYSTICK_Config>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10f      	bne.n	80023b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	d809      	bhi.n	80023b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239e:	2200      	movs	r2, #0
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	f04f 30ff 	mov.w	r0, #4294967295
 80023a6:	f000 f932 	bl	800260e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_InitTick+0x70>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e007      	b.n	80023c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e004      	b.n	80023c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e001      	b.n	80023c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000014 	.word	0x20000014
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	20000010 	.word	0x20000010

080023d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_IncTick+0x1c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_IncTick+0x20>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <HAL_IncTick+0x1c>)
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20000278 	.word	0x20000278
 80023f8:	20000014 	.word	0x20000014

080023fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_GetTick+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000278 	.word	0x20000278

08002414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff ffee 	bl	80023fc <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d004      	beq.n	8002438 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_Delay+0x40>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002438:	bf00      	nop
 800243a:	f7ff ffdf 	bl	80023fc <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	429a      	cmp	r2, r3
 8002448:	d8f7      	bhi.n	800243a <HAL_Delay+0x26>
  {
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000014 	.word	0x20000014

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff40 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff90 	bl	800254c <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff33 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa4 	bl	80025b4 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d005      	beq.n	800269a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e037      	b.n	800270a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020e 	bic.w	r2, r2, #14
 80026a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002708:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d00d      	beq.n	800275c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2204      	movs	r2, #4
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e047      	b.n	80027ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 020e 	bic.w	r2, r2, #14
 800276a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
    }
  }
  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002806:	e15a      	b.n	8002abe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 814c 	beq.w	8002ab8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d005      	beq.n	8002838 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002834:	2b02      	cmp	r3, #2
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0201 	and.w	r2, r3, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d123      	bne.n	800292a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	6939      	ldr	r1, [r7, #16]
 8002926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80a6 	beq.w	8002ab8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296c:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_GPIO_Init+0x2e4>)
 800296e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002970:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_GPIO_Init+0x2e4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6613      	str	r3, [r2, #96]	; 0x60
 8002978:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_GPIO_Init+0x2e4>)
 800297a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002984:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_GPIO_Init+0x2e8>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ae:	d01f      	beq.n	80029f0 <HAL_GPIO_Init+0x1f8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <HAL_GPIO_Init+0x2ec>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d019      	beq.n	80029ec <HAL_GPIO_Init+0x1f4>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_GPIO_Init+0x1f0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <HAL_GPIO_Init+0x2f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00d      	beq.n	80029e4 <HAL_GPIO_Init+0x1ec>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a49      	ldr	r2, [pc, #292]	; (8002af0 <HAL_GPIO_Init+0x2f8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <HAL_GPIO_Init+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a48      	ldr	r2, [pc, #288]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029d8:	2305      	movs	r3, #5
 80029da:	e00a      	b.n	80029f2 <HAL_GPIO_Init+0x1fa>
 80029dc:	2306      	movs	r3, #6
 80029de:	e008      	b.n	80029f2 <HAL_GPIO_Init+0x1fa>
 80029e0:	2304      	movs	r3, #4
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1fa>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1fa>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1fa>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1fa>
 80029f0:	2300      	movs	r3, #0
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a02:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_GPIO_Init+0x2e8>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a34:	4a30      	ldr	r2, [pc, #192]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_GPIO_Init+0x300>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f ae9d 	bne.w	8002808 <HAL_GPIO_Init+0x10>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	48000c00 	.word	0x48000c00
 8002af0:	48001000 	.word	0x48001000
 8002af4:	48001400 	.word	0x48001400
 8002af8:	40010400 	.word	0x40010400

08002afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	43d9      	mvns	r1, r3
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fabc 	bl	800112c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d141      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bce:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d131      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be2:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf4:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2232      	movs	r2, #50	; 0x32
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c12:	e002      	b.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d102      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f2      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d158      	bne.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e057      	b.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c46:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c50:	e04d      	b.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d141      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d131      	bne.n	8002ccc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2232      	movs	r2, #50	; 0x32
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	0c9b      	lsrs	r3, r3, #18
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9e:	e002      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d102      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f2      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d112      	bne.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e011      	b.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cdc:	e007      	b.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	431bde83 	.word	0x431bde83

08002d08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d16:	6093      	str	r3, [r2, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40007000 	.word	0x40007000

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e306      	b.n	8003348 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d075      	beq.n	8002e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	4b97      	ldr	r3, [pc, #604]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d50:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3e>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_OscConfig+0x44>
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05b      	beq.n	8002e30 <HAL_RCC_OscConfig+0x108>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d157      	bne.n	8002e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e2e1      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x74>
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a84      	ldr	r2, [pc, #528]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002da6:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7e      	ldr	r2, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7b      	ldr	r2, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xb0>
 8002dc0:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a77      	ldr	r2, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b75      	ldr	r3, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a74      	ldr	r2, [pc, #464]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff fb0c 	bl	80023fc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff fb08 	bl	80023fc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e2a6      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xc0>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7ff faf8 	bl	80023fc <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7ff faf4 	bl	80023fc <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e292      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0xe8>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e48:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x136>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_OscConfig+0x13c>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11f      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e64:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x154>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e265      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	4946      	ldr	r1, [pc, #280]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_RCC_OscConfig+0x280>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fa65 	bl	8002364 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d043      	beq.n	8002f28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e251      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d023      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff faa0 	bl	80023fc <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff fa9c 	bl	80023fc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e23a      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	492d      	ldr	r1, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
 8002ef2:	e01a      	b.n	8002f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff fa7c 	bl	80023fc <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7ff fa78 	bl	80023fc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e216      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x1e0>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d041      	beq.n	8002fba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7ff fa55 	bl	80023fc <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f56:	f7ff fa51 	bl	80023fc <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1ef      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ef      	beq.n	8002f56 <HAL_RCC_OscConfig+0x22e>
 8002f76:	e020      	b.n	8002fba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7ff fa38 	bl	80023fc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8e:	e00d      	b.n	8002fac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f90:	f7ff fa34 	bl	80023fc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d906      	bls.n	8002fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1d2      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fac:	4b8c      	ldr	r3, [pc, #560]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ea      	bne.n	8002f90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80a6 	beq.w	8003114 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fcc:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2b4>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x2b6>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6593      	str	r3, [r2, #88]	; 0x58
 8002fee:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffe:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <HAL_RCC_OscConfig+0x4bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x4bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a75      	ldr	r2, [pc, #468]	; (80031e4 <HAL_RCC_OscConfig+0x4bc>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7ff f9f1 	bl	80023fc <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7ff f9ed 	bl	80023fc <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e18b      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <HAL_RCC_OscConfig+0x4bc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d108      	bne.n	8003056 <HAL_RCC_OscConfig+0x32e>
 8003044:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003054:	e024      	b.n	80030a0 <HAL_RCC_OscConfig+0x378>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d110      	bne.n	8003080 <HAL_RCC_OscConfig+0x358>
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a5a      	ldr	r2, [pc, #360]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	e00f      	b.n	80030a0 <HAL_RCC_OscConfig+0x378>
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f023 0304 	bic.w	r3, r3, #4
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d016      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7ff f9a8 	bl	80023fc <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7ff f9a4 	bl	80023fc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e140      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c6:	4b46      	ldr	r3, [pc, #280]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ed      	beq.n	80030b0 <HAL_RCC_OscConfig+0x388>
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7ff f991 	bl	80023fc <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7ff f98d 	bl	80023fc <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e129      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f4:	4b3a      	ldr	r3, [pc, #232]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ed      	bne.n	80030de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d03c      	beq.n	800319a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01c      	beq.n	8003162 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 800312a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312e:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7ff f960 	bl	80023fc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003140:	f7ff f95c 	bl	80023fc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0fa      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ef      	beq.n	8003140 <HAL_RCC_OscConfig+0x418>
 8003160:	e01b      	b.n	800319a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 8003164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7ff f943 	bl	80023fc <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317a:	f7ff f93f 	bl	80023fc <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0dd      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ef      	bne.n	800317a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80d1 	beq.w	8003346 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	f000 808b 	beq.w	80032c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d15e      	bne.n	8003278 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7ff f919 	bl	80023fc <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031cc:	e00c      	b.n	80031e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7ff f915 	bl	80023fc <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d905      	bls.n	80031e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0b3      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ec      	bne.n	80031ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f4:	4b56      	ldr	r3, [pc, #344]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCC_OscConfig+0x62c>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6a11      	ldr	r1, [r2, #32]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003204:	3a01      	subs	r2, #1
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800320e:	0212      	lsls	r2, r2, #8
 8003210:	4311      	orrs	r1, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003216:	0852      	lsrs	r2, r2, #1
 8003218:	3a01      	subs	r2, #1
 800321a:	0552      	lsls	r2, r2, #21
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003222:	0852      	lsrs	r2, r2, #1
 8003224:	3a01      	subs	r2, #1
 8003226:	0652      	lsls	r2, r2, #25
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800322e:	06d2      	lsls	r2, r2, #27
 8003230:	430a      	orrs	r2, r1
 8003232:	4947      	ldr	r1, [pc, #284]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b45      	ldr	r3, [pc, #276]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a44      	ldr	r2, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800323e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003242:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a41      	ldr	r2, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7ff f8d4 	bl	80023fc <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7ff f8d0 	bl	80023fc <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e06e      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x530>
 8003276:	e066      	b.n	8003346 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b35      	ldr	r3, [pc, #212]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a34      	ldr	r2, [pc, #208]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800327e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a31      	ldr	r2, [pc, #196]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003290:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 8003296:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7ff f8ac 	bl	80023fc <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7ff f8a8 	bl	80023fc <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e046      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ba:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x580>
 80032c6:	e03e      	b.n	8003346 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e039      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <HAL_RCC_OscConfig+0x628>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0203 	and.w	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d12c      	bne.n	8003342 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	3b01      	subs	r3, #1
 80032f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d123      	bne.n	8003342 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d11b      	bne.n	8003342 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d113      	bne.n	8003342 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	3b01      	subs	r3, #1
 8003328:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d109      	bne.n	8003342 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	019f800c 	.word	0x019f800c

08003358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e11e      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b91      	ldr	r3, [pc, #580]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d910      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b8e      	ldr	r3, [pc, #568]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 020f 	bic.w	r2, r3, #15
 8003386:	498c      	ldr	r1, [pc, #560]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b8a      	ldr	r3, [pc, #552]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e106      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d073      	beq.n	8003494 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d129      	bne.n	8003408 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0f4      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033c4:	f000 f99e 	bl	8003704 <RCC_GetSysClockFreqFromPLLSource>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4a7c      	ldr	r2, [pc, #496]	; (80035c0 <HAL_RCC_ClockConfig+0x268>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d93f      	bls.n	8003452 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033d2:	4b7a      	ldr	r3, [pc, #488]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d033      	beq.n	8003452 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d12f      	bne.n	8003452 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fa:	4a70      	ldr	r2, [pc, #448]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80033fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003400:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e024      	b.n	8003452 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d107      	bne.n	8003420 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0c6      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003420:	4b66      	ldr	r3, [pc, #408]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0be      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003430:	f000 f8ce 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8003434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4a61      	ldr	r2, [pc, #388]	; (80035c0 <HAL_RCC_ClockConfig+0x268>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d909      	bls.n	8003452 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800343e:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003446:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4957      	ldr	r1, [pc, #348]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003464:	f7fe ffca 	bl	80023fc <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fe ffc6 	bl	80023fc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e095      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b4e      	ldr	r3, [pc, #312]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a42      	ldr	r2, [pc, #264]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034cc:	4a3b      	ldr	r2, [pc, #236]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b39      	ldr	r3, [pc, #228]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4936      	ldr	r1, [pc, #216]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
 80034e6:	e008      	b.n	80034fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d105      	bne.n	80034fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034ee:	4b33      	ldr	r3, [pc, #204]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4a32      	ldr	r2, [pc, #200]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 80034f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d21d      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 020f 	bic.w	r2, r3, #15
 8003510:	4929      	ldr	r1, [pc, #164]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003518:	f7fe ff70 	bl	80023fc <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe ff6c 	bl	80023fc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e03b      	b.n	80035ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_RCC_ClockConfig+0x260>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d1ed      	bne.n	8003520 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4917      	ldr	r1, [pc, #92]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	490f      	ldr	r1, [pc, #60]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003582:	f000 f825 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_RCC_ClockConfig+0x264>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490c      	ldr	r1, [pc, #48]	; (80035c4 <HAL_RCC_ClockConfig+0x26c>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	fa22 f303 	lsr.w	r3, r2, r3
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x270>)
 80035a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_ClockConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fedc 	bl	8002364 <HAL_InitTick>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40022000 	.word	0x40022000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	04c4b400 	.word	0x04c4b400
 80035c4:	08017bec 	.word	0x08017bec
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	20000010 	.word	0x20000010

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035d6:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035e2:	4b2a      	ldr	r3, [pc, #168]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	e047      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035f4:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	e03e      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d136      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	3301      	adds	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d10c      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	0a12      	lsrs	r2, r2, #8
 8003632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	617b      	str	r3, [r7, #20]
      break;
 800363c:	e00c      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	0a12      	lsrs	r2, r2, #8
 800364c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
      break;
 8003656:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0e5b      	lsrs	r3, r3, #25
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e001      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003678:	693b      	ldr	r3, [r7, #16]
}
 800367a:	4618      	mov	r0, r3
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	00f42400 	.word	0x00f42400
 8003690:	016e3600 	.word	0x016e3600

08003694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	2000000c 	.word	0x2000000c

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08017bfc 	.word	0x08017bfc

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036dc:	f7ff ffda 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0adb      	lsrs	r3, r3, #11
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	08017bfc 	.word	0x08017bfc

08003704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d10c      	bne.n	8003742 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003732:	68d2      	ldr	r2, [r2, #12]
 8003734:	0a12      	lsrs	r2, r2, #8
 8003736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	617b      	str	r3, [r7, #20]
    break;
 8003740:	e00c      	b.n	800375c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800374c:	68d2      	ldr	r2, [r2, #12]
 800374e:	0a12      	lsrs	r2, r2, #8
 8003750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    break;
 800375a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0e5b      	lsrs	r3, r3, #25
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003776:	687b      	ldr	r3, [r7, #4]
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40021000 	.word	0x40021000
 8003788:	016e3600 	.word	0x016e3600
 800378c:	00f42400 	.word	0x00f42400

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003798:	2300      	movs	r3, #0
 800379a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800379c:	2300      	movs	r3, #0
 800379e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8098 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a3f      	ldr	r2, [pc, #252]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037da:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a39      	ldr	r2, [pc, #228]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037e6:	f7fe fe09 	bl	80023fc <HAL_GetTick>
 80037ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ec:	e009      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe fe05 	bl	80023fc <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d902      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ef      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d159      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	d019      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003830:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800383c:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fe fdc5 	bl	80023fc <HAL_GetTick>
 8003872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003874:	e00b      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fe fdc1 	bl	80023fc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d902      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	74fb      	strb	r3, [r7, #19]
            break;
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ec      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4903      	ldr	r1, [pc, #12]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038b8:	e008      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	74bb      	strb	r3, [r7, #18]
 80038be:	e005      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038cc:	7c7b      	ldrb	r3, [r7, #17]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d2:	4ba6      	ldr	r3, [pc, #664]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	4aa5      	ldr	r2, [pc, #660]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ea:	4ba0      	ldr	r3, [pc, #640]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f023 0203 	bic.w	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	499c      	ldr	r1, [pc, #624]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800390c:	4b97      	ldr	r3, [pc, #604]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 020c 	bic.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4994      	ldr	r1, [pc, #592]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800392e:	4b8f      	ldr	r3, [pc, #572]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	498b      	ldr	r1, [pc, #556]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003950:	4b86      	ldr	r3, [pc, #536]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	4983      	ldr	r1, [pc, #524]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003972:	4b7e      	ldr	r3, [pc, #504]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	497a      	ldr	r1, [pc, #488]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003994:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	4972      	ldr	r1, [pc, #456]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039b6:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	4969      	ldr	r1, [pc, #420]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039d8:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4961      	ldr	r1, [pc, #388]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039fa:	4b5c      	ldr	r3, [pc, #368]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	4958      	ldr	r1, [pc, #352]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d015      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	4950      	ldr	r1, [pc, #320]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d105      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a4a      	ldr	r2, [pc, #296]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d015      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a54:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	4942      	ldr	r1, [pc, #264]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a72:	d105      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a74:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a3c      	ldr	r2, [pc, #240]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a8c:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aac:	4b2f      	ldr	r3, [pc, #188]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a2e      	ldr	r2, [pc, #184]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d015      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	4926      	ldr	r1, [pc, #152]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	4918      	ldr	r1, [pc, #96]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	490a      	ldr	r1, [pc, #40]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d105      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b60:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e049      	b.n	8003c16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fe faac 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fdb8 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d001      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e04a      	b.n	8003cce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_TIM_Base_Start_IT+0xbc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x6c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c62:	d013      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x6c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x6c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x6c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x6c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_TIM_Base_Start_IT+0xcc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d115      	bne.n	8003cb8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d015      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0xaa>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d011      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	e008      	b.n	8003cca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e000      	b.n	8003ccc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	00010007 	.word	0x00010007

08003cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e049      	b.n	8003d9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f841 	bl	8003da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f000 fcf6 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start+0x24>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e03c      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d109      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x3e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e02f      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x58>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e022      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x72>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e015      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x8c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_TIM_PWM_Start+0x9e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e097      	b.n	8003f8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xb6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6c:	e023      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xc6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	e01b      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xd6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	e013      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xe6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e9c:	e00b      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0xf6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eac:	e003      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xfe>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f852 	bl	8004f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a33      	ldr	r2, [pc, #204]	; (8003f98 <HAL_TIM_PWM_Start+0x1e0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x13e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a32      	ldr	r2, [pc, #200]	; (8003f9c <HAL_TIM_PWM_Start+0x1e4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x13e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a30      	ldr	r2, [pc, #192]	; (8003fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x13e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x13e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_Start+0x142>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_TIM_PWM_Start+0x144>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_TIM_PWM_Start+0x1e0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d018      	beq.n	8003f4c <HAL_TIM_PWM_Start+0x194>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d013      	beq.n	8003f4c <HAL_TIM_PWM_Start+0x194>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_TIM_PWM_Start+0x1f4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <HAL_TIM_PWM_Start+0x194>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_TIM_PWM_Start+0x1f8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d009      	beq.n	8003f4c <HAL_TIM_PWM_Start+0x194>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_TIM_PWM_Start+0x1e4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_TIM_PWM_Start+0x194>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d115      	bne.n	8003f78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <HAL_TIM_PWM_Start+0x1fc>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d015      	beq.n	8003f8a <HAL_TIM_PWM_Start+0x1d2>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d011      	beq.n	8003f8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f76:	e008      	b.n	8003f8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e000      	b.n	8003f8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40013400 	.word	0x40013400
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	00010007 	.word	0x00010007

08003fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0202 	mvn.w	r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fb74 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fb66 	bl	80046d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fb77 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0204 	mvn.w	r2, #4
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fb4a 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fb3c 	bl	80046d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fb4d 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0208 	mvn.w	r2, #8
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2204      	movs	r2, #4
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb20 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fb12 	bl	80046d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fb23 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0210 	mvn.w	r2, #16
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2208      	movs	r2, #8
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 faf6 	bl	80046e8 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fae8 	bl	80046d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 faf9 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0201 	mvn.w	r2, #1
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fb10 	bl	800175c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 ffb2 	bl	80050cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004176:	d10e      	bne.n	8004196 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d107      	bne.n	8004196 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800418e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 ffa5 	bl	80050e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d10e      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d107      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 faa7 	bl	8004710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d10e      	bne.n	80041ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d107      	bne.n	80041ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f06f 0220 	mvn.w	r2, #32
 80041e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 ff65 	bl	80050b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fc:	d10f      	bne.n	800421e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 ff6b 	bl	80050f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800422c:	d10f      	bne.n	800424e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800423c:	d107      	bne.n	800424e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 ff5d 	bl	8005108 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d10f      	bne.n	800427e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426c:	d107      	bne.n	800427e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 ff4f 	bl	800511c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800428c:	d10f      	bne.n	80042ae <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800429c:	d107      	bne.n	80042ae <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 ff41 	bl	8005130 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e0ff      	b.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b14      	cmp	r3, #20
 80042e2:	f200 80f0 	bhi.w	80044c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004341 	.word	0x08004341
 80042f0:	080044c7 	.word	0x080044c7
 80042f4:	080044c7 	.word	0x080044c7
 80042f8:	080044c7 	.word	0x080044c7
 80042fc:	08004381 	.word	0x08004381
 8004300:	080044c7 	.word	0x080044c7
 8004304:	080044c7 	.word	0x080044c7
 8004308:	080044c7 	.word	0x080044c7
 800430c:	080043c3 	.word	0x080043c3
 8004310:	080044c7 	.word	0x080044c7
 8004314:	080044c7 	.word	0x080044c7
 8004318:	080044c7 	.word	0x080044c7
 800431c:	08004403 	.word	0x08004403
 8004320:	080044c7 	.word	0x080044c7
 8004324:	080044c7 	.word	0x080044c7
 8004328:	080044c7 	.word	0x080044c7
 800432c:	08004445 	.word	0x08004445
 8004330:	080044c7 	.word	0x080044c7
 8004334:	080044c7 	.word	0x080044c7
 8004338:	080044c7 	.word	0x080044c7
 800433c:	08004485 	.word	0x08004485
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fa7c 	bl	8004844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0208 	orr.w	r2, r2, #8
 800435a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	619a      	str	r2, [r3, #24]
      break;
 800437e:	e0a5      	b.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 faec 	bl	8004964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800439a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6999      	ldr	r1, [r3, #24]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	619a      	str	r2, [r3, #24]
      break;
 80043c0:	e084      	b.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fb55 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0208 	orr.w	r2, r2, #8
 80043dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	61da      	str	r2, [r3, #28]
      break;
 8004400:	e064      	b.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fbbd 	bl	8004b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69d9      	ldr	r1, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	61da      	str	r2, [r3, #28]
      break;
 8004442:	e043      	b.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fc26 	bl	8004c9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0208 	orr.w	r2, r2, #8
 800445e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004482:	e023      	b.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fc6a 	bl	8004d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800449e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80044c4:	e002      	b.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop

080044e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_ConfigClockSource+0x1c>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e0de      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x1da>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800451a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a63      	ldr	r2, [pc, #396]	; (80046c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f000 80a9 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 800453c:	4a61      	ldr	r2, [pc, #388]	; (80046c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f200 80ae 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004544:	4a60      	ldr	r2, [pc, #384]	; (80046c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f000 80a1 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 800454c:	4a5e      	ldr	r2, [pc, #376]	; (80046c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	f200 80a6 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004554:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f000 8099 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 800455c:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800455e:	4293      	cmp	r3, r2
 8004560:	f200 809e 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004564:	4a5a      	ldr	r2, [pc, #360]	; (80046d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	f000 8091 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 800456c:	4a58      	ldr	r2, [pc, #352]	; (80046d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	f200 8096 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004578:	f000 8089 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 800457c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004580:	f200 808e 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004588:	d03e      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0x128>
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458e:	f200 8087 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	f000 8086 	beq.w	80046a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	d87f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	d01a      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xfa>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d87b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a8:	2b60      	cmp	r3, #96	; 0x60
 80045aa:	d050      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x16e>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d877      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045b0:	2b50      	cmp	r3, #80	; 0x50
 80045b2:	d03c      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x14e>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d873      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d058      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x18e>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d86f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045c0:	2b30      	cmp	r3, #48	; 0x30
 80045c2:	d064      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d867      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d05a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x1ae>
 80045d8:	e062      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f000 fc9d 	bl	8004f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
      break;
 8004606:	e04f      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f000 fc86 	bl	8004f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	461a      	mov	r2, r3
 800463c:	f000 fbf8 	bl	8004e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	; 0x50
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fc51 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 800464c:	e02c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	461a      	mov	r2, r3
 800465c:	f000 fc17 	bl	8004e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fc41 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 800466c:	e01c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	f000 fbd8 	bl	8004e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fc31 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 800468c:	e00c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f000 fc28 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 800469e:	e003      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80046a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	00100070 	.word	0x00100070
 80046c8:	00100040 	.word	0x00100040
 80046cc:	00100030 	.word	0x00100030
 80046d0:	00100020 	.word	0x00100020

080046d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a3c      	ldr	r2, [pc, #240]	; (8004828 <TIM_Base_SetConfig+0x104>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0x38>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x38>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a39      	ldr	r2, [pc, #228]	; (800482c <TIM_Base_SetConfig+0x108>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x38>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a38      	ldr	r2, [pc, #224]	; (8004830 <TIM_Base_SetConfig+0x10c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <TIM_Base_SetConfig+0x110>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <TIM_Base_SetConfig+0x104>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01b      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d017      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <TIM_Base_SetConfig+0x108>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a29      	ldr	r2, [pc, #164]	; (8004830 <TIM_Base_SetConfig+0x10c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00f      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a28      	ldr	r2, [pc, #160]	; (8004834 <TIM_Base_SetConfig+0x110>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00b      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a27      	ldr	r2, [pc, #156]	; (8004838 <TIM_Base_SetConfig+0x114>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d007      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a26      	ldr	r2, [pc, #152]	; (800483c <TIM_Base_SetConfig+0x118>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a25      	ldr	r2, [pc, #148]	; (8004840 <TIM_Base_SetConfig+0x11c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d108      	bne.n	80047c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a10      	ldr	r2, [pc, #64]	; (8004828 <TIM_Base_SetConfig+0x104>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00f      	beq.n	800480c <TIM_Base_SetConfig+0xe8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <TIM_Base_SetConfig+0x110>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <TIM_Base_SetConfig+0xe8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <TIM_Base_SetConfig+0x114>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d007      	beq.n	800480c <TIM_Base_SetConfig+0xe8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0f      	ldr	r2, [pc, #60]	; (800483c <TIM_Base_SetConfig+0x118>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0xe8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <TIM_Base_SetConfig+0x11c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d103      	bne.n	8004814 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	615a      	str	r2, [r3, #20]
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40013400 	.word	0x40013400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0303 	bic.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 0302 	bic.w	r3, r3, #2
 8004890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <TIM_OC1_SetConfig+0x10c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00f      	beq.n	80048c4 <TIM_OC1_SetConfig+0x80>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <TIM_OC1_SetConfig+0x110>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_OC1_SetConfig+0x80>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <TIM_OC1_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_OC1_SetConfig+0x80>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_OC1_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC1_SetConfig+0x80>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_OC1_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10c      	bne.n	80048de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0308 	bic.w	r3, r3, #8
 80048ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <TIM_OC1_SetConfig+0x10c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_OC1_SetConfig+0xc2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <TIM_OC1_SetConfig+0x110>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_OC1_SetConfig+0xc2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <TIM_OC1_SetConfig+0x114>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_OC1_SetConfig+0xc2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <TIM_OC1_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_OC1_SetConfig+0xc2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <TIM_OC1_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d111      	bne.n	800492a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0320 	bic.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <TIM_OC2_SetConfig+0x100>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_OC2_SetConfig+0x6c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <TIM_OC2_SetConfig+0x104>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10d      	bne.n	80049ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <TIM_OC2_SetConfig+0x100>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00f      	beq.n	8004a14 <TIM_OC2_SetConfig+0xb0>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <TIM_OC2_SetConfig+0x104>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00b      	beq.n	8004a14 <TIM_OC2_SetConfig+0xb0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <TIM_OC2_SetConfig+0x108>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <TIM_OC2_SetConfig+0xb0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <TIM_OC2_SetConfig+0x10c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_OC2_SetConfig+0xb0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <TIM_OC2_SetConfig+0x110>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d113      	bne.n	8004a3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40013400 	.word	0x40013400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <TIM_OC3_SetConfig+0xfc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_OC3_SetConfig+0x6a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <TIM_OC3_SetConfig+0x100>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10d      	bne.n	8004afe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <TIM_OC3_SetConfig+0xfc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_OC3_SetConfig+0xae>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <TIM_OC3_SetConfig+0x100>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_OC3_SetConfig+0xae>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <TIM_OC3_SetConfig+0x104>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_OC3_SetConfig+0xae>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <TIM_OC3_SetConfig+0x108>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_OC3_SetConfig+0xae>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <TIM_OC3_SetConfig+0x10c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d113      	bne.n	8004b4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <TIM_OC4_SetConfig+0x100>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_OC4_SetConfig+0x6c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <TIM_OC4_SetConfig+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d10d      	bne.n	8004c10 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <TIM_OC4_SetConfig+0x100>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00f      	beq.n	8004c38 <TIM_OC4_SetConfig+0xb0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <TIM_OC4_SetConfig+0x104>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00b      	beq.n	8004c38 <TIM_OC4_SetConfig+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <TIM_OC4_SetConfig+0x108>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <TIM_OC4_SetConfig+0xb0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <TIM_OC4_SetConfig+0x10c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_OC4_SetConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <TIM_OC4_SetConfig+0x110>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d113      	bne.n	8004c60 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40013400 	.word	0x40013400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	041b      	lsls	r3, r3, #16
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <TIM_OC5_SetConfig+0xb4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <TIM_OC5_SetConfig+0x7a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <TIM_OC5_SetConfig+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_OC5_SetConfig+0x7a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <TIM_OC5_SetConfig+0xbc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <TIM_OC5_SetConfig+0x7a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <TIM_OC5_SetConfig+0xc0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_OC5_SetConfig+0x7a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <TIM_OC5_SetConfig+0xc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d109      	bne.n	8004d2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	051b      	lsls	r3, r3, #20
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <TIM_OC6_SetConfig+0xb8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00f      	beq.n	8004de0 <TIM_OC6_SetConfig+0x7c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <TIM_OC6_SetConfig+0xbc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_OC6_SetConfig+0x7c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <TIM_OC6_SetConfig+0xc0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_OC6_SetConfig+0x7c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <TIM_OC6_SetConfig+0xc4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC6_SetConfig+0x7c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <TIM_OC6_SetConfig+0xc8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d109      	bne.n	8004df4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	029b      	lsls	r3, r3, #10
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800

08004e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 030a 	bic.w	r3, r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b087      	sub	sp, #28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0210 	bic.w	r2, r3, #16
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f043 0307 	orr.w	r3, r3, #7
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	021a      	lsls	r2, r3, #8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	609a      	str	r2, [r3, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1a      	ldr	r2, [r3, #32]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1a      	ldr	r2, [r3, #32]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e065      	b.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d108      	bne.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d018      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d013      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4313      	orrs	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40014000 	.word	0x40014000

080050b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e042      	b.n	80051dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fc ff23 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2224      	movs	r2, #36	; 0x24
 8005172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fc50 	bl	8005a2c <UART_SetConfig>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e022      	b.n	80051dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 ff10 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 ff97 	bl	8006108 <UART_CheckIdleState>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	f040 8083 	bne.w	8005306 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Transmit+0x28>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e07b      	b.n	8005308 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_UART_Transmit+0x3a>
 800521a:	2302      	movs	r3, #2
 800521c:	e074      	b.n	8005308 <HAL_UART_Transmit+0x124>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2221      	movs	r2, #33	; 0x21
 8005232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005236:	f7fd f8e1 	bl	80023fc <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005254:	d108      	bne.n	8005268 <HAL_UART_Transmit+0x84>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e003      	b.n	8005270 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005278:	e02c      	b.n	80052d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2200      	movs	r2, #0
 8005282:	2180      	movs	r1, #128	; 0x80
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 ff8a 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e039      	b.n	8005308 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	3302      	adds	r3, #2
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	e007      	b.n	80052c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1cc      	bne.n	800527a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 ff57 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e006      	b.n	8005308 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2302      	movs	r3, #2
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	; 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	2b20      	cmp	r3, #32
 8005326:	d142      	bne.n	80053ae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_UART_Receive_IT+0x24>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e03b      	b.n	80053b0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_UART_Receive_IT+0x36>
 8005342:	2302      	movs	r3, #2
 8005344:	e034      	b.n	80053b0 <HAL_UART_Receive_IT+0xa0>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <HAL_UART_Receive_IT+0xa8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d018      	beq.n	800539e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	613b      	str	r3, [r7, #16]
   return(result);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	69f9      	ldr	r1, [r7, #28]
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	61bb      	str	r3, [r7, #24]
   return(result);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e6      	bne.n	800536c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 ffc3 	bl	8006330 <UART_Start_Receive_IT>
 80053aa:	4603      	mov	r3, r0
 80053ac:	e000      	b.n	80053b0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40008000 	.word	0x40008000

080053bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b0ba      	sub	sp, #232	; 0xe8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80053ea:	4013      	ands	r3, r2
 80053ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d11b      	bne.n	8005430 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d015      	beq.n	8005430 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 82d6 	beq.w	80059d2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
      }
      return;
 800542e:	e2d0      	b.n	80059d2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 811f 	beq.w	8005678 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800543a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800543e:	4b8b      	ldr	r3, [pc, #556]	; (800566c <HAL_UART_IRQHandler+0x2b0>)
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800544a:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_UART_IRQHandler+0x2b4>)
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8112 	beq.w	8005678 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d011      	beq.n	8005484 <HAL_UART_IRQHandler+0xc8>
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <HAL_UART_IRQHandler+0xf8>
 8005490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2202      	movs	r2, #2
 80054a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054aa:	f043 0204 	orr.w	r2, r3, #4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d011      	beq.n	80054e4 <HAL_UART_IRQHandler+0x128>
 80054c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2204      	movs	r2, #4
 80054d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054da:	f043 0202 	orr.w	r2, r3, #2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80054fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005500:	4b5a      	ldr	r3, [pc, #360]	; (800566c <HAL_UART_IRQHandler+0x2b0>)
 8005502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2208      	movs	r2, #8
 800550e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005516:	f043 0208 	orr.w	r2, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <HAL_UART_IRQHandler+0x196>
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 823c 	beq.w	80059d6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d013      	beq.n	8005592 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800556a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d105      	bne.n	8005582 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04f      	beq.n	8005656 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 ffe4 	bl	8006584 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d141      	bne.n	800564e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800560e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1d9      	bne.n	80055ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d013      	beq.n	8005646 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005622:	4a14      	ldr	r2, [pc, #80]	; (8005674 <HAL_UART_IRQHandler+0x2b8>)
 8005624:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd f87c 	bl	8002728 <HAL_DMA_Abort_IT>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d017      	beq.n	8005666 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	e00f      	b.n	8005666 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9da 	bl	8005a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	e00b      	b.n	8005666 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9d6 	bl	8005a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e007      	b.n	8005666 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9d2 	bl	8005a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005664:	e1b7      	b.n	80059d6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005666:	bf00      	nop
    return;
 8005668:	e1b5      	b.n	80059d6 <HAL_UART_IRQHandler+0x61a>
 800566a:	bf00      	nop
 800566c:	10000001 	.word	0x10000001
 8005670:	04000120 	.word	0x04000120
 8005674:	08006651 	.word	0x08006651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 814a 	bne.w	8005916 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8143 	beq.w	8005916 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 813c 	beq.w	8005916 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2210      	movs	r2, #16
 80056a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	f040 80b5 	bne.w	8005820 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8187 	beq.w	80059da <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f080 817f 	bcs.w	80059da <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8086 	bne.w	8005804 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800570c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005726:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800572e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800573a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1da      	bne.n	80056f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800576a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800576e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e1      	bne.n	8005742 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800578e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e3      	bne.n	800577e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d4:	f023 0310 	bic.w	r3, r3, #16
 80057d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80057e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e4      	bne.n	80057c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fc ff39 	bl	8002676 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005810:	b29b      	uxth	r3, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	b29b      	uxth	r3, r3
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8fb 	bl	8005a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800581e:	e0dc      	b.n	80059da <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800582c:	b29b      	uxth	r3, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80ce 	beq.w	80059de <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80c9 	beq.w	80059de <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
 8005870:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800587c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e4      	bne.n	800584c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	623b      	str	r3, [r7, #32]
   return(result);
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058aa:	633a      	str	r2, [r7, #48]	; 0x30
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e1      	bne.n	8005882 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	617b      	str	r3, [r7, #20]
   return(result);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e4      	bne.n	80058d2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f880 	bl	8005a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005914:	e063      	b.n	80059de <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <HAL_UART_IRQHandler+0x584>
 8005922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 fb27 	bl	8006f8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800593e:	e051      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d014      	beq.n	8005976 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d105      	bne.n	8005964 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005968:	2b00      	cmp	r3, #0
 800596a:	d03a      	beq.n	80059e2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
    }
    return;
 8005974:	e035      	b.n	80059e2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_UART_IRQHandler+0x5da>
 8005982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fe74 	bl	800667c <UART_EndTransmit_IT>
    return;
 8005994:	e026      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_UART_IRQHandler+0x5fa>
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 fb00 	bl	8006fb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059b4:	e016      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_UART_IRQHandler+0x628>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da0c      	bge.n	80059e4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fae8 	bl	8006fa0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059d0:	e008      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
      return;
 80059d2:	bf00      	nop
 80059d4:	e006      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
    return;
 80059d6:	bf00      	nop
 80059d8:	e004      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
      return;
 80059da:	bf00      	nop
 80059dc:	e002      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
      return;
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <HAL_UART_IRQHandler+0x628>
    return;
 80059e2:	bf00      	nop
  }
}
 80059e4:	37e8      	adds	r7, #232	; 0xe8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop

080059ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b08c      	sub	sp, #48	; 0x30
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4bab      	ldr	r3, [pc, #684]	; (8005d08 <UART_SetConfig+0x2dc>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4aa0      	ldr	r2, [pc, #640]	; (8005d0c <UART_SetConfig+0x2e0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a94:	4313      	orrs	r3, r2
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	f023 010f 	bic.w	r1, r3, #15
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a91      	ldr	r2, [pc, #580]	; (8005d10 <UART_SetConfig+0x2e4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d125      	bne.n	8005b1c <UART_SetConfig+0xf0>
 8005ad0:	4b90      	ldr	r3, [pc, #576]	; (8005d14 <UART_SetConfig+0x2e8>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d81a      	bhi.n	8005b14 <UART_SetConfig+0xe8>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0xb8>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afa:	e0d6      	b.n	8005caa <UART_SetConfig+0x27e>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b02:	e0d2      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e0ce      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e0ca      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e0c6      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7d      	ldr	r2, [pc, #500]	; (8005d18 <UART_SetConfig+0x2ec>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d138      	bne.n	8005b98 <UART_SetConfig+0x16c>
 8005b26:	4b7b      	ldr	r3, [pc, #492]	; (8005d14 <UART_SetConfig+0x2e8>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d82d      	bhi.n	8005b90 <UART_SetConfig+0x164>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0x110>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005b91 	.word	0x08005b91
 8005b48:	08005b91 	.word	0x08005b91
 8005b4c:	08005b81 	.word	0x08005b81
 8005b50:	08005b91 	.word	0x08005b91
 8005b54:	08005b91 	.word	0x08005b91
 8005b58:	08005b91 	.word	0x08005b91
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b91 	.word	0x08005b91
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b76:	e098      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7e:	e094      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e090      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	e08c      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b96:	e088      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5f      	ldr	r2, [pc, #380]	; (8005d1c <UART_SetConfig+0x2f0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d125      	bne.n	8005bee <UART_SetConfig+0x1c2>
 8005ba2:	4b5c      	ldr	r3, [pc, #368]	; (8005d14 <UART_SetConfig+0x2e8>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d016      	beq.n	8005bde <UART_SetConfig+0x1b2>
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d818      	bhi.n	8005be6 <UART_SetConfig+0x1ba>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d00a      	beq.n	8005bce <UART_SetConfig+0x1a2>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d814      	bhi.n	8005be6 <UART_SetConfig+0x1ba>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <UART_SetConfig+0x19a>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d008      	beq.n	8005bd6 <UART_SetConfig+0x1aa>
 8005bc4:	e00f      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bcc:	e06d      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd4:	e069      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bdc:	e065      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bde:	2308      	movs	r3, #8
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be4:	e061      	b.n	8005caa <UART_SetConfig+0x27e>
 8005be6:	2310      	movs	r3, #16
 8005be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bec:	e05d      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4b      	ldr	r2, [pc, #300]	; (8005d20 <UART_SetConfig+0x2f4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d125      	bne.n	8005c44 <UART_SetConfig+0x218>
 8005bf8:	4b46      	ldr	r3, [pc, #280]	; (8005d14 <UART_SetConfig+0x2e8>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c02:	2bc0      	cmp	r3, #192	; 0xc0
 8005c04:	d016      	beq.n	8005c34 <UART_SetConfig+0x208>
 8005c06:	2bc0      	cmp	r3, #192	; 0xc0
 8005c08:	d818      	bhi.n	8005c3c <UART_SetConfig+0x210>
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d00a      	beq.n	8005c24 <UART_SetConfig+0x1f8>
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x210>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <UART_SetConfig+0x1f0>
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x200>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x210>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e042      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	e03e      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c32:	e03a      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e036      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c42:	e032      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <UART_SetConfig+0x2e0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d12a      	bne.n	8005ca4 <UART_SetConfig+0x278>
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <UART_SetConfig+0x2e8>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x268>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x270>
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x258>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x270>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x250>
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x260>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x270>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e012      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e00e      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e00a      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e006      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e002      	b.n	8005caa <UART_SetConfig+0x27e>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a17      	ldr	r2, [pc, #92]	; (8005d0c <UART_SetConfig+0x2e0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	f040 80a8 	bne.w	8005e06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d834      	bhi.n	8005d28 <UART_SetConfig+0x2fc>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x298>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005cf7 	.word	0x08005cf7
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005cff 	.word	0x08005cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fd fce0 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8005cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cee:	e021      	b.n	8005d34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <UART_SetConfig+0x2f8>)
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cf4:	e01e      	b.n	8005d34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf6:	f7fd fc6b 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8005cfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cfc:	e01a      	b.n	8005d34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d04:	e016      	b.n	8005d34 <UART_SetConfig+0x308>
 8005d06:	bf00      	nop
 8005d08:	cfff69f3 	.word	0xcfff69f3
 8005d0c:	40008000 	.word	0x40008000
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40004400 	.word	0x40004400
 8005d1c:	40004800 	.word	0x40004800
 8005d20:	40004c00 	.word	0x40004c00
 8005d24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 812a 	beq.w	8005f90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4a9e      	ldr	r2, [pc, #632]	; (8005fbc <UART_SetConfig+0x590>)
 8005d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d305      	bcc.n	8005d6c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d903      	bls.n	8005d74 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d72:	e10d      	b.n	8005f90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2200      	movs	r2, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	60fa      	str	r2, [r7, #12]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	4a8e      	ldr	r2, [pc, #568]	; (8005fbc <UART_SetConfig+0x590>)
 8005d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d96:	f7fa fef3 	bl	8000b80 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	020b      	lsls	r3, r1, #8
 8005dac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005db0:	0202      	lsls	r2, r0, #8
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	6849      	ldr	r1, [r1, #4]
 8005db6:	0849      	lsrs	r1, r1, #1
 8005db8:	2000      	movs	r0, #0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	eb12 0804 	adds.w	r8, r2, r4
 8005dc2:	eb43 0905 	adc.w	r9, r3, r5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	469a      	mov	sl, r3
 8005dce:	4693      	mov	fp, r2
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fed2 	bl	8000b80 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4613      	mov	r3, r2
 8005de2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dea:	d308      	bcc.n	8005dfe <UART_SetConfig+0x3d2>
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df2:	d204      	bcs.n	8005dfe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	e0c8      	b.n	8005f90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e04:	e0c4      	b.n	8005f90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0e:	d167      	bne.n	8005ee0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005e10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d828      	bhi.n	8005e6a <UART_SetConfig+0x43e>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0x3f4>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e6b 	.word	0x08005e6b
 8005e30:	08005e5b 	.word	0x08005e5b
 8005e34:	08005e6b 	.word	0x08005e6b
 8005e38:	08005e6b 	.word	0x08005e6b
 8005e3c:	08005e6b 	.word	0x08005e6b
 8005e40:	08005e63 	.word	0x08005e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e44:	f7fd fc32 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8005e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e4a:	e014      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fd fc44 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8005e50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e52:	e010      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e54:	4b5a      	ldr	r3, [pc, #360]	; (8005fc0 <UART_SetConfig+0x594>)
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e58:	e00d      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5a:	f7fd fbb9 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8005e5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e60:	e009      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e68:	e005      	b.n	8005e76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8089 	beq.w	8005f90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	4a4e      	ldr	r2, [pc, #312]	; (8005fbc <UART_SetConfig+0x590>)
 8005e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e90:	005a      	lsls	r2, r3, #1
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	441a      	add	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d916      	bls.n	8005ed8 <UART_SetConfig+0x4ac>
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d212      	bcs.n	8005ed8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f023 030f 	bic.w	r3, r3, #15
 8005eba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	8bfa      	ldrh	r2, [r7, #30]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e05b      	b.n	8005f90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ede:	e057      	b.n	8005f90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d828      	bhi.n	8005f3a <UART_SetConfig+0x50e>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x4c4>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f3b 	.word	0x08005f3b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
 8005f10:	08005f33 	.word	0x08005f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fd fbca 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f1a:	e014      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fd fbdc 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8005f20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f22:	e010      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f24:	4b26      	ldr	r3, [pc, #152]	; (8005fc0 <UART_SetConfig+0x594>)
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f28:	e00d      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fd fb51 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f30:	e009      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f38:	e005      	b.n	8005f46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f44:	bf00      	nop
    }

    if (pclk != 0U)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d021      	beq.n	8005f90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <UART_SetConfig+0x590>)
 8005f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	441a      	add	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d909      	bls.n	8005f8a <UART_SetConfig+0x55e>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d205      	bcs.n	8005f8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60da      	str	r2, [r3, #12]
 8005f88:	e002      	b.n	8005f90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005fac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3730      	adds	r7, #48	; 0x30
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	08017c04 	.word	0x08017c04
 8005fc0:	00f42400 	.word	0x00f42400

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006118:	f7fc f970 	bl	80023fc <HAL_GetTick>
 800611c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b08      	cmp	r3, #8
 800612a:	d10e      	bne.n	800614a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f82f 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e025      	b.n	8006196 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d10e      	bne.n	8006176 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f819 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e00f      	b.n	8006196 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b09c      	sub	sp, #112	; 0x70
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ae:	e0a9      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	f000 80a5 	beq.w	8006304 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fc f91f 	bl	80023fc <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80061ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d140      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061e4:	667b      	str	r3, [r7, #100]	; 0x64
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e6      	bne.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	663b      	str	r3, [r7, #96]	; 0x60
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3308      	adds	r3, #8
 8006220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006222:	64ba      	str	r2, [r7, #72]	; 0x48
 8006224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e069      	b.n	8006326 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d051      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626e:	d149      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006278:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800628e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
 800629a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800629e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	613b      	str	r3, [r7, #16]
   return(result);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062cc:	623a      	str	r2, [r7, #32]
 80062ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e010      	b.n	8006326 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	429a      	cmp	r2, r3
 8006320:	f43f af46 	beq.w	80061b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3770      	adds	r7, #112	; 0x70
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006330:	b480      	push	{r7}
 8006332:	b0a3      	sub	sp, #140	; 0x8c
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	88fa      	ldrh	r2, [r7, #6]
 8006348:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d10e      	bne.n	8006382 <UART_Start_Receive_IT+0x52>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <UART_Start_Receive_IT+0x48>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006372:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006376:	e02d      	b.n	80063d4 <UART_Start_Receive_IT+0xa4>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	22ff      	movs	r2, #255	; 0xff
 800637c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006380:	e028      	b.n	80063d4 <UART_Start_Receive_IT+0xa4>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10d      	bne.n	80063a6 <UART_Start_Receive_IT+0x76>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <UART_Start_Receive_IT+0x6c>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	22ff      	movs	r2, #255	; 0xff
 8006396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800639a:	e01b      	b.n	80063d4 <UART_Start_Receive_IT+0xa4>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	227f      	movs	r2, #127	; 0x7f
 80063a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063a4:	e016      	b.n	80063d4 <UART_Start_Receive_IT+0xa4>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ae:	d10d      	bne.n	80063cc <UART_Start_Receive_IT+0x9c>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <UART_Start_Receive_IT+0x92>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	227f      	movs	r2, #127	; 0x7f
 80063bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063c0:	e008      	b.n	80063d4 <UART_Start_Receive_IT+0xa4>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	223f      	movs	r2, #63	; 0x3f
 80063c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ca:	e003      	b.n	80063d4 <UART_Start_Receive_IT+0xa4>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2222      	movs	r2, #34	; 0x22
 80063e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80063f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006408:	673a      	str	r2, [r7, #112]	; 0x70
 800640a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800640e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e3      	bne.n	80063e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006424:	d153      	bne.n	80064ce <UART_Start_Receive_IT+0x19e>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	429a      	cmp	r2, r3
 8006430:	d34d      	bcc.n	80064ce <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d107      	bne.n	800644c <UART_Start_Receive_IT+0x11c>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a4b      	ldr	r2, [pc, #300]	; (8006574 <UART_Start_Receive_IT+0x244>)
 8006448:	671a      	str	r2, [r3, #112]	; 0x70
 800644a:	e002      	b.n	8006452 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a4a      	ldr	r2, [pc, #296]	; (8006578 <UART_Start_Receive_IT+0x248>)
 8006450:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01a      	beq.n	8006498 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006486:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800648a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e4      	bne.n	8006462 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80064b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80064ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_Start_Receive_IT+0x168>
 80064cc:	e04a      	b.n	8006564 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d107      	bne.n	80064e8 <UART_Start_Receive_IT+0x1b8>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a26      	ldr	r2, [pc, #152]	; (800657c <UART_Start_Receive_IT+0x24c>)
 80064e4:	671a      	str	r2, [r3, #112]	; 0x70
 80064e6:	e002      	b.n	80064ee <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4a25      	ldr	r2, [pc, #148]	; (8006580 <UART_Start_Receive_IT+0x250>)
 80064ec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d019      	beq.n	8006532 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006512:	677b      	str	r3, [r7, #116]	; 0x74
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e6      	bne.n	80064fe <UART_Start_Receive_IT+0x1ce>
 8006530:	e018      	b.n	8006564 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	613b      	str	r3, [r7, #16]
   return(result);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	67bb      	str	r3, [r7, #120]	; 0x78
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	61bb      	str	r3, [r7, #24]
   return(result);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e6      	bne.n	8006532 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	378c      	adds	r7, #140	; 0x8c
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	08006c8d 	.word	0x08006c8d
 8006578:	08006995 	.word	0x08006995
 800657c:	08006833 	.word	0x08006833
 8006580:	080066d3 	.word	0x080066d3

08006584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b095      	sub	sp, #84	; 0x54
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
 80065ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e6      	bne.n	800658c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e3      	bne.n	80065be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d118      	bne.n	8006630 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	60bb      	str	r3, [r7, #8]
   return(result);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f023 0310 	bic.w	r3, r3, #16
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6979      	ldr	r1, [r7, #20]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	613b      	str	r3, [r7, #16]
   return(result);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006644:	bf00      	nop
 8006646:	3754      	adds	r7, #84	; 0x54
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff f9c6 	bl	8005a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	60bb      	str	r3, [r7, #8]
   return(result);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	613b      	str	r3, [r7, #16]
   return(result);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff f991 	bl	80059ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ca:	bf00      	nop
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b096      	sub	sp, #88	; 0x58
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	2b22      	cmp	r3, #34	; 0x22
 80066ec:	f040 8095 	bne.w	800681a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80066fe:	b2d9      	uxtb	r1, r3
 8006700:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006704:	b2da      	uxtb	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	400a      	ands	r2, r1
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d178      	bne.n	800682a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800674c:	653b      	str	r3, [r7, #80]	; 0x50
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
 8006758:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800675c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e6      	bne.n	8006738 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	623b      	str	r3, [r7, #32]
   return(result);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3308      	adds	r3, #8
 8006788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800678a:	633a      	str	r2, [r7, #48]	; 0x30
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e5      	bne.n	800676a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d12e      	bne.n	8006812 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	69b9      	ldr	r1, [r7, #24]
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	617b      	str	r3, [r7, #20]
   return(result);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d103      	bne.n	8006802 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2210      	movs	r2, #16
 8006800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff f902 	bl	8005a14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006810:	e00b      	b.n	800682a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fb f818 	bl	8001848 <HAL_UART_RxCpltCallback>
}
 8006818:	e007      	b.n	800682a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699a      	ldr	r2, [r3, #24]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0208 	orr.w	r2, r2, #8
 8006828:	619a      	str	r2, [r3, #24]
}
 800682a:	bf00      	nop
 800682c:	3758      	adds	r7, #88	; 0x58
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b096      	sub	sp, #88	; 0x58
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006840:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	2b22      	cmp	r3, #34	; 0x22
 800684c:	f040 8095 	bne.w	800697a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006860:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006864:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006868:	4013      	ands	r3, r2
 800686a:	b29a      	uxth	r2, r3
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006874:	1c9a      	adds	r2, r3, #2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d178      	bne.n	800698a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	643b      	str	r3, [r7, #64]	; 0x40
 80068b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e6      	bne.n	8006898 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d12e      	bne.n	8006972 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60bb      	str	r3, [r7, #8]
   return(result);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6979      	ldr	r1, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	613b      	str	r3, [r7, #16]
   return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d103      	bne.n	8006962 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff f852 	bl	8005a14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006970:	e00b      	b.n	800698a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa ff68 	bl	8001848 <HAL_UART_RxCpltCallback>
}
 8006978:	e007      	b.n	800698a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0208 	orr.w	r2, r2, #8
 8006988:	619a      	str	r2, [r3, #24]
}
 800698a:	bf00      	nop
 800698c:	3758      	adds	r7, #88	; 0x58
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b0a6      	sub	sp, #152	; 0x98
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	2b22      	cmp	r3, #34	; 0x22
 80069cc:	f040 814f 	bne.w	8006c6e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069da:	e0f6      	b.n	8006bca <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069e6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80069ea:	b2d9      	uxtb	r1, r3
 80069ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f6:	400a      	ands	r2, r1
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d053      	beq.n	8006ad6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a54:	f043 0201 	orr.w	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a84:	f043 0204 	orr.w	r2, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d011      	beq.n	8006abe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab4:	f043 0202 	orr.w	r2, r3, #2
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fe ff99 	bl	8005a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d173      	bne.n	8006bca <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b06:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006b0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e4      	bne.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006b3c:	657a      	str	r2, [r7, #84]	; 0x54
 8006b3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e3      	bne.n	8006b18 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d12e      	bne.n	8006bc4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e6      	bne.n	8006b6c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d103      	bne.n	8006bb4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2210      	movs	r2, #16
 8006bb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fe ff29 	bl	8005a14 <HAL_UARTEx_RxEventCallback>
 8006bc2:	e002      	b.n	8006bca <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fa fe3f 	bl	8001848 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f47f aefe 	bne.w	80069dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006be6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d045      	beq.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d23e      	bcs.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c16:	673b      	str	r3, [r7, #112]	; 0x70
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e5      	bne.n	8006c00 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006c38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f043 0320 	orr.w	r3, r3, #32
 8006c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6979      	ldr	r1, [r7, #20]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	613b      	str	r3, [r7, #16]
   return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c6c:	e007      	b.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0208 	orr.w	r2, r2, #8
 8006c7c:	619a      	str	r2, [r3, #24]
}
 8006c7e:	bf00      	nop
 8006c80:	3798      	adds	r7, #152	; 0x98
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	080066d3 	.word	0x080066d3

08006c8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b0a8      	sub	sp, #160	; 0xa0
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c9a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	2b22      	cmp	r3, #34	; 0x22
 8006cc4:	f040 8153 	bne.w	8006f6e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cd2:	e0fa      	b.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ce6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006cea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006cee:	4013      	ands	r3, r2
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfc:	1c9a      	adds	r2, r3, #2
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d053      	beq.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d011      	beq.n	8006d5a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2201      	movs	r2, #1
 8006d48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2202      	movs	r2, #2
 8006d78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d80:	f043 0204 	orr.w	r2, r3, #4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d011      	beq.n	8006dba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2204      	movs	r2, #4
 8006da8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db0:	f043 0202 	orr.w	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fe fe1b 	bl	8005a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d175      	bne.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e02:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e4      	bne.n	8006dde <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e1      	bne.n	8006e14 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d12e      	bne.n	8006ec4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7c:	f023 0310 	bic.w	r3, r3, #16
 8006e80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e6      	bne.n	8006e6c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d103      	bne.n	8006eb4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2210      	movs	r2, #16
 8006eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fe fda9 	bl	8005a14 <HAL_UARTEx_RxEventCallback>
 8006ec2:	e002      	b.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fa fcbf 	bl	8001848 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f47f aefa 	bne.w	8006cd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ee6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006eea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d045      	beq.n	8006f7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ef8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d23e      	bcs.n	8006f7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f16:	677b      	str	r3, [r7, #116]	; 0x74
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006f20:	633a      	str	r2, [r7, #48]	; 0x30
 8006f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e5      	bne.n	8006f00 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006f38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f043 0320 	orr.w	r3, r3, #32
 8006f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	617b      	str	r3, [r7, #20]
   return(result);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f6c:	e007      	b.n	8006f7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0208 	orr.w	r2, r2, #8
 8006f7c:	619a      	str	r2, [r3, #24]
}
 8006f7e:	bf00      	nop
 8006f80:	37a0      	adds	r7, #160	; 0xa0
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	08006833 	.word	0x08006833

08006f8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_UARTEx_DisableFifoMode+0x16>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e027      	b.n	800702e <HAL_UARTEx_DisableFifoMode+0x66>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2224      	movs	r2, #36	; 0x24
 8006fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800700c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800704e:	2302      	movs	r3, #2
 8007050:	e02d      	b.n	80070ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	; 0x24
 800705e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f850 	bl	8007134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e02d      	b.n	800712a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2224      	movs	r2, #36	; 0x24
 80070da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0201 	bic.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f812 	bl	8007134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007140:	2b00      	cmp	r3, #0
 8007142:	d108      	bne.n	8007156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007154:	e031      	b.n	80071ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007156:	2308      	movs	r3, #8
 8007158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800715a:	2308      	movs	r3, #8
 800715c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	0e5b      	lsrs	r3, r3, #25
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	0f5b      	lsrs	r3, r3, #29
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	7b3a      	ldrb	r2, [r7, #12]
 8007182:	4911      	ldr	r1, [pc, #68]	; (80071c8 <UARTEx_SetNbDataToProcess+0x94>)
 8007184:	5c8a      	ldrb	r2, [r1, r2]
 8007186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800718a:	7b3a      	ldrb	r2, [r7, #12]
 800718c:	490f      	ldr	r1, [pc, #60]	; (80071cc <UARTEx_SetNbDataToProcess+0x98>)
 800718e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007190:	fb93 f3f2 	sdiv	r3, r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	7b7a      	ldrb	r2, [r7, #13]
 80071a0:	4909      	ldr	r1, [pc, #36]	; (80071c8 <UARTEx_SetNbDataToProcess+0x94>)
 80071a2:	5c8a      	ldrb	r2, [r1, r2]
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071a8:	7b7a      	ldrb	r2, [r7, #13]
 80071aa:	4908      	ldr	r1, [pc, #32]	; (80071cc <UARTEx_SetNbDataToProcess+0x98>)
 80071ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	08017c1c 	.word	0x08017c1c
 80071cc:	08017c24 	.word	0x08017c24

080071d0 <__errno>:
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <__errno+0x8>)
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000018 	.word	0x20000018

080071dc <__libc_init_array>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	4d0d      	ldr	r5, [pc, #52]	; (8007214 <__libc_init_array+0x38>)
 80071e0:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <__libc_init_array+0x3c>)
 80071e2:	1b64      	subs	r4, r4, r5
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	2600      	movs	r6, #0
 80071e8:	42a6      	cmp	r6, r4
 80071ea:	d109      	bne.n	8007200 <__libc_init_array+0x24>
 80071ec:	4d0b      	ldr	r5, [pc, #44]	; (800721c <__libc_init_array+0x40>)
 80071ee:	4c0c      	ldr	r4, [pc, #48]	; (8007220 <__libc_init_array+0x44>)
 80071f0:	f000 ff3c 	bl	800806c <_init>
 80071f4:	1b64      	subs	r4, r4, r5
 80071f6:	10a4      	asrs	r4, r4, #2
 80071f8:	2600      	movs	r6, #0
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	d105      	bne.n	800720a <__libc_init_array+0x2e>
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	f855 3b04 	ldr.w	r3, [r5], #4
 8007204:	4798      	blx	r3
 8007206:	3601      	adds	r6, #1
 8007208:	e7ee      	b.n	80071e8 <__libc_init_array+0xc>
 800720a:	f855 3b04 	ldr.w	r3, [r5], #4
 800720e:	4798      	blx	r3
 8007210:	3601      	adds	r6, #1
 8007212:	e7f2      	b.n	80071fa <__libc_init_array+0x1e>
 8007214:	08017c68 	.word	0x08017c68
 8007218:	08017c68 	.word	0x08017c68
 800721c:	08017c68 	.word	0x08017c68
 8007220:	08017c6c 	.word	0x08017c6c

08007224 <memset>:
 8007224:	4402      	add	r2, r0
 8007226:	4603      	mov	r3, r0
 8007228:	4293      	cmp	r3, r2
 800722a:	d100      	bne.n	800722e <memset+0xa>
 800722c:	4770      	bx	lr
 800722e:	f803 1b01 	strb.w	r1, [r3], #1
 8007232:	e7f9      	b.n	8007228 <memset+0x4>

08007234 <pow>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	ed2d 8b02 	vpush	{d8}
 800723a:	eeb0 8a40 	vmov.f32	s16, s0
 800723e:	eef0 8a60 	vmov.f32	s17, s1
 8007242:	ec55 4b11 	vmov	r4, r5, d1
 8007246:	f000 f867 	bl	8007318 <__ieee754_pow>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	ec57 6b10 	vmov	r6, r7, d0
 8007256:	f7f9 fc35 	bl	8000ac4 <__aeabi_dcmpun>
 800725a:	2800      	cmp	r0, #0
 800725c:	d13b      	bne.n	80072d6 <pow+0xa2>
 800725e:	ec51 0b18 	vmov	r0, r1, d8
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	f7f9 fbfb 	bl	8000a60 <__aeabi_dcmpeq>
 800726a:	b1b8      	cbz	r0, 800729c <pow+0x68>
 800726c:	2200      	movs	r2, #0
 800726e:	2300      	movs	r3, #0
 8007270:	4620      	mov	r0, r4
 8007272:	4629      	mov	r1, r5
 8007274:	f7f9 fbf4 	bl	8000a60 <__aeabi_dcmpeq>
 8007278:	2800      	cmp	r0, #0
 800727a:	d146      	bne.n	800730a <pow+0xd6>
 800727c:	ec45 4b10 	vmov	d0, r4, r5
 8007280:	f000 fe63 	bl	8007f4a <finite>
 8007284:	b338      	cbz	r0, 80072d6 <pow+0xa2>
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 fbf1 	bl	8000a74 <__aeabi_dcmplt>
 8007292:	b300      	cbz	r0, 80072d6 <pow+0xa2>
 8007294:	f7ff ff9c 	bl	80071d0 <__errno>
 8007298:	2322      	movs	r3, #34	; 0x22
 800729a:	e01b      	b.n	80072d4 <pow+0xa0>
 800729c:	ec47 6b10 	vmov	d0, r6, r7
 80072a0:	f000 fe53 	bl	8007f4a <finite>
 80072a4:	b9e0      	cbnz	r0, 80072e0 <pow+0xac>
 80072a6:	eeb0 0a48 	vmov.f32	s0, s16
 80072aa:	eef0 0a68 	vmov.f32	s1, s17
 80072ae:	f000 fe4c 	bl	8007f4a <finite>
 80072b2:	b1a8      	cbz	r0, 80072e0 <pow+0xac>
 80072b4:	ec45 4b10 	vmov	d0, r4, r5
 80072b8:	f000 fe47 	bl	8007f4a <finite>
 80072bc:	b180      	cbz	r0, 80072e0 <pow+0xac>
 80072be:	4632      	mov	r2, r6
 80072c0:	463b      	mov	r3, r7
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 fbfd 	bl	8000ac4 <__aeabi_dcmpun>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d0e2      	beq.n	8007294 <pow+0x60>
 80072ce:	f7ff ff7f 	bl	80071d0 <__errno>
 80072d2:	2321      	movs	r3, #33	; 0x21
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	ecbd 8b02 	vpop	{d8}
 80072da:	ec47 6b10 	vmov	d0, r6, r7
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fbba 	bl	8000a60 <__aeabi_dcmpeq>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0f2      	beq.n	80072d6 <pow+0xa2>
 80072f0:	eeb0 0a48 	vmov.f32	s0, s16
 80072f4:	eef0 0a68 	vmov.f32	s1, s17
 80072f8:	f000 fe27 	bl	8007f4a <finite>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d0ea      	beq.n	80072d6 <pow+0xa2>
 8007300:	ec45 4b10 	vmov	d0, r4, r5
 8007304:	f000 fe21 	bl	8007f4a <finite>
 8007308:	e7c3      	b.n	8007292 <pow+0x5e>
 800730a:	4f01      	ldr	r7, [pc, #4]	; (8007310 <pow+0xdc>)
 800730c:	2600      	movs	r6, #0
 800730e:	e7e2      	b.n	80072d6 <pow+0xa2>
 8007310:	3ff00000 	.word	0x3ff00000
 8007314:	00000000 	.word	0x00000000

08007318 <__ieee754_pow>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	ed2d 8b06 	vpush	{d8-d10}
 8007320:	b089      	sub	sp, #36	; 0x24
 8007322:	ed8d 1b00 	vstr	d1, [sp]
 8007326:	e9dd 2900 	ldrd	r2, r9, [sp]
 800732a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800732e:	ea58 0102 	orrs.w	r1, r8, r2
 8007332:	ec57 6b10 	vmov	r6, r7, d0
 8007336:	d115      	bne.n	8007364 <__ieee754_pow+0x4c>
 8007338:	19b3      	adds	r3, r6, r6
 800733a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800733e:	4152      	adcs	r2, r2
 8007340:	4299      	cmp	r1, r3
 8007342:	4b89      	ldr	r3, [pc, #548]	; (8007568 <__ieee754_pow+0x250>)
 8007344:	4193      	sbcs	r3, r2
 8007346:	f080 84d2 	bcs.w	8007cee <__ieee754_pow+0x9d6>
 800734a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f8 ff67 	bl	8000224 <__adddf3>
 8007356:	ec41 0b10 	vmov	d0, r0, r1
 800735a:	b009      	add	sp, #36	; 0x24
 800735c:	ecbd 8b06 	vpop	{d8-d10}
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	4b81      	ldr	r3, [pc, #516]	; (800756c <__ieee754_pow+0x254>)
 8007366:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800736a:	429c      	cmp	r4, r3
 800736c:	ee10 aa10 	vmov	sl, s0
 8007370:	463d      	mov	r5, r7
 8007372:	dc06      	bgt.n	8007382 <__ieee754_pow+0x6a>
 8007374:	d101      	bne.n	800737a <__ieee754_pow+0x62>
 8007376:	2e00      	cmp	r6, #0
 8007378:	d1e7      	bne.n	800734a <__ieee754_pow+0x32>
 800737a:	4598      	cmp	r8, r3
 800737c:	dc01      	bgt.n	8007382 <__ieee754_pow+0x6a>
 800737e:	d10f      	bne.n	80073a0 <__ieee754_pow+0x88>
 8007380:	b172      	cbz	r2, 80073a0 <__ieee754_pow+0x88>
 8007382:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007386:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800738a:	ea55 050a 	orrs.w	r5, r5, sl
 800738e:	d1dc      	bne.n	800734a <__ieee754_pow+0x32>
 8007390:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007394:	18db      	adds	r3, r3, r3
 8007396:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800739a:	4152      	adcs	r2, r2
 800739c:	429d      	cmp	r5, r3
 800739e:	e7d0      	b.n	8007342 <__ieee754_pow+0x2a>
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	da3b      	bge.n	800741c <__ieee754_pow+0x104>
 80073a4:	4b72      	ldr	r3, [pc, #456]	; (8007570 <__ieee754_pow+0x258>)
 80073a6:	4598      	cmp	r8, r3
 80073a8:	dc51      	bgt.n	800744e <__ieee754_pow+0x136>
 80073aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80073ae:	4598      	cmp	r8, r3
 80073b0:	f340 84ac 	ble.w	8007d0c <__ieee754_pow+0x9f4>
 80073b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80073b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073bc:	2b14      	cmp	r3, #20
 80073be:	dd0f      	ble.n	80073e0 <__ieee754_pow+0xc8>
 80073c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80073c4:	fa22 f103 	lsr.w	r1, r2, r3
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	4293      	cmp	r3, r2
 80073ce:	f040 849d 	bne.w	8007d0c <__ieee754_pow+0x9f4>
 80073d2:	f001 0101 	and.w	r1, r1, #1
 80073d6:	f1c1 0302 	rsb	r3, r1, #2
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	b182      	cbz	r2, 8007400 <__ieee754_pow+0xe8>
 80073de:	e05f      	b.n	80074a0 <__ieee754_pow+0x188>
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	d15b      	bne.n	800749c <__ieee754_pow+0x184>
 80073e4:	f1c3 0314 	rsb	r3, r3, #20
 80073e8:	fa48 f103 	asr.w	r1, r8, r3
 80073ec:	fa01 f303 	lsl.w	r3, r1, r3
 80073f0:	4543      	cmp	r3, r8
 80073f2:	f040 8488 	bne.w	8007d06 <__ieee754_pow+0x9ee>
 80073f6:	f001 0101 	and.w	r1, r1, #1
 80073fa:	f1c1 0302 	rsb	r3, r1, #2
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	4b5c      	ldr	r3, [pc, #368]	; (8007574 <__ieee754_pow+0x25c>)
 8007402:	4598      	cmp	r8, r3
 8007404:	d132      	bne.n	800746c <__ieee754_pow+0x154>
 8007406:	f1b9 0f00 	cmp.w	r9, #0
 800740a:	f280 8478 	bge.w	8007cfe <__ieee754_pow+0x9e6>
 800740e:	4959      	ldr	r1, [pc, #356]	; (8007574 <__ieee754_pow+0x25c>)
 8007410:	4632      	mov	r2, r6
 8007412:	463b      	mov	r3, r7
 8007414:	2000      	movs	r0, #0
 8007416:	f7f9 f9e5 	bl	80007e4 <__aeabi_ddiv>
 800741a:	e79c      	b.n	8007356 <__ieee754_pow+0x3e>
 800741c:	2300      	movs	r3, #0
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	2a00      	cmp	r2, #0
 8007422:	d13d      	bne.n	80074a0 <__ieee754_pow+0x188>
 8007424:	4b51      	ldr	r3, [pc, #324]	; (800756c <__ieee754_pow+0x254>)
 8007426:	4598      	cmp	r8, r3
 8007428:	d1ea      	bne.n	8007400 <__ieee754_pow+0xe8>
 800742a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800742e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007432:	ea53 030a 	orrs.w	r3, r3, sl
 8007436:	f000 845a 	beq.w	8007cee <__ieee754_pow+0x9d6>
 800743a:	4b4f      	ldr	r3, [pc, #316]	; (8007578 <__ieee754_pow+0x260>)
 800743c:	429c      	cmp	r4, r3
 800743e:	dd08      	ble.n	8007452 <__ieee754_pow+0x13a>
 8007440:	f1b9 0f00 	cmp.w	r9, #0
 8007444:	f2c0 8457 	blt.w	8007cf6 <__ieee754_pow+0x9de>
 8007448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800744c:	e783      	b.n	8007356 <__ieee754_pow+0x3e>
 800744e:	2302      	movs	r3, #2
 8007450:	e7e5      	b.n	800741e <__ieee754_pow+0x106>
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	f04f 0000 	mov.w	r0, #0
 800745a:	f04f 0100 	mov.w	r1, #0
 800745e:	f6bf af7a 	bge.w	8007356 <__ieee754_pow+0x3e>
 8007462:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007466:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800746a:	e774      	b.n	8007356 <__ieee754_pow+0x3e>
 800746c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007470:	d106      	bne.n	8007480 <__ieee754_pow+0x168>
 8007472:	4632      	mov	r2, r6
 8007474:	463b      	mov	r3, r7
 8007476:	4630      	mov	r0, r6
 8007478:	4639      	mov	r1, r7
 800747a:	f7f9 f889 	bl	8000590 <__aeabi_dmul>
 800747e:	e76a      	b.n	8007356 <__ieee754_pow+0x3e>
 8007480:	4b3e      	ldr	r3, [pc, #248]	; (800757c <__ieee754_pow+0x264>)
 8007482:	4599      	cmp	r9, r3
 8007484:	d10c      	bne.n	80074a0 <__ieee754_pow+0x188>
 8007486:	2d00      	cmp	r5, #0
 8007488:	db0a      	blt.n	80074a0 <__ieee754_pow+0x188>
 800748a:	ec47 6b10 	vmov	d0, r6, r7
 800748e:	b009      	add	sp, #36	; 0x24
 8007490:	ecbd 8b06 	vpop	{d8-d10}
 8007494:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	f000 bc6c 	b.w	8007d74 <__ieee754_sqrt>
 800749c:	2300      	movs	r3, #0
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	ec47 6b10 	vmov	d0, r6, r7
 80074a4:	f000 fd48 	bl	8007f38 <fabs>
 80074a8:	ec51 0b10 	vmov	r0, r1, d0
 80074ac:	f1ba 0f00 	cmp.w	sl, #0
 80074b0:	d129      	bne.n	8007506 <__ieee754_pow+0x1ee>
 80074b2:	b124      	cbz	r4, 80074be <__ieee754_pow+0x1a6>
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <__ieee754_pow+0x25c>)
 80074b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d123      	bne.n	8007506 <__ieee754_pow+0x1ee>
 80074be:	f1b9 0f00 	cmp.w	r9, #0
 80074c2:	da05      	bge.n	80074d0 <__ieee754_pow+0x1b8>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	2000      	movs	r0, #0
 80074ca:	492a      	ldr	r1, [pc, #168]	; (8007574 <__ieee754_pow+0x25c>)
 80074cc:	f7f9 f98a 	bl	80007e4 <__aeabi_ddiv>
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	f6bf af40 	bge.w	8007356 <__ieee754_pow+0x3e>
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80074dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80074e0:	4323      	orrs	r3, r4
 80074e2:	d108      	bne.n	80074f6 <__ieee754_pow+0x1de>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4610      	mov	r0, r2
 80074ea:	4619      	mov	r1, r3
 80074ec:	f7f8 fe98 	bl	8000220 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	e78f      	b.n	8007416 <__ieee754_pow+0xfe>
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f47f af2c 	bne.w	8007356 <__ieee754_pow+0x3e>
 80074fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007502:	4619      	mov	r1, r3
 8007504:	e727      	b.n	8007356 <__ieee754_pow+0x3e>
 8007506:	0feb      	lsrs	r3, r5, #31
 8007508:	3b01      	subs	r3, #1
 800750a:	9306      	str	r3, [sp, #24]
 800750c:	9a06      	ldr	r2, [sp, #24]
 800750e:	9b04      	ldr	r3, [sp, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	d102      	bne.n	800751a <__ieee754_pow+0x202>
 8007514:	4632      	mov	r2, r6
 8007516:	463b      	mov	r3, r7
 8007518:	e7e6      	b.n	80074e8 <__ieee754_pow+0x1d0>
 800751a:	4b19      	ldr	r3, [pc, #100]	; (8007580 <__ieee754_pow+0x268>)
 800751c:	4598      	cmp	r8, r3
 800751e:	f340 80fb 	ble.w	8007718 <__ieee754_pow+0x400>
 8007522:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007526:	4598      	cmp	r8, r3
 8007528:	4b13      	ldr	r3, [pc, #76]	; (8007578 <__ieee754_pow+0x260>)
 800752a:	dd0c      	ble.n	8007546 <__ieee754_pow+0x22e>
 800752c:	429c      	cmp	r4, r3
 800752e:	dc0f      	bgt.n	8007550 <__ieee754_pow+0x238>
 8007530:	f1b9 0f00 	cmp.w	r9, #0
 8007534:	da0f      	bge.n	8007556 <__ieee754_pow+0x23e>
 8007536:	2000      	movs	r0, #0
 8007538:	b009      	add	sp, #36	; 0x24
 800753a:	ecbd 8b06 	vpop	{d8-d10}
 800753e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007542:	f000 bcf0 	b.w	8007f26 <__math_oflow>
 8007546:	429c      	cmp	r4, r3
 8007548:	dbf2      	blt.n	8007530 <__ieee754_pow+0x218>
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <__ieee754_pow+0x25c>)
 800754c:	429c      	cmp	r4, r3
 800754e:	dd19      	ble.n	8007584 <__ieee754_pow+0x26c>
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	dcef      	bgt.n	8007536 <__ieee754_pow+0x21e>
 8007556:	2000      	movs	r0, #0
 8007558:	b009      	add	sp, #36	; 0x24
 800755a:	ecbd 8b06 	vpop	{d8-d10}
 800755e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007562:	f000 bcd7 	b.w	8007f14 <__math_uflow>
 8007566:	bf00      	nop
 8007568:	fff00000 	.word	0xfff00000
 800756c:	7ff00000 	.word	0x7ff00000
 8007570:	433fffff 	.word	0x433fffff
 8007574:	3ff00000 	.word	0x3ff00000
 8007578:	3fefffff 	.word	0x3fefffff
 800757c:	3fe00000 	.word	0x3fe00000
 8007580:	41e00000 	.word	0x41e00000
 8007584:	4b60      	ldr	r3, [pc, #384]	; (8007708 <__ieee754_pow+0x3f0>)
 8007586:	2200      	movs	r2, #0
 8007588:	f7f8 fe4a 	bl	8000220 <__aeabi_dsub>
 800758c:	a354      	add	r3, pc, #336	; (adr r3, 80076e0 <__ieee754_pow+0x3c8>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	4604      	mov	r4, r0
 8007594:	460d      	mov	r5, r1
 8007596:	f7f8 fffb 	bl	8000590 <__aeabi_dmul>
 800759a:	a353      	add	r3, pc, #332	; (adr r3, 80076e8 <__ieee754_pow+0x3d0>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	4606      	mov	r6, r0
 80075a2:	460f      	mov	r7, r1
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f8 fff2 	bl	8000590 <__aeabi_dmul>
 80075ac:	4b57      	ldr	r3, [pc, #348]	; (800770c <__ieee754_pow+0x3f4>)
 80075ae:	4682      	mov	sl, r0
 80075b0:	468b      	mov	fp, r1
 80075b2:	2200      	movs	r2, #0
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f8 ffea 	bl	8000590 <__aeabi_dmul>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	a14b      	add	r1, pc, #300	; (adr r1, 80076f0 <__ieee754_pow+0x3d8>)
 80075c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075c6:	f7f8 fe2b 	bl	8000220 <__aeabi_dsub>
 80075ca:	4622      	mov	r2, r4
 80075cc:	462b      	mov	r3, r5
 80075ce:	f7f8 ffdf 	bl	8000590 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	2000      	movs	r0, #0
 80075d8:	494d      	ldr	r1, [pc, #308]	; (8007710 <__ieee754_pow+0x3f8>)
 80075da:	f7f8 fe21 	bl	8000220 <__aeabi_dsub>
 80075de:	4622      	mov	r2, r4
 80075e0:	4680      	mov	r8, r0
 80075e2:	4689      	mov	r9, r1
 80075e4:	462b      	mov	r3, r5
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f8 ffd1 	bl	8000590 <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	f7f8 ffcb 	bl	8000590 <__aeabi_dmul>
 80075fa:	a33f      	add	r3, pc, #252	; (adr r3, 80076f8 <__ieee754_pow+0x3e0>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f8 ffc6 	bl	8000590 <__aeabi_dmul>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4650      	mov	r0, sl
 800760a:	4659      	mov	r1, fp
 800760c:	f7f8 fe08 	bl	8000220 <__aeabi_dsub>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4680      	mov	r8, r0
 8007616:	4689      	mov	r9, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f8 fe02 	bl	8000224 <__adddf3>
 8007620:	2000      	movs	r0, #0
 8007622:	4632      	mov	r2, r6
 8007624:	463b      	mov	r3, r7
 8007626:	4604      	mov	r4, r0
 8007628:	460d      	mov	r5, r1
 800762a:	f7f8 fdf9 	bl	8000220 <__aeabi_dsub>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4640      	mov	r0, r8
 8007634:	4649      	mov	r1, r9
 8007636:	f7f8 fdf3 	bl	8000220 <__aeabi_dsub>
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	9a06      	ldr	r2, [sp, #24]
 800763e:	3b01      	subs	r3, #1
 8007640:	4313      	orrs	r3, r2
 8007642:	4682      	mov	sl, r0
 8007644:	468b      	mov	fp, r1
 8007646:	f040 81e7 	bne.w	8007a18 <__ieee754_pow+0x700>
 800764a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007700 <__ieee754_pow+0x3e8>
 800764e:	eeb0 8a47 	vmov.f32	s16, s14
 8007652:	eef0 8a67 	vmov.f32	s17, s15
 8007656:	e9dd 6700 	ldrd	r6, r7, [sp]
 800765a:	2600      	movs	r6, #0
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007664:	f7f8 fddc 	bl	8000220 <__aeabi_dsub>
 8007668:	4622      	mov	r2, r4
 800766a:	462b      	mov	r3, r5
 800766c:	f7f8 ff90 	bl	8000590 <__aeabi_dmul>
 8007670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007674:	4680      	mov	r8, r0
 8007676:	4689      	mov	r9, r1
 8007678:	4650      	mov	r0, sl
 800767a:	4659      	mov	r1, fp
 800767c:	f7f8 ff88 	bl	8000590 <__aeabi_dmul>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f8 fdcc 	bl	8000224 <__adddf3>
 800768c:	4632      	mov	r2, r6
 800768e:	463b      	mov	r3, r7
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	f7f8 ff7a 	bl	8000590 <__aeabi_dmul>
 800769c:	460b      	mov	r3, r1
 800769e:	4604      	mov	r4, r0
 80076a0:	460d      	mov	r5, r1
 80076a2:	4602      	mov	r2, r0
 80076a4:	4649      	mov	r1, r9
 80076a6:	4640      	mov	r0, r8
 80076a8:	f7f8 fdbc 	bl	8000224 <__adddf3>
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <__ieee754_pow+0x3fc>)
 80076ae:	4299      	cmp	r1, r3
 80076b0:	ec45 4b19 	vmov	d9, r4, r5
 80076b4:	4606      	mov	r6, r0
 80076b6:	460f      	mov	r7, r1
 80076b8:	468b      	mov	fp, r1
 80076ba:	f340 82f1 	ble.w	8007ca0 <__ieee754_pow+0x988>
 80076be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80076c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80076c6:	4303      	orrs	r3, r0
 80076c8:	f000 81e4 	beq.w	8007a94 <__ieee754_pow+0x77c>
 80076cc:	ec51 0b18 	vmov	r0, r1, d8
 80076d0:	2200      	movs	r2, #0
 80076d2:	2300      	movs	r3, #0
 80076d4:	f7f9 f9ce 	bl	8000a74 <__aeabi_dcmplt>
 80076d8:	3800      	subs	r0, #0
 80076da:	bf18      	it	ne
 80076dc:	2001      	movne	r0, #1
 80076de:	e72b      	b.n	8007538 <__ieee754_pow+0x220>
 80076e0:	60000000 	.word	0x60000000
 80076e4:	3ff71547 	.word	0x3ff71547
 80076e8:	f85ddf44 	.word	0xf85ddf44
 80076ec:	3e54ae0b 	.word	0x3e54ae0b
 80076f0:	55555555 	.word	0x55555555
 80076f4:	3fd55555 	.word	0x3fd55555
 80076f8:	652b82fe 	.word	0x652b82fe
 80076fc:	3ff71547 	.word	0x3ff71547
 8007700:	00000000 	.word	0x00000000
 8007704:	bff00000 	.word	0xbff00000
 8007708:	3ff00000 	.word	0x3ff00000
 800770c:	3fd00000 	.word	0x3fd00000
 8007710:	3fe00000 	.word	0x3fe00000
 8007714:	408fffff 	.word	0x408fffff
 8007718:	4bd5      	ldr	r3, [pc, #852]	; (8007a70 <__ieee754_pow+0x758>)
 800771a:	402b      	ands	r3, r5
 800771c:	2200      	movs	r2, #0
 800771e:	b92b      	cbnz	r3, 800772c <__ieee754_pow+0x414>
 8007720:	4bd4      	ldr	r3, [pc, #848]	; (8007a74 <__ieee754_pow+0x75c>)
 8007722:	f7f8 ff35 	bl	8000590 <__aeabi_dmul>
 8007726:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800772a:	460c      	mov	r4, r1
 800772c:	1523      	asrs	r3, r4, #20
 800772e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007732:	4413      	add	r3, r2
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	4bd0      	ldr	r3, [pc, #832]	; (8007a78 <__ieee754_pow+0x760>)
 8007738:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800773c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007740:	429c      	cmp	r4, r3
 8007742:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007746:	dd08      	ble.n	800775a <__ieee754_pow+0x442>
 8007748:	4bcc      	ldr	r3, [pc, #816]	; (8007a7c <__ieee754_pow+0x764>)
 800774a:	429c      	cmp	r4, r3
 800774c:	f340 8162 	ble.w	8007a14 <__ieee754_pow+0x6fc>
 8007750:	9b05      	ldr	r3, [sp, #20]
 8007752:	3301      	adds	r3, #1
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800775a:	2400      	movs	r4, #0
 800775c:	00e3      	lsls	r3, r4, #3
 800775e:	9307      	str	r3, [sp, #28]
 8007760:	4bc7      	ldr	r3, [pc, #796]	; (8007a80 <__ieee754_pow+0x768>)
 8007762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007766:	ed93 7b00 	vldr	d7, [r3]
 800776a:	4629      	mov	r1, r5
 800776c:	ec53 2b17 	vmov	r2, r3, d7
 8007770:	eeb0 9a47 	vmov.f32	s18, s14
 8007774:	eef0 9a67 	vmov.f32	s19, s15
 8007778:	4682      	mov	sl, r0
 800777a:	f7f8 fd51 	bl	8000220 <__aeabi_dsub>
 800777e:	4652      	mov	r2, sl
 8007780:	4606      	mov	r6, r0
 8007782:	460f      	mov	r7, r1
 8007784:	462b      	mov	r3, r5
 8007786:	ec51 0b19 	vmov	r0, r1, d9
 800778a:	f7f8 fd4b 	bl	8000224 <__adddf3>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	2000      	movs	r0, #0
 8007794:	49bb      	ldr	r1, [pc, #748]	; (8007a84 <__ieee754_pow+0x76c>)
 8007796:	f7f9 f825 	bl	80007e4 <__aeabi_ddiv>
 800779a:	ec41 0b1a 	vmov	d10, r0, r1
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	f7f8 fef3 	bl	8000590 <__aeabi_dmul>
 80077aa:	2300      	movs	r3, #0
 80077ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b0:	9302      	str	r3, [sp, #8]
 80077b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077b6:	46ab      	mov	fp, r5
 80077b8:	106d      	asrs	r5, r5, #1
 80077ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80077be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80077c2:	ec41 0b18 	vmov	d8, r0, r1
 80077c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80077ca:	2200      	movs	r2, #0
 80077cc:	4640      	mov	r0, r8
 80077ce:	4649      	mov	r1, r9
 80077d0:	4614      	mov	r4, r2
 80077d2:	461d      	mov	r5, r3
 80077d4:	f7f8 fedc 	bl	8000590 <__aeabi_dmul>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f8 fd1e 	bl	8000220 <__aeabi_dsub>
 80077e4:	ec53 2b19 	vmov	r2, r3, d9
 80077e8:	4606      	mov	r6, r0
 80077ea:	460f      	mov	r7, r1
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd16 	bl	8000220 <__aeabi_dsub>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4650      	mov	r0, sl
 80077fa:	4659      	mov	r1, fp
 80077fc:	f7f8 fd10 	bl	8000220 <__aeabi_dsub>
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	f7f8 fec4 	bl	8000590 <__aeabi_dmul>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f8 fd06 	bl	8000220 <__aeabi_dsub>
 8007814:	ec53 2b1a 	vmov	r2, r3, d10
 8007818:	f7f8 feba 	bl	8000590 <__aeabi_dmul>
 800781c:	ec53 2b18 	vmov	r2, r3, d8
 8007820:	ec41 0b19 	vmov	d9, r0, r1
 8007824:	ec51 0b18 	vmov	r0, r1, d8
 8007828:	f7f8 feb2 	bl	8000590 <__aeabi_dmul>
 800782c:	a37c      	add	r3, pc, #496	; (adr r3, 8007a20 <__ieee754_pow+0x708>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	4604      	mov	r4, r0
 8007834:	460d      	mov	r5, r1
 8007836:	f7f8 feab 	bl	8000590 <__aeabi_dmul>
 800783a:	a37b      	add	r3, pc, #492	; (adr r3, 8007a28 <__ieee754_pow+0x710>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fcf0 	bl	8000224 <__adddf3>
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	f7f8 fea2 	bl	8000590 <__aeabi_dmul>
 800784c:	a378      	add	r3, pc, #480	; (adr r3, 8007a30 <__ieee754_pow+0x718>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fce7 	bl	8000224 <__adddf3>
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	f7f8 fe99 	bl	8000590 <__aeabi_dmul>
 800785e:	a376      	add	r3, pc, #472	; (adr r3, 8007a38 <__ieee754_pow+0x720>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fcde 	bl	8000224 <__adddf3>
 8007868:	4622      	mov	r2, r4
 800786a:	462b      	mov	r3, r5
 800786c:	f7f8 fe90 	bl	8000590 <__aeabi_dmul>
 8007870:	a373      	add	r3, pc, #460	; (adr r3, 8007a40 <__ieee754_pow+0x728>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fcd5 	bl	8000224 <__adddf3>
 800787a:	4622      	mov	r2, r4
 800787c:	462b      	mov	r3, r5
 800787e:	f7f8 fe87 	bl	8000590 <__aeabi_dmul>
 8007882:	a371      	add	r3, pc, #452	; (adr r3, 8007a48 <__ieee754_pow+0x730>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fccc 	bl	8000224 <__adddf3>
 800788c:	4622      	mov	r2, r4
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	462b      	mov	r3, r5
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fe7a 	bl	8000590 <__aeabi_dmul>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f8 fe74 	bl	8000590 <__aeabi_dmul>
 80078a8:	4642      	mov	r2, r8
 80078aa:	4604      	mov	r4, r0
 80078ac:	460d      	mov	r5, r1
 80078ae:	464b      	mov	r3, r9
 80078b0:	ec51 0b18 	vmov	r0, r1, d8
 80078b4:	f7f8 fcb6 	bl	8000224 <__adddf3>
 80078b8:	ec53 2b19 	vmov	r2, r3, d9
 80078bc:	f7f8 fe68 	bl	8000590 <__aeabi_dmul>
 80078c0:	4622      	mov	r2, r4
 80078c2:	462b      	mov	r3, r5
 80078c4:	f7f8 fcae 	bl	8000224 <__adddf3>
 80078c8:	4642      	mov	r2, r8
 80078ca:	4682      	mov	sl, r0
 80078cc:	468b      	mov	fp, r1
 80078ce:	464b      	mov	r3, r9
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fe5c 	bl	8000590 <__aeabi_dmul>
 80078d8:	4b6b      	ldr	r3, [pc, #428]	; (8007a88 <__ieee754_pow+0x770>)
 80078da:	2200      	movs	r2, #0
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	f7f8 fca0 	bl	8000224 <__adddf3>
 80078e4:	4652      	mov	r2, sl
 80078e6:	465b      	mov	r3, fp
 80078e8:	f7f8 fc9c 	bl	8000224 <__adddf3>
 80078ec:	2000      	movs	r0, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	460d      	mov	r5, r1
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	f7f8 fe49 	bl	8000590 <__aeabi_dmul>
 80078fe:	4b62      	ldr	r3, [pc, #392]	; (8007a88 <__ieee754_pow+0x770>)
 8007900:	4680      	mov	r8, r0
 8007902:	4689      	mov	r9, r1
 8007904:	2200      	movs	r2, #0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fc89 	bl	8000220 <__aeabi_dsub>
 800790e:	4632      	mov	r2, r6
 8007910:	463b      	mov	r3, r7
 8007912:	f7f8 fc85 	bl	8000220 <__aeabi_dsub>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4650      	mov	r0, sl
 800791c:	4659      	mov	r1, fp
 800791e:	f7f8 fc7f 	bl	8000220 <__aeabi_dsub>
 8007922:	ec53 2b18 	vmov	r2, r3, d8
 8007926:	f7f8 fe33 	bl	8000590 <__aeabi_dmul>
 800792a:	4622      	mov	r2, r4
 800792c:	4606      	mov	r6, r0
 800792e:	460f      	mov	r7, r1
 8007930:	462b      	mov	r3, r5
 8007932:	ec51 0b19 	vmov	r0, r1, d9
 8007936:	f7f8 fe2b 	bl	8000590 <__aeabi_dmul>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f8 fc6f 	bl	8000224 <__adddf3>
 8007946:	4606      	mov	r6, r0
 8007948:	460f      	mov	r7, r1
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4640      	mov	r0, r8
 8007950:	4649      	mov	r1, r9
 8007952:	f7f8 fc67 	bl	8000224 <__adddf3>
 8007956:	a33e      	add	r3, pc, #248	; (adr r3, 8007a50 <__ieee754_pow+0x738>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	2000      	movs	r0, #0
 800795e:	4604      	mov	r4, r0
 8007960:	460d      	mov	r5, r1
 8007962:	f7f8 fe15 	bl	8000590 <__aeabi_dmul>
 8007966:	4642      	mov	r2, r8
 8007968:	ec41 0b18 	vmov	d8, r0, r1
 800796c:	464b      	mov	r3, r9
 800796e:	4620      	mov	r0, r4
 8007970:	4629      	mov	r1, r5
 8007972:	f7f8 fc55 	bl	8000220 <__aeabi_dsub>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	f7f8 fc4f 	bl	8000220 <__aeabi_dsub>
 8007982:	a335      	add	r3, pc, #212	; (adr r3, 8007a58 <__ieee754_pow+0x740>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fe02 	bl	8000590 <__aeabi_dmul>
 800798c:	a334      	add	r3, pc, #208	; (adr r3, 8007a60 <__ieee754_pow+0x748>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	4606      	mov	r6, r0
 8007994:	460f      	mov	r7, r1
 8007996:	4620      	mov	r0, r4
 8007998:	4629      	mov	r1, r5
 800799a:	f7f8 fdf9 	bl	8000590 <__aeabi_dmul>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4630      	mov	r0, r6
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f8 fc3d 	bl	8000224 <__adddf3>
 80079aa:	9a07      	ldr	r2, [sp, #28]
 80079ac:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <__ieee754_pow+0x774>)
 80079ae:	4413      	add	r3, r2
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc36 	bl	8000224 <__adddf3>
 80079b8:	4682      	mov	sl, r0
 80079ba:	9805      	ldr	r0, [sp, #20]
 80079bc:	468b      	mov	fp, r1
 80079be:	f7f8 fd7d 	bl	80004bc <__aeabi_i2d>
 80079c2:	9a07      	ldr	r2, [sp, #28]
 80079c4:	4b32      	ldr	r3, [pc, #200]	; (8007a90 <__ieee754_pow+0x778>)
 80079c6:	4413      	add	r3, r2
 80079c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079cc:	4606      	mov	r6, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	ec51 0b18 	vmov	r0, r1, d8
 80079d8:	f7f8 fc24 	bl	8000224 <__adddf3>
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	f7f8 fc20 	bl	8000224 <__adddf3>
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	f7f8 fc1c 	bl	8000224 <__adddf3>
 80079ec:	2000      	movs	r0, #0
 80079ee:	4632      	mov	r2, r6
 80079f0:	463b      	mov	r3, r7
 80079f2:	4604      	mov	r4, r0
 80079f4:	460d      	mov	r5, r1
 80079f6:	f7f8 fc13 	bl	8000220 <__aeabi_dsub>
 80079fa:	4642      	mov	r2, r8
 80079fc:	464b      	mov	r3, r9
 80079fe:	f7f8 fc0f 	bl	8000220 <__aeabi_dsub>
 8007a02:	ec53 2b18 	vmov	r2, r3, d8
 8007a06:	f7f8 fc0b 	bl	8000220 <__aeabi_dsub>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4659      	mov	r1, fp
 8007a12:	e610      	b.n	8007636 <__ieee754_pow+0x31e>
 8007a14:	2401      	movs	r4, #1
 8007a16:	e6a1      	b.n	800775c <__ieee754_pow+0x444>
 8007a18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007a68 <__ieee754_pow+0x750>
 8007a1c:	e617      	b.n	800764e <__ieee754_pow+0x336>
 8007a1e:	bf00      	nop
 8007a20:	4a454eef 	.word	0x4a454eef
 8007a24:	3fca7e28 	.word	0x3fca7e28
 8007a28:	93c9db65 	.word	0x93c9db65
 8007a2c:	3fcd864a 	.word	0x3fcd864a
 8007a30:	a91d4101 	.word	0xa91d4101
 8007a34:	3fd17460 	.word	0x3fd17460
 8007a38:	518f264d 	.word	0x518f264d
 8007a3c:	3fd55555 	.word	0x3fd55555
 8007a40:	db6fabff 	.word	0xdb6fabff
 8007a44:	3fdb6db6 	.word	0x3fdb6db6
 8007a48:	33333303 	.word	0x33333303
 8007a4c:	3fe33333 	.word	0x3fe33333
 8007a50:	e0000000 	.word	0xe0000000
 8007a54:	3feec709 	.word	0x3feec709
 8007a58:	dc3a03fd 	.word	0xdc3a03fd
 8007a5c:	3feec709 	.word	0x3feec709
 8007a60:	145b01f5 	.word	0x145b01f5
 8007a64:	be3e2fe0 	.word	0xbe3e2fe0
 8007a68:	00000000 	.word	0x00000000
 8007a6c:	3ff00000 	.word	0x3ff00000
 8007a70:	7ff00000 	.word	0x7ff00000
 8007a74:	43400000 	.word	0x43400000
 8007a78:	0003988e 	.word	0x0003988e
 8007a7c:	000bb679 	.word	0x000bb679
 8007a80:	08017c30 	.word	0x08017c30
 8007a84:	3ff00000 	.word	0x3ff00000
 8007a88:	40080000 	.word	0x40080000
 8007a8c:	08017c50 	.word	0x08017c50
 8007a90:	08017c40 	.word	0x08017c40
 8007a94:	a3b5      	add	r3, pc, #724	; (adr r3, 8007d6c <__ieee754_pow+0xa54>)
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fbc1 	bl	8000224 <__adddf3>
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	ec41 0b1a 	vmov	d10, r0, r1
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 fbb7 	bl	8000220 <__aeabi_dsub>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	ec51 0b1a 	vmov	r0, r1, d10
 8007aba:	f7f8 fff9 	bl	8000ab0 <__aeabi_dcmpgt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f47f ae04 	bne.w	80076cc <__ieee754_pow+0x3b4>
 8007ac4:	4aa4      	ldr	r2, [pc, #656]	; (8007d58 <__ieee754_pow+0xa40>)
 8007ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007aca:	4293      	cmp	r3, r2
 8007acc:	f340 8108 	ble.w	8007ce0 <__ieee754_pow+0x9c8>
 8007ad0:	151b      	asrs	r3, r3, #20
 8007ad2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007ad6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ada:	fa4a f303 	asr.w	r3, sl, r3
 8007ade:	445b      	add	r3, fp
 8007ae0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007ae4:	4e9d      	ldr	r6, [pc, #628]	; (8007d5c <__ieee754_pow+0xa44>)
 8007ae6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007aea:	4116      	asrs	r6, r2
 8007aec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007af0:	2000      	movs	r0, #0
 8007af2:	ea23 0106 	bic.w	r1, r3, r6
 8007af6:	f1c2 0214 	rsb	r2, r2, #20
 8007afa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007afe:	fa4a fa02 	asr.w	sl, sl, r2
 8007b02:	f1bb 0f00 	cmp.w	fp, #0
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	bfb8      	it	lt
 8007b10:	f1ca 0a00 	rsblt	sl, sl, #0
 8007b14:	f7f8 fb84 	bl	8000220 <__aeabi_dsub>
 8007b18:	ec41 0b19 	vmov	d9, r0, r1
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	ec51 0b19 	vmov	r0, r1, d9
 8007b24:	f7f8 fb7e 	bl	8000224 <__adddf3>
 8007b28:	a37b      	add	r3, pc, #492	; (adr r3, 8007d18 <__ieee754_pow+0xa00>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	2000      	movs	r0, #0
 8007b30:	4604      	mov	r4, r0
 8007b32:	460d      	mov	r5, r1
 8007b34:	f7f8 fd2c 	bl	8000590 <__aeabi_dmul>
 8007b38:	ec53 2b19 	vmov	r2, r3, d9
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	4620      	mov	r0, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	f7f8 fb6c 	bl	8000220 <__aeabi_dsub>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	4649      	mov	r1, r9
 8007b50:	f7f8 fb66 	bl	8000220 <__aeabi_dsub>
 8007b54:	a372      	add	r3, pc, #456	; (adr r3, 8007d20 <__ieee754_pow+0xa08>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fd19 	bl	8000590 <__aeabi_dmul>
 8007b5e:	a372      	add	r3, pc, #456	; (adr r3, 8007d28 <__ieee754_pow+0xa10>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	4680      	mov	r8, r0
 8007b66:	4689      	mov	r9, r1
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7f8 fd10 	bl	8000590 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	f7f8 fb54 	bl	8000224 <__adddf3>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4630      	mov	r0, r6
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 fb4c 	bl	8000224 <__adddf3>
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	463b      	mov	r3, r7
 8007b90:	4680      	mov	r8, r0
 8007b92:	4689      	mov	r9, r1
 8007b94:	f7f8 fb44 	bl	8000220 <__aeabi_dsub>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 fb3e 	bl	8000220 <__aeabi_dsub>
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	464b      	mov	r3, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	f7f8 fcee 	bl	8000590 <__aeabi_dmul>
 8007bb4:	a35e      	add	r3, pc, #376	; (adr r3, 8007d30 <__ieee754_pow+0xa18>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	4604      	mov	r4, r0
 8007bbc:	460d      	mov	r5, r1
 8007bbe:	f7f8 fce7 	bl	8000590 <__aeabi_dmul>
 8007bc2:	a35d      	add	r3, pc, #372	; (adr r3, 8007d38 <__ieee754_pow+0xa20>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fb2a 	bl	8000220 <__aeabi_dsub>
 8007bcc:	4622      	mov	r2, r4
 8007bce:	462b      	mov	r3, r5
 8007bd0:	f7f8 fcde 	bl	8000590 <__aeabi_dmul>
 8007bd4:	a35a      	add	r3, pc, #360	; (adr r3, 8007d40 <__ieee754_pow+0xa28>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 fb23 	bl	8000224 <__adddf3>
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	f7f8 fcd5 	bl	8000590 <__aeabi_dmul>
 8007be6:	a358      	add	r3, pc, #352	; (adr r3, 8007d48 <__ieee754_pow+0xa30>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fb18 	bl	8000220 <__aeabi_dsub>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	f7f8 fccc 	bl	8000590 <__aeabi_dmul>
 8007bf8:	a355      	add	r3, pc, #340	; (adr r3, 8007d50 <__ieee754_pow+0xa38>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fb11 	bl	8000224 <__adddf3>
 8007c02:	4622      	mov	r2, r4
 8007c04:	462b      	mov	r3, r5
 8007c06:	f7f8 fcc3 	bl	8000590 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 fb05 	bl	8000220 <__aeabi_dsub>
 8007c16:	4604      	mov	r4, r0
 8007c18:	460d      	mov	r5, r1
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4640      	mov	r0, r8
 8007c20:	4649      	mov	r1, r9
 8007c22:	f7f8 fcb5 	bl	8000590 <__aeabi_dmul>
 8007c26:	2200      	movs	r2, #0
 8007c28:	ec41 0b19 	vmov	d9, r0, r1
 8007c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 faf4 	bl	8000220 <__aeabi_dsub>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	ec51 0b19 	vmov	r0, r1, d9
 8007c40:	f7f8 fdd0 	bl	80007e4 <__aeabi_ddiv>
 8007c44:	4632      	mov	r2, r6
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 fc9e 	bl	8000590 <__aeabi_dmul>
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	f7f8 fae4 	bl	8000224 <__adddf3>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4620      	mov	r0, r4
 8007c62:	4629      	mov	r1, r5
 8007c64:	f7f8 fadc 	bl	8000220 <__aeabi_dsub>
 8007c68:	4642      	mov	r2, r8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	f7f8 fad8 	bl	8000220 <__aeabi_dsub>
 8007c70:	460b      	mov	r3, r1
 8007c72:	4602      	mov	r2, r0
 8007c74:	493a      	ldr	r1, [pc, #232]	; (8007d60 <__ieee754_pow+0xa48>)
 8007c76:	2000      	movs	r0, #0
 8007c78:	f7f8 fad2 	bl	8000220 <__aeabi_dsub>
 8007c7c:	ec41 0b10 	vmov	d0, r0, r1
 8007c80:	ee10 3a90 	vmov	r3, s1
 8007c84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c8c:	da2b      	bge.n	8007ce6 <__ieee754_pow+0x9ce>
 8007c8e:	4650      	mov	r0, sl
 8007c90:	f000 f966 	bl	8007f60 <scalbn>
 8007c94:	ec51 0b10 	vmov	r0, r1, d0
 8007c98:	ec53 2b18 	vmov	r2, r3, d8
 8007c9c:	f7ff bbed 	b.w	800747a <__ieee754_pow+0x162>
 8007ca0:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <__ieee754_pow+0xa4c>)
 8007ca2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007ca6:	429e      	cmp	r6, r3
 8007ca8:	f77f af0c 	ble.w	8007ac4 <__ieee754_pow+0x7ac>
 8007cac:	4b2e      	ldr	r3, [pc, #184]	; (8007d68 <__ieee754_pow+0xa50>)
 8007cae:	440b      	add	r3, r1
 8007cb0:	4303      	orrs	r3, r0
 8007cb2:	d009      	beq.n	8007cc8 <__ieee754_pow+0x9b0>
 8007cb4:	ec51 0b18 	vmov	r0, r1, d8
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f7f8 feda 	bl	8000a74 <__aeabi_dcmplt>
 8007cc0:	3800      	subs	r0, #0
 8007cc2:	bf18      	it	ne
 8007cc4:	2001      	movne	r0, #1
 8007cc6:	e447      	b.n	8007558 <__ieee754_pow+0x240>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	462b      	mov	r3, r5
 8007ccc:	f7f8 faa8 	bl	8000220 <__aeabi_dsub>
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	464b      	mov	r3, r9
 8007cd4:	f7f8 fee2 	bl	8000a9c <__aeabi_dcmpge>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f43f aef3 	beq.w	8007ac4 <__ieee754_pow+0x7ac>
 8007cde:	e7e9      	b.n	8007cb4 <__ieee754_pow+0x99c>
 8007ce0:	f04f 0a00 	mov.w	sl, #0
 8007ce4:	e71a      	b.n	8007b1c <__ieee754_pow+0x804>
 8007ce6:	ec51 0b10 	vmov	r0, r1, d0
 8007cea:	4619      	mov	r1, r3
 8007cec:	e7d4      	b.n	8007c98 <__ieee754_pow+0x980>
 8007cee:	491c      	ldr	r1, [pc, #112]	; (8007d60 <__ieee754_pow+0xa48>)
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f7ff bb30 	b.w	8007356 <__ieee754_pow+0x3e>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f7ff bb2c 	b.w	8007356 <__ieee754_pow+0x3e>
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7ff bb28 	b.w	8007356 <__ieee754_pow+0x3e>
 8007d06:	9204      	str	r2, [sp, #16]
 8007d08:	f7ff bb7a 	b.w	8007400 <__ieee754_pow+0xe8>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f7ff bb64 	b.w	80073da <__ieee754_pow+0xc2>
 8007d12:	bf00      	nop
 8007d14:	f3af 8000 	nop.w
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	3fe62e43 	.word	0x3fe62e43
 8007d20:	fefa39ef 	.word	0xfefa39ef
 8007d24:	3fe62e42 	.word	0x3fe62e42
 8007d28:	0ca86c39 	.word	0x0ca86c39
 8007d2c:	be205c61 	.word	0xbe205c61
 8007d30:	72bea4d0 	.word	0x72bea4d0
 8007d34:	3e663769 	.word	0x3e663769
 8007d38:	c5d26bf1 	.word	0xc5d26bf1
 8007d3c:	3ebbbd41 	.word	0x3ebbbd41
 8007d40:	af25de2c 	.word	0xaf25de2c
 8007d44:	3f11566a 	.word	0x3f11566a
 8007d48:	16bebd93 	.word	0x16bebd93
 8007d4c:	3f66c16c 	.word	0x3f66c16c
 8007d50:	5555553e 	.word	0x5555553e
 8007d54:	3fc55555 	.word	0x3fc55555
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	000fffff 	.word	0x000fffff
 8007d60:	3ff00000 	.word	0x3ff00000
 8007d64:	4090cbff 	.word	0x4090cbff
 8007d68:	3f6f3400 	.word	0x3f6f3400
 8007d6c:	652b82fe 	.word	0x652b82fe
 8007d70:	3c971547 	.word	0x3c971547

08007d74 <__ieee754_sqrt>:
 8007d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	ec55 4b10 	vmov	r4, r5, d0
 8007d7c:	4e55      	ldr	r6, [pc, #340]	; (8007ed4 <__ieee754_sqrt+0x160>)
 8007d7e:	43ae      	bics	r6, r5
 8007d80:	ee10 0a10 	vmov	r0, s0
 8007d84:	ee10 3a10 	vmov	r3, s0
 8007d88:	462a      	mov	r2, r5
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	d110      	bne.n	8007db0 <__ieee754_sqrt+0x3c>
 8007d8e:	ee10 2a10 	vmov	r2, s0
 8007d92:	462b      	mov	r3, r5
 8007d94:	f7f8 fbfc 	bl	8000590 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f7f8 fa40 	bl	8000224 <__adddf3>
 8007da4:	4604      	mov	r4, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	ec45 4b10 	vmov	d0, r4, r5
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	dc10      	bgt.n	8007dd6 <__ieee754_sqrt+0x62>
 8007db4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007db8:	4330      	orrs	r0, r6
 8007dba:	d0f5      	beq.n	8007da8 <__ieee754_sqrt+0x34>
 8007dbc:	b15d      	cbz	r5, 8007dd6 <__ieee754_sqrt+0x62>
 8007dbe:	ee10 2a10 	vmov	r2, s0
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	ee10 0a10 	vmov	r0, s0
 8007dc8:	f7f8 fa2a 	bl	8000220 <__aeabi_dsub>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	f7f8 fd08 	bl	80007e4 <__aeabi_ddiv>
 8007dd4:	e7e6      	b.n	8007da4 <__ieee754_sqrt+0x30>
 8007dd6:	1512      	asrs	r2, r2, #20
 8007dd8:	d074      	beq.n	8007ec4 <__ieee754_sqrt+0x150>
 8007dda:	07d4      	lsls	r4, r2, #31
 8007ddc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007de0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007de8:	bf5e      	ittt	pl
 8007dea:	0fda      	lsrpl	r2, r3, #31
 8007dec:	005b      	lslpl	r3, r3, #1
 8007dee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007df2:	2400      	movs	r4, #0
 8007df4:	0fda      	lsrs	r2, r3, #31
 8007df6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007dfa:	107f      	asrs	r7, r7, #1
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	2516      	movs	r5, #22
 8007e00:	4620      	mov	r0, r4
 8007e02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007e06:	1886      	adds	r6, r0, r2
 8007e08:	428e      	cmp	r6, r1
 8007e0a:	bfde      	ittt	le
 8007e0c:	1b89      	suble	r1, r1, r6
 8007e0e:	18b0      	addle	r0, r6, r2
 8007e10:	18a4      	addle	r4, r4, r2
 8007e12:	0049      	lsls	r1, r1, #1
 8007e14:	3d01      	subs	r5, #1
 8007e16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007e1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007e1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e22:	d1f0      	bne.n	8007e06 <__ieee754_sqrt+0x92>
 8007e24:	462a      	mov	r2, r5
 8007e26:	f04f 0e20 	mov.w	lr, #32
 8007e2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007e2e:	4281      	cmp	r1, r0
 8007e30:	eb06 0c05 	add.w	ip, r6, r5
 8007e34:	dc02      	bgt.n	8007e3c <__ieee754_sqrt+0xc8>
 8007e36:	d113      	bne.n	8007e60 <__ieee754_sqrt+0xec>
 8007e38:	459c      	cmp	ip, r3
 8007e3a:	d811      	bhi.n	8007e60 <__ieee754_sqrt+0xec>
 8007e3c:	f1bc 0f00 	cmp.w	ip, #0
 8007e40:	eb0c 0506 	add.w	r5, ip, r6
 8007e44:	da43      	bge.n	8007ece <__ieee754_sqrt+0x15a>
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	db41      	blt.n	8007ece <__ieee754_sqrt+0x15a>
 8007e4a:	f100 0801 	add.w	r8, r0, #1
 8007e4e:	1a09      	subs	r1, r1, r0
 8007e50:	459c      	cmp	ip, r3
 8007e52:	bf88      	it	hi
 8007e54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007e58:	eba3 030c 	sub.w	r3, r3, ip
 8007e5c:	4432      	add	r2, r6
 8007e5e:	4640      	mov	r0, r8
 8007e60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007e64:	f1be 0e01 	subs.w	lr, lr, #1
 8007e68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007e6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e74:	d1db      	bne.n	8007e2e <__ieee754_sqrt+0xba>
 8007e76:	430b      	orrs	r3, r1
 8007e78:	d006      	beq.n	8007e88 <__ieee754_sqrt+0x114>
 8007e7a:	1c50      	adds	r0, r2, #1
 8007e7c:	bf13      	iteet	ne
 8007e7e:	3201      	addne	r2, #1
 8007e80:	3401      	addeq	r4, #1
 8007e82:	4672      	moveq	r2, lr
 8007e84:	f022 0201 	bicne.w	r2, r2, #1
 8007e88:	1063      	asrs	r3, r4, #1
 8007e8a:	0852      	lsrs	r2, r2, #1
 8007e8c:	07e1      	lsls	r1, r4, #31
 8007e8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e96:	bf48      	it	mi
 8007e98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007e9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	e781      	b.n	8007da8 <__ieee754_sqrt+0x34>
 8007ea4:	0ad9      	lsrs	r1, r3, #11
 8007ea6:	3815      	subs	r0, #21
 8007ea8:	055b      	lsls	r3, r3, #21
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d0fa      	beq.n	8007ea4 <__ieee754_sqrt+0x130>
 8007eae:	02cd      	lsls	r5, r1, #11
 8007eb0:	d50a      	bpl.n	8007ec8 <__ieee754_sqrt+0x154>
 8007eb2:	f1c2 0420 	rsb	r4, r2, #32
 8007eb6:	fa23 f404 	lsr.w	r4, r3, r4
 8007eba:	1e55      	subs	r5, r2, #1
 8007ebc:	4093      	lsls	r3, r2
 8007ebe:	4321      	orrs	r1, r4
 8007ec0:	1b42      	subs	r2, r0, r5
 8007ec2:	e78a      	b.n	8007dda <__ieee754_sqrt+0x66>
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	e7f0      	b.n	8007eaa <__ieee754_sqrt+0x136>
 8007ec8:	0049      	lsls	r1, r1, #1
 8007eca:	3201      	adds	r2, #1
 8007ecc:	e7ef      	b.n	8007eae <__ieee754_sqrt+0x13a>
 8007ece:	4680      	mov	r8, r0
 8007ed0:	e7bd      	b.n	8007e4e <__ieee754_sqrt+0xda>
 8007ed2:	bf00      	nop
 8007ed4:	7ff00000 	.word	0x7ff00000

08007ed8 <with_errno>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	460d      	mov	r5, r1
 8007ede:	4616      	mov	r6, r2
 8007ee0:	f7ff f976 	bl	80071d0 <__errno>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	6006      	str	r6, [r0, #0]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	bd70      	pop	{r4, r5, r6, pc}

08007eec <xflow>:
 8007eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eee:	4614      	mov	r4, r2
 8007ef0:	461d      	mov	r5, r3
 8007ef2:	b108      	cbz	r0, 8007ef8 <xflow+0xc>
 8007ef4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ef8:	e9cd 2300 	strd	r2, r3, [sp]
 8007efc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 fb44 	bl	8000590 <__aeabi_dmul>
 8007f08:	2222      	movs	r2, #34	; 0x22
 8007f0a:	b003      	add	sp, #12
 8007f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f10:	f7ff bfe2 	b.w	8007ed8 <with_errno>

08007f14 <__math_uflow>:
 8007f14:	b508      	push	{r3, lr}
 8007f16:	2200      	movs	r2, #0
 8007f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f1c:	f7ff ffe6 	bl	8007eec <xflow>
 8007f20:	ec41 0b10 	vmov	d0, r0, r1
 8007f24:	bd08      	pop	{r3, pc}

08007f26 <__math_oflow>:
 8007f26:	b508      	push	{r3, lr}
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007f2e:	f7ff ffdd 	bl	8007eec <xflow>
 8007f32:	ec41 0b10 	vmov	d0, r0, r1
 8007f36:	bd08      	pop	{r3, pc}

08007f38 <fabs>:
 8007f38:	ec51 0b10 	vmov	r0, r1, d0
 8007f3c:	ee10 2a10 	vmov	r2, s0
 8007f40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f44:	ec43 2b10 	vmov	d0, r2, r3
 8007f48:	4770      	bx	lr

08007f4a <finite>:
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	ed8d 0b00 	vstr	d0, [sp]
 8007f50:	9801      	ldr	r0, [sp, #4]
 8007f52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007f56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007f5a:	0fc0      	lsrs	r0, r0, #31
 8007f5c:	b002      	add	sp, #8
 8007f5e:	4770      	bx	lr

08007f60 <scalbn>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	ec55 4b10 	vmov	r4, r5, d0
 8007f66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	b99a      	cbnz	r2, 8007f98 <scalbn+0x38>
 8007f70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f74:	4323      	orrs	r3, r4
 8007f76:	d036      	beq.n	8007fe6 <scalbn+0x86>
 8007f78:	4b39      	ldr	r3, [pc, #228]	; (8008060 <scalbn+0x100>)
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	ee10 0a10 	vmov	r0, s0
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 fb05 	bl	8000590 <__aeabi_dmul>
 8007f86:	4b37      	ldr	r3, [pc, #220]	; (8008064 <scalbn+0x104>)
 8007f88:	429e      	cmp	r6, r3
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	da10      	bge.n	8007fb2 <scalbn+0x52>
 8007f90:	a32b      	add	r3, pc, #172	; (adr r3, 8008040 <scalbn+0xe0>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	e03a      	b.n	800800e <scalbn+0xae>
 8007f98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007f9c:	428a      	cmp	r2, r1
 8007f9e:	d10c      	bne.n	8007fba <scalbn+0x5a>
 8007fa0:	ee10 2a10 	vmov	r2, s0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f7f8 f93c 	bl	8000224 <__adddf3>
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	e019      	b.n	8007fe6 <scalbn+0x86>
 8007fb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	3a36      	subs	r2, #54	; 0x36
 8007fba:	4432      	add	r2, r6
 8007fbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007fc0:	428a      	cmp	r2, r1
 8007fc2:	dd08      	ble.n	8007fd6 <scalbn+0x76>
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	a120      	add	r1, pc, #128	; (adr r1, 8008048 <scalbn+0xe8>)
 8007fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fcc:	da1c      	bge.n	8008008 <scalbn+0xa8>
 8007fce:	a120      	add	r1, pc, #128	; (adr r1, 8008050 <scalbn+0xf0>)
 8007fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fd4:	e018      	b.n	8008008 <scalbn+0xa8>
 8007fd6:	2a00      	cmp	r2, #0
 8007fd8:	dd08      	ble.n	8007fec <scalbn+0x8c>
 8007fda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007fde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007fe6:	ec45 4b10 	vmov	d0, r4, r5
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007ff0:	da19      	bge.n	8008026 <scalbn+0xc6>
 8007ff2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ff6:	429e      	cmp	r6, r3
 8007ff8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007ffc:	dd0a      	ble.n	8008014 <scalbn+0xb4>
 8007ffe:	a112      	add	r1, pc, #72	; (adr r1, 8008048 <scalbn+0xe8>)
 8008000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e2      	bne.n	8007fce <scalbn+0x6e>
 8008008:	a30f      	add	r3, pc, #60	; (adr r3, 8008048 <scalbn+0xe8>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 fabf 	bl	8000590 <__aeabi_dmul>
 8008012:	e7cb      	b.n	8007fac <scalbn+0x4c>
 8008014:	a10a      	add	r1, pc, #40	; (adr r1, 8008040 <scalbn+0xe0>)
 8008016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0b8      	beq.n	8007f90 <scalbn+0x30>
 800801e:	a10e      	add	r1, pc, #56	; (adr r1, 8008058 <scalbn+0xf8>)
 8008020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008024:	e7b4      	b.n	8007f90 <scalbn+0x30>
 8008026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800802a:	3236      	adds	r2, #54	; 0x36
 800802c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008030:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008034:	4620      	mov	r0, r4
 8008036:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <scalbn+0x108>)
 8008038:	2200      	movs	r2, #0
 800803a:	e7e8      	b.n	800800e <scalbn+0xae>
 800803c:	f3af 8000 	nop.w
 8008040:	c2f8f359 	.word	0xc2f8f359
 8008044:	01a56e1f 	.word	0x01a56e1f
 8008048:	8800759c 	.word	0x8800759c
 800804c:	7e37e43c 	.word	0x7e37e43c
 8008050:	8800759c 	.word	0x8800759c
 8008054:	fe37e43c 	.word	0xfe37e43c
 8008058:	c2f8f359 	.word	0xc2f8f359
 800805c:	81a56e1f 	.word	0x81a56e1f
 8008060:	43500000 	.word	0x43500000
 8008064:	ffff3cb0 	.word	0xffff3cb0
 8008068:	3c900000 	.word	0x3c900000

0800806c <_init>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	bf00      	nop
 8008070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008072:	bc08      	pop	{r3}
 8008074:	469e      	mov	lr, r3
 8008076:	4770      	bx	lr

08008078 <_fini>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	bf00      	nop
 800807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807e:	bc08      	pop	{r3}
 8008080:	469e      	mov	lr, r3
 8008082:	4770      	bx	lr
