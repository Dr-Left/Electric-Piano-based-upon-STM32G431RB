
TestPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b94  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fbd8  08007d70  08007d70  00017d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017948  08017948  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08017948  08017948  00027948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017950  08017950  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017950  08017950  00027950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017954  08017954  00027954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08017958  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000078  080179d0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080179d0  00030274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136cd  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002435  00000000  00000000  00043775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00045bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00046c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e007  00000000  00000000  00047c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ce  00000000  00000000  00065c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5a2c  00000000  00000000  000795ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  0013f06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d54 	.word	0x08007d54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08007d54 	.word	0x08007d54

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <setPWM>:
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */

void setPWM(double freq, int duty_percent)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e92:	6078      	str	r0, [r7, #4]
	if (freq == 0) {
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ea0:	f7ff fdde 	bl	8000a60 <__aeabi_dcmpeq>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <setPWM+0x2a>
		TIM3->CCR1 = 0;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <setPWM+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 8000eb0:	e03b      	b.n	8000f2a <setPWM+0xa2>
	}
	TIM3->ARR = 100000.0 / freq - 1;
 8000eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000eb6:	a11e      	add	r1, pc, #120	; (adr r1, 8000f30 <setPWM+0xa8>)
 8000eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ebc:	f7ff fc92 	bl	80007e4 <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <setPWM+0xb4>)
 8000ece:	f7ff f9a7 	bl	8000220 <__aeabi_dsub>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4c18      	ldr	r4, [pc, #96]	; (8000f38 <setPWM+0xb0>)
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fe30 	bl	8000b40 <__aeabi_d2uiz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->CCR1 = (double)duty_percent * (TIM3->ARR + 1) / 100.0;
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fae9 	bl	80004bc <__aeabi_i2d>
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <setPWM+0xb0>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fad1 	bl	800049c <__aeabi_ui2d>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff fb45 	bl	8000590 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <setPWM+0xb8>)
 8000f14:	f7ff fc66 	bl	80007e4 <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4c06      	ldr	r4, [pc, #24]	; (8000f38 <setPWM+0xb0>)
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fe0d 	bl	8000b40 <__aeabi_d2uiz>
 8000f26:	4603      	mov	r3, r0
 8000f28:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40f86a00 	.word	0x40f86a00
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	3ff00000 	.word	0x3ff00000
 8000f40:	40590000 	.word	0x40590000
 8000f44:	00000000 	.word	0x00000000

08000f48 <note_to_frequency>:

double note_to_frequency(int note)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	return 440.0 * pow(2, (note - 69)/12.0);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b45      	subs	r3, #69	; 0x45
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fab1 	bl	80004bc <__aeabi_i2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <note_to_frequency+0x60>)
 8000f60:	f7ff fc40 	bl	80007e4 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	ec43 2b17 	vmov	d7, r2, r3
 8000f6c:	eeb0 1a47 	vmov.f32	s2, s14
 8000f70:	eef0 1a67 	vmov.f32	s3, s15
 8000f74:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000fa0 <note_to_frequency+0x58>
 8000f78:	f005 ffd2 	bl	8006f20 <pow>
 8000f7c:	ec51 0b10 	vmov	r0, r1, d0
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <note_to_frequency+0x64>)
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f92:	eeb0 0a47 	vmov.f32	s0, s14
 8000f96:	eef0 0a67 	vmov.f32	s1, s15
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40000000 	.word	0x40000000
 8000fa8:	40280000 	.word	0x40280000
 8000fac:	407b8000 	.word	0x407b8000

08000fb0 <produce_sound>:

void produce_sound(int note, int lasting_millisecond)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	if (output_device == OUTPUT_BUZZER) {
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <produce_sound+0x100>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d123      	bne.n	800100a <produce_sound+0x5a>
		if (note == 0) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <produce_sound+0x2c>
			setPWM(0, 100);
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	ed9f 0b37 	vldr	d0, [pc, #220]	; 80010a8 <produce_sound+0xf8>
 8000fce:	f7ff ff5b 	bl	8000e88 <setPWM>
			HAL_Delay(lasting_millisecond);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f8c5 	bl	8002164 <HAL_Delay>
			return ;
 8000fda:	e060      	b.n	800109e <produce_sound+0xee>
		}
		double freq = note_to_frequency(note);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffb3 	bl	8000f48 <note_to_frequency>
 8000fe2:	ed87 0b04 	vstr	d0, [r7, #16]
		setPWM(freq, DEFAULT_DUTY);
 8000fe6:	205f      	movs	r0, #95	; 0x5f
 8000fe8:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fec:	f7ff ff4c 	bl	8000e88 <setPWM>
		HAL_Delay(lasting_millisecond);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f8b6 	bl	8002164 <HAL_Delay>
		setPWM(0, 100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 80010a8 <produce_sound+0xf8>
 8000ffe:	f7ff ff43 	bl	8000e88 <setPWM>
		HAL_Delay(50);
 8001002:	2032      	movs	r0, #50	; 0x32
 8001004:	f001 f8ae 	bl	8002164 <HAL_Delay>
 8001008:	e049      	b.n	800109e <produce_sound+0xee>
	}
	else {
		// send MIDI
		if (note == 0) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <produce_sound+0x6a>
			HAL_Delay(lasting_millisecond);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f8a6 	bl	8002164 <HAL_Delay>
 8001018:	e041      	b.n	800109e <produce_sound+0xee>
			return ;
		}
		unsigned char operation;
		unsigned char sound;
		unsigned char force;
		operation = 0x90;
 800101a:	2390      	movs	r3, #144	; 0x90
 800101c:	73fb      	strb	r3, [r7, #15]
		sound = note;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73bb      	strb	r3, [r7, #14]
		force = 0x7F;
 8001024:	237f      	movs	r3, #127	; 0x7f
 8001026:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&hlpuart1, &operation, 1, 0xffff);
 8001028:	f107 010f 	add.w	r1, r7, #15
 800102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001030:	2201      	movs	r2, #1
 8001032:	4820      	ldr	r0, [pc, #128]	; (80010b4 <produce_sound+0x104>)
 8001034:	f003 ff4c 	bl	8004ed0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &sound, 1, 0xffff);
 8001038:	f107 010e 	add.w	r1, r7, #14
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	2201      	movs	r2, #1
 8001042:	481c      	ldr	r0, [pc, #112]	; (80010b4 <produce_sound+0x104>)
 8001044:	f003 ff44 	bl	8004ed0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &force, 1, 0xffff);
 8001048:	f107 010d 	add.w	r1, r7, #13
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	2201      	movs	r2, #1
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <produce_sound+0x104>)
 8001054:	f003 ff3c 	bl	8004ed0 <HAL_UART_Transmit>
		HAL_Delay(lasting_millisecond);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 f882 	bl	8002164 <HAL_Delay>
		operation = 0x80;
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	73fb      	strb	r3, [r7, #15]
		force = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&hlpuart1, &operation, 1, 0xffff);
 8001068:	f107 010f 	add.w	r1, r7, #15
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	2201      	movs	r2, #1
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <produce_sound+0x104>)
 8001074:	f003 ff2c 	bl	8004ed0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &sound, 1, 0xffff);
 8001078:	f107 010e 	add.w	r1, r7, #14
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	2201      	movs	r2, #1
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <produce_sound+0x104>)
 8001084:	f003 ff24 	bl	8004ed0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &force, 1, 0xffff);
 8001088:	f107 010d 	add.w	r1, r7, #13
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	2201      	movs	r2, #1
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <produce_sound+0x104>)
 8001094:	f003 ff1c 	bl	8004ed0 <HAL_UART_Transmit>
		HAL_Delay(50);
 8001098:	2032      	movs	r0, #50	; 0x32
 800109a:	f001 f863 	bl	8002164 <HAL_Delay>
	}
}
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	f3af 8000 	nop.w
	...
 80010b0:	20000098 	.word	0x20000098
 80010b4:	200000b4 	.word	0x200000b4

080010b8 <init_piano>:

void init_piano()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	produce_sound(0, 1000);
 80010be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff ff74 	bl	8000fb0 <produce_sound>
	unsigned int i;
	for (i=0;i<8;i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	e00b      	b.n	80010e6 <init_piano+0x2e>
		produce_sound(MIDDLE_C + white_note[i], 200);
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <init_piano+0x44>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	333c      	adds	r3, #60	; 0x3c
 80010d8:	21c8      	movs	r1, #200	; 0xc8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff68 	bl	8000fb0 <produce_sound>
	for (i=0;i<8;i++) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d9f0      	bls.n	80010ce <init_piano+0x16>
	}
	produce_sound(0, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ff5e 	bl	8000fb0 <produce_sound>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08007d70 	.word	0x08007d70

08001100 <init_walkman>:

void init_walkman()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	pausing = 0;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <init_walkman+0x20>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
	speed = 1.0;
 800110a:	4906      	ldr	r1, [pc, #24]	; (8001124 <init_walkman+0x24>)
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <init_walkman+0x28>)
 8001112:	e9c1 2300 	strd	r2, r3, [r1]
//	tone_switching = 0;
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200000a8 	.word	0x200000a8
 8001124:	20000000 	.word	0x20000000
 8001128:	3ff00000 	.word	0x3ff00000

0800112c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Keys interrupt
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113c:	d117      	bne.n	800116e <HAL_GPIO_EXTI_Callback+0x42>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 800113e:	2101      	movs	r1, #1
 8001140:	48a5      	ldr	r0, [pc, #660]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001142:	f001 fb83 	bl	800284c <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 8141 	beq.w	80013d0 <HAL_GPIO_EXTI_Callback+0x2a4>
			// switch mode
			play_mode = (play_mode + 1) % TOTAL_MODES;
 800114e:	4ba3      	ldr	r3, [pc, #652]	; (80013dc <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	4ba2      	ldr	r3, [pc, #648]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001156:	fb83 2301 	smull	r2, r3, r3, r1
 800115a:	105a      	asrs	r2, r3, #1
 800115c:	17cb      	asrs	r3, r1, #31
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	1aca      	subs	r2, r1, r3
 8001168:	4b9c      	ldr	r3, [pc, #624]	; (80013dc <HAL_GPIO_EXTI_Callback+0x2b0>)
 800116a:	601a      	str	r2, [r3, #0]
		}
		return ;
 800116c:	e130      	b.n	80013d0 <HAL_GPIO_EXTI_Callback+0x2a4>
	}

	if (play_mode == PIANO_MODE) {
 800116e:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 80a1 	bne.w	80012ba <HAL_GPIO_EXTI_Callback+0x18e>
		current_note = MIDDLE_C;
 8001178:	4b9a      	ldr	r3, [pc, #616]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800117a:	223c      	movs	r2, #60	; 0x3c
 800117c:	601a      	str	r2, [r3, #0]
		switch (GPIO_Pin) {
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	2b80      	cmp	r3, #128	; 0x80
 8001182:	d076      	beq.n	8001272 <HAL_GPIO_EXTI_Callback+0x146>
 8001184:	2b80      	cmp	r3, #128	; 0x80
 8001186:	dc7b      	bgt.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
 8001188:	2b20      	cmp	r3, #32
 800118a:	dc45      	bgt.n	8001218 <HAL_GPIO_EXTI_Callback+0xec>
 800118c:	2b02      	cmp	r3, #2
 800118e:	db77      	blt.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
 8001190:	3b02      	subs	r3, #2
 8001192:	2b1e      	cmp	r3, #30
 8001194:	d874      	bhi.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_GPIO_EXTI_Callback+0x70>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	0800121f 	.word	0x0800121f
 80011a0:	08001281 	.word	0x08001281
 80011a4:	0800122d 	.word	0x0800122d
 80011a8:	08001281 	.word	0x08001281
 80011ac:	08001281 	.word	0x08001281
 80011b0:	08001281 	.word	0x08001281
 80011b4:	0800123b 	.word	0x0800123b
 80011b8:	08001281 	.word	0x08001281
 80011bc:	08001281 	.word	0x08001281
 80011c0:	08001281 	.word	0x08001281
 80011c4:	08001281 	.word	0x08001281
 80011c8:	08001281 	.word	0x08001281
 80011cc:	08001281 	.word	0x08001281
 80011d0:	08001281 	.word	0x08001281
 80011d4:	08001249 	.word	0x08001249
 80011d8:	08001281 	.word	0x08001281
 80011dc:	08001281 	.word	0x08001281
 80011e0:	08001281 	.word	0x08001281
 80011e4:	08001281 	.word	0x08001281
 80011e8:	08001281 	.word	0x08001281
 80011ec:	08001281 	.word	0x08001281
 80011f0:	08001281 	.word	0x08001281
 80011f4:	08001281 	.word	0x08001281
 80011f8:	08001281 	.word	0x08001281
 80011fc:	08001281 	.word	0x08001281
 8001200:	08001281 	.word	0x08001281
 8001204:	08001281 	.word	0x08001281
 8001208:	08001281 	.word	0x08001281
 800120c:	08001281 	.word	0x08001281
 8001210:	08001281 	.word	0x08001281
 8001214:	08001257 	.word	0x08001257
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d023      	beq.n	8001264 <HAL_GPIO_EXTI_Callback+0x138>
 800121c:	e030      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_1: current_note += white_note[0]; break;
 800121e:	2200      	movs	r2, #0
 8001220:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4413      	add	r3, r2
 8001226:	4a6f      	ldr	r2, [pc, #444]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e029      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_2: current_note += white_note[1]; break;
 800122c:	2202      	movs	r2, #2
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a6b      	ldr	r2, [pc, #428]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	e022      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_3: current_note += white_note[2]; break;
 800123a:	2204      	movs	r2, #4
 800123c:	4b69      	ldr	r3, [pc, #420]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4413      	add	r3, r2
 8001242:	4a68      	ldr	r2, [pc, #416]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01b      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_4: current_note += white_note[3]; break;
 8001248:	2205      	movs	r2, #5
 800124a:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a64      	ldr	r2, [pc, #400]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e014      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_5: current_note += white_note[4]; break;
 8001256:	2207      	movs	r2, #7
 8001258:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a61      	ldr	r2, [pc, #388]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00d      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_6: current_note += white_note[5]; break;
 8001264:	2209      	movs	r2, #9
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_7: current_note += white_note[6]; break;
 8001272:	220b      	movs	r2, #11
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4413      	add	r3, r2
 800127a:	4a5a      	ldr	r2, [pc, #360]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	bf00      	nop
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001280:	2101      	movs	r1, #1
 8001282:	4855      	ldr	r0, [pc, #340]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001284:	f001 fae2 	bl	800284c <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_GPIO_EXTI_Callback+0x16c>
			// big button pushed down
			current_note += 12;
 800128e:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	330c      	adds	r3, #12
 8001294:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001296:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0) {
 8001298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129c:	4852      	ldr	r0, [pc, #328]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800129e:	f001 fad5 	bl	800284c <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <HAL_GPIO_EXTI_Callback+0x186>
			// small button pushed down
			current_note -= 12;
 80012a8:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3b0c      	subs	r3, #12
 80012ae:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80012b0:	6013      	str	r3, [r2, #0]
		}
		sounding_buffer = 1;
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <HAL_GPIO_EXTI_Callback+0x2c0>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e07e      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
	}
	else {
		// switch the walkman
		switch (GPIO_Pin) {
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2b20      	cmp	r3, #32
 80012be:	dc45      	bgt.n	800134c <HAL_GPIO_EXTI_Callback+0x220>
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	db79      	blt.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
 80012c4:	3b02      	subs	r3, #2
 80012c6:	2b1e      	cmp	r3, #30
 80012c8:	d876      	bhi.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	08001353 	.word	0x08001353
 80012d4:	080013b9 	.word	0x080013b9
 80012d8:	080013b9 	.word	0x080013b9
 80012dc:	080013b9 	.word	0x080013b9
 80012e0:	080013b9 	.word	0x080013b9
 80012e4:	080013b9 	.word	0x080013b9
 80012e8:	08001369 	.word	0x08001369
 80012ec:	080013b9 	.word	0x080013b9
 80012f0:	080013b9 	.word	0x080013b9
 80012f4:	080013b9 	.word	0x080013b9
 80012f8:	080013b9 	.word	0x080013b9
 80012fc:	080013b9 	.word	0x080013b9
 8001300:	080013b9 	.word	0x080013b9
 8001304:	080013b9 	.word	0x080013b9
 8001308:	08001385 	.word	0x08001385
 800130c:	080013b9 	.word	0x080013b9
 8001310:	080013b9 	.word	0x080013b9
 8001314:	080013b9 	.word	0x080013b9
 8001318:	080013b9 	.word	0x080013b9
 800131c:	080013b9 	.word	0x080013b9
 8001320:	080013b9 	.word	0x080013b9
 8001324:	080013b9 	.word	0x080013b9
 8001328:	080013b9 	.word	0x080013b9
 800132c:	080013b9 	.word	0x080013b9
 8001330:	080013b9 	.word	0x080013b9
 8001334:	080013b9 	.word	0x080013b9
 8001338:	080013b9 	.word	0x080013b9
 800133c:	080013b9 	.word	0x080013b9
 8001340:	080013b9 	.word	0x080013b9
 8001344:	080013b9 	.word	0x080013b9
 8001348:	080013a1 	.word	0x080013a1
 800134c:	2b40      	cmp	r3, #64	; 0x40
 800134e:	d02d      	beq.n	80013ac <HAL_GPIO_EXTI_Callback+0x280>
 8001350:	e032      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
		case GPIO_PIN_1: pausing = !pausing; break;
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e027      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
		case GPIO_PIN_2:  break;
		case GPIO_PIN_3: speed += 0.25; break;
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800136a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001374:	f7fe ff56 	bl	8000224 <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	491d      	ldr	r1, [pc, #116]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
 8001382:	e019      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
		case GPIO_PIN_4: speed -= 0.25; break;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001390:	f7fe ff46 	bl	8000220 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4916      	ldr	r1, [pc, #88]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800139a:	e9c1 2300 	strd	r2, r3, [r1]
 800139e:	e00b      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
		case GPIO_PIN_5: tone_switching++; break;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e005      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x28c>
		case GPIO_PIN_6: tone_switching--; break;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	bf00      	nop
//		case GPIO_PIN_7: tone += 12; break;
//		case GPIO_PIN_8: tone -= 12; break;
		}
	}
	int i;
	for (i=0;i<0x3fff;i++);
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x298>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80013ca:	4293      	cmp	r3, r2
 80013cc:	ddf7      	ble.n	80013be <HAL_GPIO_EXTI_Callback+0x292>
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_EXTI_Callback+0x2a6>
		return ;
 80013d0:	bf00      	nop
}
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	48000800 	.word	0x48000800
 80013dc:	20000094 	.word	0x20000094
 80013e0:	66666667 	.word	0x66666667
 80013e4:	2000009c 	.word	0x2000009c
 80013e8:	48000400 	.word	0x48000400
 80013ec:	200000a4 	.word	0x200000a4
 80013f0:	200000a8 	.word	0x200000a8
 80013f4:	20000000 	.word	0x20000000
 80013f8:	3fd00000 	.word	0x3fd00000
 80013fc:	200000ac 	.word	0x200000ac

08001400 <play_music>:



void play_music(const int* pnote, const int* pbeat, const int* ptone,
		int bpm, int tone_shift)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	603b      	str	r3, [r7, #0]
	int i;
	int init_mode = play_mode;
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <play_music+0x140>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	617b      	str	r3, [r7, #20]
	int init_tone = tone_switching;
 8001414:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <play_music+0x144>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
	if (init_mode == 0)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 808b 	beq.w	8001538 <play_music+0x138>
		return ;
	for (i=0;pnote[i]!=-1 && play_mode == init_mode && tone_switching==init_tone ;i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e073      	b.n	8001510 <play_music+0x110>
		while (pausing) ;
 8001428:	bf00      	nop
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <play_music+0x148>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1fb      	bne.n	800142a <play_music+0x2a>
		int note = pnote[i]>0?(white_note[pnote[i]-1] + MIDDLE_C):0;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dd0a      	ble.n	8001456 <play_music+0x56>
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	4a3f      	ldr	r2, [pc, #252]	; (800154c <play_music+0x14c>)
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	333c      	adds	r3, #60	; 0x3c
 8001454:	e000      	b.n	8001458 <play_music+0x58>
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
		switch (ptone[i]) {
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3303      	adds	r3, #3
 8001466:	2b06      	cmp	r3, #6
 8001468:	d828      	bhi.n	80014bc <play_music+0xbc>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <play_music+0x70>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	080014b5 	.word	0x080014b5
 8001474:	080014ad 	.word	0x080014ad
 8001478:	0800149d 	.word	0x0800149d
 800147c:	080014bd 	.word	0x080014bd
 8001480:	0800148d 	.word	0x0800148d
 8001484:	080014a5 	.word	0x080014a5
 8001488:	08001495 	.word	0x08001495
		case 1:  note += 12; break;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	330c      	adds	r3, #12
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	e013      	b.n	80014bc <play_music+0xbc>
		case 3:  note += 13; break;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	330d      	adds	r3, #13
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	e00f      	b.n	80014bc <play_music+0xbc>
		case -1: note -= 12; break;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	3b0c      	subs	r3, #12
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e00b      	b.n	80014bc <play_music+0xbc>
		case 2:  note++; break;
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	e007      	b.n	80014bc <play_music+0xbc>
		case -2: note--; break;
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e003      	b.n	80014bc <play_music+0xbc>
		case -3: note -= 13; break;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3b0d      	subs	r3, #13
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	bf00      	nop
		}
		if (note != 0)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <play_music+0xcc>
			note += tone_switching;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <play_music+0x144>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4413      	add	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
		produce_sound(note, 60*1000*pbeat[i]/bpm/speed);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80014da:	fb03 f202 	mul.w	r2, r3, r2
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffe9 	bl	80004bc <__aeabi_i2d>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <play_music+0x150>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f978 	bl	80007e4 <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff faf8 	bl	8000af0 <__aeabi_d2iz>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	69b8      	ldr	r0, [r7, #24]
 8001506:	f7ff fd53 	bl	8000fb0 <produce_sound>
	for (i=0;pnote[i]!=-1 && play_mode == init_mode && tone_switching==init_tone ;i++) {
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151e:	d00c      	beq.n	800153a <play_music+0x13a>
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <play_music+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	429a      	cmp	r2, r3
 8001528:	d107      	bne.n	800153a <play_music+0x13a>
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <play_music+0x144>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	429a      	cmp	r2, r3
 8001532:	f43f af79 	beq.w	8001428 <play_music+0x28>
 8001536:	e000      	b.n	800153a <play_music+0x13a>
		return ;
 8001538:	bf00      	nop
	}
}
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000094 	.word	0x20000094
 8001544:	200000ac 	.word	0x200000ac
 8001548:	200000a8 	.word	0x200000a8
 800154c:	08007d70 	.word	0x08007d70
 8001550:	20000000 	.word	0x20000000

08001554 <HAL_TIM_PeriodElapsedCallback>:
int key0_last_status = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //定时器的定时回调函数
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM4) //确定�??? TIM4 引起的中�???
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d127      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		if (key0_last_status && KEY0) {
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01b      	beq.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x52>
 800156e:	2101      	movs	r1, #1
 8001570:	4815      	ldr	r0, [pc, #84]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001572:	f001 f96b 	bl	800284c <HAL_GPIO_ReadPin>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d014      	beq.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x52>
			// long pressed
			key0_long_pushed = 1;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
			output_device = !output_device;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001594:	601a      	str	r2, [r3, #0]
			while (KEY0);
 8001596:	bf00      	nop
 8001598:	2101      	movs	r1, #1
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800159c:	f001 f956 	bl	800284c <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f8      	bne.n	8001598 <HAL_TIM_PeriodElapsedCallback+0x44>
		}
		key0_last_status = KEY0;
 80015a6:	2101      	movs	r1, #1
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015aa:	f001 f94f 	bl	800284c <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80015b4:	601a      	str	r2, [r3, #0]
	}
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40000800 	.word	0x40000800
 80015c4:	2000026c 	.word	0x2000026c
 80015c8:	48000800 	.word	0x48000800
 80015cc:	200000a0 	.word	0x200000a0
 80015d0:	20000098 	.word	0x20000098

080015d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    switch (data_buff[0]) {
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <HAL_UART_RxCpltCallback+0x114>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	2b11      	cmp	r3, #17
 80015e4:	d871      	bhi.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_UART_RxCpltCallback+0x18>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001635 	.word	0x08001635
 80015f0:	080016cb 	.word	0x080016cb
 80015f4:	0800164b 	.word	0x0800164b
 80015f8:	08001667 	.word	0x08001667
 80015fc:	08001683 	.word	0x08001683
 8001600:	0800168f 	.word	0x0800168f
 8001604:	0800169b 	.word	0x0800169b
 8001608:	080016a7 	.word	0x080016a7
 800160c:	080016cb 	.word	0x080016cb
 8001610:	080016cb 	.word	0x080016cb
 8001614:	080016cb 	.word	0x080016cb
 8001618:	080016cb 	.word	0x080016cb
 800161c:	080016cb 	.word	0x080016cb
 8001620:	080016cb 	.word	0x080016cb
 8001624:	080016cb 	.word	0x080016cb
 8001628:	080016b3 	.word	0x080016b3
 800162c:	080016bb 	.word	0x080016bb
 8001630:	080016c3 	.word	0x080016c3
	case 0x01: pausing = !pausing; break;
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_UART_RxCpltCallback+0x118>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <HAL_UART_RxCpltCallback+0x118>)
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e03f      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x02:  break;
	case 0x03: speed += 0.25; break;
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_UART_RxCpltCallback+0x11c>)
 800164c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_UART_RxCpltCallback+0x120>)
 8001656:	f7fe fde5 	bl	8000224 <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4924      	ldr	r1, [pc, #144]	; (80016f0 <HAL_UART_RxCpltCallback+0x11c>)
 8001660:	e9c1 2300 	strd	r2, r3, [r1]
 8001664:	e031      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x04: speed -= 0.25; break;
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_UART_RxCpltCallback+0x11c>)
 8001668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_UART_RxCpltCallback+0x120>)
 8001672:	f7fe fdd5 	bl	8000220 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	491d      	ldr	r1, [pc, #116]	; (80016f0 <HAL_UART_RxCpltCallback+0x11c>)
 800167c:	e9c1 2300 	strd	r2, r3, [r1]
 8001680:	e023      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x05: tone_switching++; break;
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e01d      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x06: tone_switching--; break;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e017      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x07: tone_switching+=12; break;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	330c      	adds	r3, #12
 80016a0:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e011      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x08: tone_switching-=12; break;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3b0c      	subs	r3, #12
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_UART_RxCpltCallback+0x124>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e00b      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x10: play_mode = 1; break;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_UART_RxCpltCallback+0x128>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x11: play_mode = 2; break;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_UART_RxCpltCallback+0x128>)
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e003      	b.n	80016ca <HAL_UART_RxCpltCallback+0xf6>
	case 0x12: play_mode = 3; break;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_UART_RxCpltCallback+0x128>)
 80016c4:	2203      	movs	r2, #3
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	bf00      	nop
	//		case GPIO_PIN_7: tone += 12; break;
	//		case GPIO_PIN_8: tone -= 12; break;
	}
  while(HAL_UART_Receive_IT(&huart1, data_buff, 1) != HAL_OK); // Wait completly receive 1 byte data, and put data in rDataBuffer
 80016ca:	bf00      	nop
 80016cc:	2201      	movs	r2, #1
 80016ce:	4906      	ldr	r1, [pc, #24]	; (80016e8 <HAL_UART_RxCpltCallback+0x114>)
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <HAL_UART_RxCpltCallback+0x12c>)
 80016d2:	f003 fc93 	bl	8004ffc <HAL_UART_Receive_IT>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f7      	bne.n	80016cc <HAL_UART_RxCpltCallback+0xf8>
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000b0 	.word	0x200000b0
 80016ec:	200000a8 	.word	0x200000a8
 80016f0:	20000000 	.word	0x20000000
 80016f4:	3fd00000 	.word	0x3fd00000
 80016f8:	200000ac 	.word	0x200000ac
 80016fc:	20000094 	.word	0x20000094
 8001700:	20000144 	.word	0x20000144
 8001704:	00000000 	.word	0x00000000

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170e:	f000 fcb8 	bl	8002082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001712:	f000 f885 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001716:	f000 fa2d 	bl	8001b74 <MX_GPIO_Init>
  MX_TIM3_Init();
 800171a:	f000 f961 	bl	80019e0 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 800171e:	f000 f8c9 	bl	80018b4 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8001722:	f000 f9d7 	bl	8001ad4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001726:	f000 f90f 	bl	8001948 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //启动定时器TIM3通道1的PWM输出
 800172a:	2100      	movs	r1, #0
 800172c:	4834      	ldr	r0, [pc, #208]	; (8001800 <main+0xf8>)
 800172e:	f002 f9b9 	bl	8003aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001732:	4834      	ldr	r0, [pc, #208]	; (8001804 <main+0xfc>)
 8001734:	f002 f8ea 	bl	800390c <HAL_TIM_Base_Start_IT>
  //定义函数
  setPWM(0, DEFAULT_DUTY);
 8001738:	205f      	movs	r0, #95	; 0x5f
 800173a:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 80017f8 <main+0xf0>
 800173e:	f7ff fba3 	bl	8000e88 <setPWM>
  HAL_UART_Receive_IT(&huart1,data_buff, 1);
 8001742:	2201      	movs	r2, #1
 8001744:	4930      	ldr	r1, [pc, #192]	; (8001808 <main+0x100>)
 8001746:	4831      	ldr	r0, [pc, #196]	; (800180c <main+0x104>)
 8001748:	f003 fc58 	bl	8004ffc <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode == PIANO_MODE) {
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <main+0x108>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d114      	bne.n	800177e <main+0x76>
		  init_piano();
 8001754:	f7ff fcb0 	bl	80010b8 <init_piano>
		  while (play_mode==PIANO_MODE) {
 8001758:	e00d      	b.n	8001776 <main+0x6e>
			  if (sounding_buffer) {
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <main+0x10c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <main+0x6e>
				  produce_sound(current_note, 500);
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <main+0x110>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc20 	bl	8000fb0 <produce_sound>
				  sounding_buffer = 0;
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <main+0x10c>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
		  while (play_mode==PIANO_MODE) {
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <main+0x108>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ed      	beq.n	800175a <main+0x52>
			  }
		  }
	  }
	  init_walkman();
 800177e:	f7ff fcbf 	bl	8001100 <init_walkman>
	  HAL_Delay(1000);
 8001782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001786:	f000 fced 	bl	8002164 <HAL_Delay>
	  play_music(score[play_mode][1], score[play_mode][2], score[play_mode][3],
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <main+0x108>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <main+0x114>)
 800179c:	1898      	adds	r0, r3, r2
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <main+0x108>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 80017ae:	4a1b      	ldr	r2, [pc, #108]	; (800181c <main+0x114>)
 80017b0:	1899      	adds	r1, r3, r2
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <main+0x108>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80017c2:	3318      	adds	r3, #24
 80017c4:	4a15      	ldr	r2, [pc, #84]	; (800181c <main+0x114>)
 80017c6:	441a      	add	r2, r3
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <main+0x108>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4c13      	ldr	r4, [pc, #76]	; (800181c <main+0x114>)
 80017ce:	f44f 55c9 	mov.w	r5, #6432	; 0x1920
 80017d2:	fb05 f303 	mul.w	r3, r5, r3
 80017d6:	4423      	add	r3, r4
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <main+0x108>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4d0f      	ldr	r5, [pc, #60]	; (800181c <main+0x114>)
 80017e0:	f44f 56c9 	mov.w	r6, #6432	; 0x1920
 80017e4:	fb06 f303 	mul.w	r3, r6, r3
 80017e8:	442b      	add	r3, r5
 80017ea:	3304      	adds	r3, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	f7ff fe05 	bl	8001400 <play_music>
	  if (play_mode == PIANO_MODE) {
 80017f6:	e7a9      	b.n	800174c <main+0x44>
	...
 8001800:	200001d4 	.word	0x200001d4
 8001804:	20000220 	.word	0x20000220
 8001808:	200000b0 	.word	0x200000b0
 800180c:	20000144 	.word	0x20000144
 8001810:	20000094 	.word	0x20000094
 8001814:	200000a4 	.word	0x200000a4
 8001818:	2000009c 	.word	0x2000009c
 800181c:	08007d94 	.word	0x08007d94

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f005 fb6e 	bl	8006f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001842:	2000      	movs	r0, #0
 8001844:	f001 f832 	bl	80028ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800184c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001850:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001852:	2302      	movs	r3, #2
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001856:	2303      	movs	r3, #3
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800185a:	2306      	movs	r3, #6
 800185c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800185e:	2355      	movs	r3, #85	; 0x55
 8001860:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f8ce 	bl	8002a14 <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800187e:	f000 fa17 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2303      	movs	r3, #3
 8001888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2104      	movs	r1, #4
 800189a:	4618      	mov	r0, r3
 800189c:	f001 fbd2 	bl	8003044 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018a6:	f000 fa03 	bl	8001cb0 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	; 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 80018f8:	f003 fa9a 	bl	8004e30 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001902:	f000 f9d5 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 800190a:	f005 fa0c 	bl	8006d26 <HAL_UARTEx_SetTxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001914:	f000 f9cc 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 800191c:	f005 fa41 	bl	8006da2 <HAL_UARTEx_SetRxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001926:	f000 f9c3 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_LPUART1_UART_Init+0x8c>)
 800192c:	f005 f9c2 	bl	8006cb4 <HAL_UARTEx_DisableFifoMode>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001936:	f000 f9bb 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000b4 	.word	0x200000b4
 8001944:	40008000 	.word	0x40008000

08001948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <MX_USART1_UART_Init+0x94>)
 8001950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001990:	4811      	ldr	r0, [pc, #68]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 8001992:	f003 fa4d 	bl	8004e30 <HAL_UART_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800199c:	f000 f988 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	480d      	ldr	r0, [pc, #52]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 80019a4:	f005 f9bf 	bl	8006d26 <HAL_UARTEx_SetTxFifoThreshold>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019ae:	f000 f97f 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 80019b6:	f005 f9f4 	bl	8006da2 <HAL_UARTEx_SetRxFifoThreshold>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019c0:	f000 f976 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_USART1_UART_Init+0x90>)
 80019c6:	f005 f975 	bl	8006cb4 <HAL_UARTEx_DisableFifoMode>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019d0:	f000 f96e 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000144 	.word	0x20000144
 80019dc:	40013800 	.word	0x40013800

080019e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	; 0x38
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	615a      	str	r2, [r3, #20]
 8001a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <MX_TIM3_Init+0xf0>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a1a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a28:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3a:	4824      	ldr	r0, [pc, #144]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a3c:	f001 ff0e 	bl	800385c <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001a46:	f000 f933 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	4619      	mov	r1, r3
 8001a56:	481d      	ldr	r0, [pc, #116]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a58:	f002 fbb8 	bl	80041cc <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001a62:	f000 f925 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a66:	4819      	ldr	r0, [pc, #100]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a68:	f001 ffba 	bl	80039e0 <HAL_TIM_PWM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a72:	f000 f91d 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <MX_TIM3_Init+0xec>)
 8001a86:	f003 f90b 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a90:	f000 f90e 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a94:	2360      	movs	r3, #96	; 0x60
 8001a96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001a98:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_TIM3_Init+0xec>)
 8001aae:	f002 fa79 	bl	8003fa4 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001ab8:	f000 f8fa 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <MX_TIM3_Init+0xec>)
 8001abe:	f000 f9fb 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001ac2:	bf00      	nop
 8001ac4:	3738      	adds	r7, #56	; 0x38
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200001d4 	.word	0x200001d4
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <MX_TIM4_Init+0x9c>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16999;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001afa:	f244 2267 	movw	r2, #16999	; 0x4267
 8001afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b08:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b1c:	f001 fe9e 	bl	800385c <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001b26:	f000 f8c3 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b38:	f002 fb48 	bl	80041cc <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001b42:	f000 f8b5 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_TIM4_Init+0x98>)
 8001b54:	f003 f8a4 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001b5e:	f000 f8a7 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000220 	.word	0x20000220
 8001b70:	40000800 	.word	0x40000800

08001b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a3f      	ldr	r2, [pc, #252]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <MX_GPIO_Init+0x130>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4829      	ldr	r0, [pc, #164]	; (8001ca8 <MX_GPIO_Init+0x134>)
 8001c02:	f000 fca1 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4823      	ldr	r0, [pc, #140]	; (8001ca8 <MX_GPIO_Init+0x134>)
 8001c1a:	f000 fc95 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c1e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001c22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	481d      	ldr	r0, [pc, #116]	; (8001cac <MX_GPIO_Init+0x138>)
 8001c36:	f000 fc87 	bl	8002548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2007      	movs	r0, #7
 8001c40:	f000 fb8d 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c44:	2007      	movs	r0, #7
 8001c46:	f000 fba4 	bl	8002392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2008      	movs	r0, #8
 8001c50:	f000 fb85 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c54:	2008      	movs	r0, #8
 8001c56:	f000 fb9c 	bl	8002392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2009      	movs	r0, #9
 8001c60:	f000 fb7d 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c64:	2009      	movs	r0, #9
 8001c66:	f000 fb94 	bl	8002392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f000 fb75 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f000 fb8c 	bl	8002392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2017      	movs	r0, #23
 8001c80:	f000 fb6d 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c84:	2017      	movs	r0, #23
 8001c86:	f000 fb84 	bl	8002392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2028      	movs	r0, #40	; 0x28
 8001c90:	f000 fb65 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c94:	2028      	movs	r0, #40	; 0x28
 8001c96:	f000 fb7c 	bl	8002392 <HAL_NVIC_EnableIRQ>

}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	48000400 	.word	0x48000400

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_MspInit+0x44>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_MspInit+0x44>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_MspInit+0x44>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_MspInit+0x44>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cf2:	f000 fe7f 	bl	80029f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b09c      	sub	sp, #112	; 0x70
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	2244      	movs	r2, #68	; 0x44
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 f8f3 	bl	8006f10 <memset>
  if(huart->Instance==LPUART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a41      	ldr	r2, [pc, #260]	; (8001e34 <HAL_UART_MspInit+0x130>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d137      	bne.n	8001da4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d34:	2320      	movs	r3, #32
 8001d36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3c:	f107 0318 	add.w	r3, r7, #24
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fb9b 	bl	800347c <HAL_RCCEx_PeriphCLKConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d4c:	f7ff ffb0 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d5c:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d80:	230c      	movs	r3, #12
 8001d82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d90:	230c      	movs	r3, #12
 8001d92:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9e:	f000 fbd3 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001da2:	e042      	b.n	8001e2a <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_UART_MspInit+0x138>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d13d      	bne.n	8001e2a <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fb5e 	bl	800347c <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001dc6:	f7ff ff73 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_UART_MspInit+0x134>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dfa:	2330      	movs	r3, #48	; 0x30
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e12:	4619      	mov	r1, r3
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <HAL_UART_MspInit+0x13c>)
 8001e16:	f000 fb97 	bl	8002548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	2025      	movs	r0, #37	; 0x25
 8001e20:	f000 fa9d 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e24:	2025      	movs	r0, #37	; 0x25
 8001e26:	f000 fab4 	bl	8002392 <HAL_NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3770      	adds	r7, #112	; 0x70
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40008000 	.word	0x40008000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	48000800 	.word	0x48000800

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10c      	bne.n	8001e70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e6e:	e018      	b.n	8001ea2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_TIM_Base_MspInit+0x70>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	201e      	movs	r0, #30
 8001e98:	f000 fa61 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e9c:	201e      	movs	r0, #30
 8001e9e:	f000 fa78 	bl	8002392 <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40000800 	.word	0x40000800

08001eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_TIM_MspPostInit+0x64>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d11c      	bne.n	8001f14 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_TIM_MspPostInit+0x68>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_TIM_MspPostInit+0x68>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_TIM_MspPostInit+0x68>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef2:	2340      	movs	r3, #64	; 0x40
 8001ef4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f000 fb1a 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40021000 	.word	0x40021000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <NMI_Handler+0x4>

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 f8da 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f000 fc7d 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001f8a:	2004      	movs	r0, #4
 8001f8c:	f000 fc76 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f98:	2008      	movs	r0, #8
 8001f9a:	f000 fc6f 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f000 fc68 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fb4:	2020      	movs	r0, #32
 8001fb6:	f000 fc61 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fba:	2040      	movs	r0, #64	; 0x40
 8001fbc:	f000 fc5e 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fc0:	2080      	movs	r0, #128	; 0x80
 8001fc2:	f000 fc5b 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001fc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fca:	f000 fc57 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM4_IRQHandler+0x10>)
 8001fda:	f001 fe63 	bl	8003ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000220 	.word	0x20000220

08001fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART1_IRQHandler+0x10>)
 8001fee:	f003 f85b 	bl	80050a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000144 	.word	0x20000144

08001ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002000:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002004:	f000 fc3a 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <LoopForever+0x6>)
  ldr r1, =_edata
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <LoopForever+0xe>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <LoopForever+0x12>)
  ldr r4, =_ebss
 800204c:	4c0b      	ldr	r4, [pc, #44]	; (800207c <LoopForever+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800205a:	f7ff ffd7 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205e:	f004 ff33 	bl	8006ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002062:	f7ff fb51 	bl	8001708 <main>

08002066 <LoopForever>:

LoopForever:
    b LoopForever
 8002066:	e7fe      	b.n	8002066 <LoopForever>
  ldr   r0, =_estack
 8002068:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002074:	08017958 	.word	0x08017958
  ldr r2, =_sbss
 8002078:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800207c:	20000274 	.word	0x20000274

08002080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC1_2_IRQHandler>

08002082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f95b 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f80e 	bl	80020b4 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	e001      	b.n	80020a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a4:	f7ff fe0a 	bl	8001cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020a8:	79fb      	ldrb	r3, [r7, #7]

}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_InitTick+0x68>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d022      	beq.n	800210e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_InitTick+0x6c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_InitTick+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f966 	bl	80023ae <HAL_SYSTICK_Config>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10f      	bne.n	8002108 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	d809      	bhi.n	8002102 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ee:	2200      	movs	r2, #0
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	f04f 30ff 	mov.w	r0, #4294967295
 80020f6:	f000 f932 	bl	800235e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_InitTick+0x70>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e007      	b.n	8002112 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e004      	b.n	8002112 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000010 	.word	0x20000010
 8002120:	20000008 	.word	0x20000008
 8002124:	2000000c 	.word	0x2000000c

08002128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x1c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x20>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4413      	add	r3, r2
 8002136:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x1c>)
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000270 	.word	0x20000270
 8002148:	20000010 	.word	0x20000010

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000270 	.word	0x20000270

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d004      	beq.n	8002188 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_Delay+0x40>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002188:	bf00      	nop
 800218a:	f7ff ffdf 	bl	800214c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	429a      	cmp	r2, r3
 8002198:	d8f7      	bhi.n	800218a <HAL_Delay+0x26>
  {
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000010 	.word	0x20000010

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <__NVIC_EnableIRQ+0x38>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff29 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800236c:	f7ff ff40 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f7ff ff90 	bl	800229c <NVIC_EncodePriority>
 800237c:	4602      	mov	r2, r0
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff5f 	bl	8002248 <__NVIC_SetPriority>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff33 	bl	800220c <__NVIC_EnableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffa4 	bl	8002304 <SysTick_Config>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2204      	movs	r2, #4
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e037      	b.n	800245a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 020e 	bic.w	r2, r2, #14
 80023f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f003 021f 	and.w	r2, r3, #31
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002436:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800244e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002458:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d00d      	beq.n	80024ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2204      	movs	r2, #4
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e047      	b.n	800253c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020e 	bic.w	r2, r2, #14
 80024ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002510:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800251a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
    }
  }
  return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002556:	e15a      	b.n	800280e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 814c 	beq.w	8002808 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d005      	beq.n	8002588 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002584:	2b02      	cmp	r3, #2
 8002586:	d130      	bne.n	80025ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0201 	and.w	r2, r3, #1
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d017      	beq.n	8002626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d123      	bne.n	800267a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	6939      	ldr	r1, [r7, #16]
 8002676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a6 	beq.w	8002808 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026bc:	4b5b      	ldr	r3, [pc, #364]	; (800282c <HAL_GPIO_Init+0x2e4>)
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	4a5a      	ldr	r2, [pc, #360]	; (800282c <HAL_GPIO_Init+0x2e4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6613      	str	r3, [r2, #96]	; 0x60
 80026c8:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_GPIO_Init+0x2e4>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d4:	4a56      	ldr	r2, [pc, #344]	; (8002830 <HAL_GPIO_Init+0x2e8>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026fe:	d01f      	beq.n	8002740 <HAL_GPIO_Init+0x1f8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x2ec>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d019      	beq.n	800273c <HAL_GPIO_Init+0x1f4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <HAL_GPIO_Init+0x1f0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_GPIO_Init+0x2f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00d      	beq.n	8002734 <HAL_GPIO_Init+0x1ec>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_GPIO_Init+0x2f8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <HAL_GPIO_Init+0x1e8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_GPIO_Init+0x2fc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d101      	bne.n	800272c <HAL_GPIO_Init+0x1e4>
 8002728:	2305      	movs	r3, #5
 800272a:	e00a      	b.n	8002742 <HAL_GPIO_Init+0x1fa>
 800272c:	2306      	movs	r3, #6
 800272e:	e008      	b.n	8002742 <HAL_GPIO_Init+0x1fa>
 8002730:	2304      	movs	r3, #4
 8002732:	e006      	b.n	8002742 <HAL_GPIO_Init+0x1fa>
 8002734:	2303      	movs	r3, #3
 8002736:	e004      	b.n	8002742 <HAL_GPIO_Init+0x1fa>
 8002738:	2302      	movs	r3, #2
 800273a:	e002      	b.n	8002742 <HAL_GPIO_Init+0x1fa>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_GPIO_Init+0x1fa>
 8002740:	2300      	movs	r3, #0
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	f002 0203 	and.w	r2, r2, #3
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	4093      	lsls	r3, r2
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002752:	4937      	ldr	r1, [pc, #220]	; (8002830 <HAL_GPIO_Init+0x2e8>)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_GPIO_Init+0x300>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002784:	4a30      	ldr	r2, [pc, #192]	; (8002848 <HAL_GPIO_Init+0x300>)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800278a:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <HAL_GPIO_Init+0x300>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027ae:	4a26      	ldr	r2, [pc, #152]	; (8002848 <HAL_GPIO_Init+0x300>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_GPIO_Init+0x300>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <HAL_GPIO_Init+0x300>)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_GPIO_Init+0x300>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <HAL_GPIO_Init+0x300>)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f ae9d 	bne.w	8002558 <HAL_GPIO_Init+0x10>
  }
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40021000 	.word	0x40021000
 8002830:	40010000 	.word	0x40010000
 8002834:	48000400 	.word	0x48000400
 8002838:	48000800 	.word	0x48000800
 800283c:	48000c00 	.word	0x48000c00
 8002840:	48001000 	.word	0x48001000
 8002844:	48001400 	.word	0x48001400
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e001      	b.n	800286e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fc46 	bl	800112c <HAL_GPIO_EXTI_Callback>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40010400 	.word	0x40010400

080028ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d141      	bne.n	800293e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ba:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d131      	bne.n	800292c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028c8:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ce:	4a46      	ldr	r2, [pc, #280]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028d8:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e0:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2232      	movs	r2, #50	; 0x32
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0c9b      	lsrs	r3, r3, #18
 80028fa:	3301      	adds	r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028fe:	e002      	b.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3b01      	subs	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d102      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f2      	bne.n	8002900 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d158      	bne.n	80029da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e057      	b.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800292c:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002932:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800293c:	e04d      	b.n	80029da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002944:	d141      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d131      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2232      	movs	r2, #50	; 0x32
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	0c9b      	lsrs	r3, r3, #18
 8002986:	3301      	adds	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298a:	e002      	b.n	8002992 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3b01      	subs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	d102      	bne.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f2      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	d112      	bne.n	80029da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e011      	b.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029c8:	e007      	b.n	80029da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40007000 	.word	0x40007000
 80029ec:	20000008 	.word	0x20000008
 80029f0:	431bde83 	.word	0x431bde83

080029f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a02:	6093      	str	r3, [r2, #8]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e306      	b.n	8003034 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d075      	beq.n	8002b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a32:	4b97      	ldr	r3, [pc, #604]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a3c:	4b94      	ldr	r3, [pc, #592]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b0c      	cmp	r3, #12
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3e>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_OscConfig+0x44>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b8d      	ldr	r3, [pc, #564]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d05b      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d157      	bne.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e2e1      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x74>
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a84      	ldr	r2, [pc, #528]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7e      	ldr	r2, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b7c      	ldr	r3, [pc, #496]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7b      	ldr	r2, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002aac:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a74      	ldr	r2, [pc, #464]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7ff fb3e 	bl	800214c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fb3a 	bl	800214c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e2a6      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7ff fb2a 	bl	800214c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7ff fb26 	bl	800214c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e292      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0e:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0xe8>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d075      	beq.n	8002c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	d102      	bne.n	8002b4a <HAL_RCC_OscConfig+0x136>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d002      	beq.n	8002b50 <HAL_RCC_OscConfig+0x13c>
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d11f      	bne.n	8002b90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_OscConfig+0x154>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e265      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	4946      	ldr	r1, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b7c:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fa97 	bl	80020b4 <HAL_InitTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e251      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fad2 	bl	800214c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bac:	f7ff face 	bl	800214c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e23a      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	061b      	lsls	r3, r3, #24
 8002bd8:	492d      	ldr	r1, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
 8002bde:	e01a      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff faae 	bl	800214c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff faaa 	bl	800214c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e216      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1e0>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d041      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7ff fa87 	bl	800214c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c42:	f7ff fa83 	bl	800214c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e1ef      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ef      	beq.n	8002c42 <HAL_RCC_OscConfig+0x22e>
 8002c62:	e020      	b.n	8002ca6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7ff fa6a 	bl	800214c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c7a:	e00d      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7ff fa66 	bl	800214c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d906      	bls.n	8002c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1d2      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c98:	4b8c      	ldr	r3, [pc, #560]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ea      	bne.n	8002c7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80a6 	beq.w	8002e00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cb8:	4b84      	ldr	r3, [pc, #528]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2b4>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x2b6>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	4a7e      	ldr	r2, [pc, #504]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cda:	4b7c      	ldr	r3, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cea:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <HAL_RCC_OscConfig+0x4bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x4bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a75      	ldr	r2, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x4bc>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7ff fa23 	bl	800214c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7ff fa1f 	bl	800214c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e18b      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1c:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x4bc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d108      	bne.n	8002d42 <HAL_RCC_OscConfig+0x32e>
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d40:	e024      	b.n	8002d8c <HAL_RCC_OscConfig+0x378>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d110      	bne.n	8002d6c <HAL_RCC_OscConfig+0x358>
 8002d4a:	4b60      	ldr	r3, [pc, #384]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	4a5e      	ldr	r2, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6a:	e00f      	b.n	8002d8c <HAL_RCC_OscConfig+0x378>
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7ff f9da 	bl	800214c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7ff f9d6 	bl	800214c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e140      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ed      	beq.n	8002d9c <HAL_RCC_OscConfig+0x388>
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7ff f9c3 	bl	800214c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7ff f9bf 	bl	800214c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e129      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ed      	bne.n	8002dca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d03c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7ff f992 	bl	800214c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e2c:	f7ff f98e 	bl	800214c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0fa      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <HAL_RCC_OscConfig+0x418>
 8002e4c:	e01b      	b.n	8002e86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7ff f975 	bl	800214c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e66:	f7ff f971 	bl	800214c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0dd      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ef      	bne.n	8002e66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80d1 	beq.w	8003032 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	f000 808b 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d15e      	bne.n	8002f64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7ff f94b 	bl	800214c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	e00c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7ff f947 	bl	800214c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d905      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0b3      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ec      	bne.n	8002eba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee0:	4b56      	ldr	r3, [pc, #344]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4b56      	ldr	r3, [pc, #344]	; (8003040 <HAL_RCC_OscConfig+0x62c>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6a11      	ldr	r1, [r2, #32]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002efa:	0212      	lsls	r2, r2, #8
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f02:	0852      	lsrs	r2, r2, #1
 8002f04:	3a01      	subs	r2, #1
 8002f06:	0552      	lsls	r2, r2, #21
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f0e:	0852      	lsrs	r2, r2, #1
 8002f10:	3a01      	subs	r2, #1
 8002f12:	0652      	lsls	r2, r2, #25
 8002f14:	4311      	orrs	r1, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f1a:	06d2      	lsls	r2, r2, #27
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	4947      	ldr	r1, [pc, #284]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	4b45      	ldr	r3, [pc, #276]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a44      	ldr	r2, [pc, #272]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a41      	ldr	r2, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f906 	bl	800214c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7ff f902 	bl	800214c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e06e      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x530>
 8002f62:	e066      	b.n	8003032 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a34      	ldr	r2, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f70:	4b32      	ldr	r3, [pc, #200]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a31      	ldr	r2, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002f82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7ff f8de 	bl	800214c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7ff f8da 	bl	800214c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e046      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x580>
 8002fb2:	e03e      	b.n	8003032 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e039      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d12c      	bne.n	800302e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d123      	bne.n	800302e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d11b      	bne.n	800302e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d113      	bne.n	800302e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d109      	bne.n	800302e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	019f800c 	.word	0x019f800c

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e11e      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b91      	ldr	r3, [pc, #580]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d910      	bls.n	800308c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b8e      	ldr	r3, [pc, #568]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	498c      	ldr	r1, [pc, #560]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e106      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d073      	beq.n	8003180 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d129      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a0:	4b81      	ldr	r3, [pc, #516]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0f4      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030b0:	f000 f99e 	bl	80033f0 <RCC_GetSysClockFreqFromPLLSource>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4a7c      	ldr	r2, [pc, #496]	; (80032ac <HAL_RCC_ClockConfig+0x268>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d93f      	bls.n	800313e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030be:	4b7a      	ldr	r3, [pc, #488]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d033      	beq.n	800313e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d12f      	bne.n	800313e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030de:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e6:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e024      	b.n	800313e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0c6      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0be      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800311c:	f000 f8ce 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_RCC_ClockConfig+0x268>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d909      	bls.n	800313e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800312a:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003132:	4a5d      	ldr	r2, [pc, #372]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4957      	ldr	r1, [pc, #348]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe fffc 	bl	800214c <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7fe fff8 	bl	800214c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e095      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b43      	ldr	r3, [pc, #268]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a42      	ldr	r2, [pc, #264]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800319e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031da:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a32      	ldr	r2, [pc, #200]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d21d      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 020f 	bic.w	r2, r3, #15
 80031fc:	4929      	ldr	r1, [pc, #164]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003204:	f7fe ffa2 	bl	800214c <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe ff9e 	bl	800214c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e03b      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x260>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d1ed      	bne.n	800320c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490f      	ldr	r1, [pc, #60]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326e:	f000 f825 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490c      	ldr	r1, [pc, #48]	; (80032b0 <HAL_RCC_ClockConfig+0x26c>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x270>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe ff0e 	bl	80020b4 <HAL_InitTick>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	04c4b400 	.word	0x04c4b400
 80032b0:	080178d4 	.word	0x080178d4
 80032b4:	20000008 	.word	0x20000008
 80032b8:	2000000c 	.word	0x2000000c

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d102      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e047      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d102      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e03e      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d136      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3301      	adds	r3, #1
 8003308:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d10c      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003310:	4a1a      	ldr	r2, [pc, #104]	; (800337c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331a:	68d2      	ldr	r2, [r2, #12]
 800331c:	0a12      	lsrs	r2, r2, #8
 800331e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
      break;
 8003328:	e00c      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800332a:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	0a12      	lsrs	r2, r2, #8
 8003338:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800333c:	fb02 f303 	mul.w	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
      break;
 8003342:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0e5b      	lsrs	r3, r3, #25
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	3301      	adds	r3, #1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	e001      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003364:	693b      	ldr	r3, [r7, #16]
}
 8003366:	4618      	mov	r0, r3
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	00f42400 	.word	0x00f42400
 800337c:	016e3600 	.word	0x016e3600

08003380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000008 	.word	0x20000008

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	080178e4 	.word	0x080178e4

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c8:	f7ff ffda 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0adb      	lsrs	r3, r3, #11
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	080178e4 	.word	0x080178e4

080033f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d10c      	bne.n	800342e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800341e:	68d2      	ldr	r2, [r2, #12]
 8003420:	0a12      	lsrs	r2, r2, #8
 8003422:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
    break;
 800342c:	e00c      	b.n	8003448 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	4a0e      	ldr	r2, [pc, #56]	; (8003470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	0a12      	lsrs	r2, r2, #8
 800343c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    break;
 8003446:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0e5b      	lsrs	r3, r3, #25
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003462:	687b      	ldr	r3, [r7, #4]
}
 8003464:	4618      	mov	r0, r3
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40021000 	.word	0x40021000
 8003474:	016e3600 	.word	0x016e3600
 8003478:	00f42400 	.word	0x00f42400

0800347c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003484:	2300      	movs	r3, #0
 8003486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003488:	2300      	movs	r3, #0
 800348a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8098 	beq.w	80035ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6593      	str	r3, [r2, #88]	; 0x58
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c6:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a39      	ldr	r2, [pc, #228]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d2:	f7fe fe3b 	bl	800214c <HAL_GetTick>
 80034d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d8:	e009      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fe37 	bl	800214c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d902      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	74fb      	strb	r3, [r7, #19]
        break;
 80034ec:	e005      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ee:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ef      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d159      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01e      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	429a      	cmp	r2, r3
 800351a:	d019      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fdf7 	bl	800214c <HAL_GetTick>
 800355e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003560:	e00b      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fdf3 	bl	800214c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d902      	bls.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	74fb      	strb	r3, [r7, #19]
            break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ec      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035a4:	e008      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
 80035aa:	e005      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b8:	7c7b      	ldrb	r3, [r7, #17]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035be:	4ba6      	ldr	r3, [pc, #664]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	4aa5      	ldr	r2, [pc, #660]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d6:	4ba0      	ldr	r3, [pc, #640]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f023 0203 	bic.w	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	499c      	ldr	r1, [pc, #624]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f8:	4b97      	ldr	r3, [pc, #604]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f023 020c 	bic.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4994      	ldr	r1, [pc, #592]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800361a:	4b8f      	ldr	r3, [pc, #572]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	498b      	ldr	r1, [pc, #556]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800363c:	4b86      	ldr	r3, [pc, #536]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4983      	ldr	r1, [pc, #524]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800365e:	4b7e      	ldr	r3, [pc, #504]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	497a      	ldr	r1, [pc, #488]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003680:	4b75      	ldr	r3, [pc, #468]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	4972      	ldr	r1, [pc, #456]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a2:	4b6d      	ldr	r3, [pc, #436]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4969      	ldr	r1, [pc, #420]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c4:	4b64      	ldr	r3, [pc, #400]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4961      	ldr	r1, [pc, #388]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036e6:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4958      	ldr	r1, [pc, #352]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	4950      	ldr	r1, [pc, #320]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003728:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003732:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373c:	2b00      	cmp	r3, #0
 800373e:	d015      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003740:	4b45      	ldr	r3, [pc, #276]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4942      	ldr	r1, [pc, #264]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375e:	d105      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003760:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800376a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003778:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4934      	ldr	r1, [pc, #208]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003796:	d105      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a2e      	ldr	r2, [pc, #184]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b0:	4b29      	ldr	r3, [pc, #164]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	4926      	ldr	r1, [pc, #152]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ce:	d105      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d015      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4918      	ldr	r1, [pc, #96]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003812:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383e:	d105      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800384c:	7cbb      	ldrb	r3, [r7, #18]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000

0800385c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e049      	b.n	8003902 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe fade 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fdb8 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e04a      	b.n	80039ba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d018      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x6c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d013      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x6c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_TIM_Base_Start_IT+0xc0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x6c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x6c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x6c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d115      	bne.n	80039a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_TIM_Base_Start_IT+0xd0>)
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b06      	cmp	r3, #6
 8003988:	d015      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0xaa>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d011      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	e008      	b.n	80039b6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40013400 	.word	0x40013400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	00010007 	.word	0x00010007

080039e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e049      	b.n	8003a86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f841 	bl	8003a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 fcf6 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_PWM_Start+0x24>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e03c      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d109      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x3e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e02f      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start+0x58>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e022      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d109      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x72>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e015      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x8c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e008      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e097      	b.n	8003c7a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xb6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	e023      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0xc6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	e01b      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xd6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	e013      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b0c      	cmp	r3, #12
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0xe6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b88:	e00b      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0xf6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b98:	e003      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f852 	bl	8004c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <HAL_TIM_PWM_Start+0x1e0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x13e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <HAL_TIM_PWM_Start+0x1e4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x13e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <HAL_TIM_PWM_Start+0x1e8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x13e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <HAL_TIM_PWM_Start+0x1ec>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x13e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <HAL_TIM_PWM_Start+0x1f0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_Start+0x142>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_PWM_Start+0x144>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <HAL_TIM_PWM_Start+0x1e0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d018      	beq.n	8003c38 <HAL_TIM_PWM_Start+0x194>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d013      	beq.n	8003c38 <HAL_TIM_PWM_Start+0x194>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_TIM_PWM_Start+0x1f4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_TIM_PWM_Start+0x194>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_TIM_PWM_Start+0x1f8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_TIM_PWM_Start+0x194>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_TIM_PWM_Start+0x1e4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_PWM_Start+0x194>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_TIM_PWM_Start+0x1e8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d115      	bne.n	8003c64 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_TIM_PWM_Start+0x1fc>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d015      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x1d2>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c50:	d011      	beq.n	8003c76 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	e008      	b.n	8003c76 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e000      	b.n	8003c78 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40013400 	.word	0x40013400
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	00010007 	.word	0x00010007

08003ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0202 	mvn.w	r2, #2
 8003cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fb74 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fb66 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fb77 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0204 	mvn.w	r2, #4
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fb4a 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fb3c 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fb4d 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0208 	mvn.w	r2, #8
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fb20 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fb12 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fb23 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0210 	mvn.w	r2, #16
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 faf6 	bl	80043d4 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fae8 	bl	80043c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 faf9 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0201 	mvn.w	r2, #1
 8003e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fb96 	bl	8001554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d107      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 ffb2 	bl	8004db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e62:	d10e      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d107      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 ffa5 	bl	8004dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d10e      	bne.n	8003eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d107      	bne.n	8003eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 faa7 	bl	80043fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d10e      	bne.n	8003eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d107      	bne.n	8003eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f06f 0220 	mvn.w	r2, #32
 8003ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 ff65 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee8:	d10f      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ff6b 	bl	8004de0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f18:	d10f      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 ff5d 	bl	8004df4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f48:	d10f      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 ff4f 	bl	8004e08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f78:	d10f      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 ff41 	bl	8004e1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0ff      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b14      	cmp	r3, #20
 8003fce:	f200 80f0 	bhi.w	80041b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	080041b3 	.word	0x080041b3
 8003fe0:	080041b3 	.word	0x080041b3
 8003fe4:	080041b3 	.word	0x080041b3
 8003fe8:	0800406d 	.word	0x0800406d
 8003fec:	080041b3 	.word	0x080041b3
 8003ff0:	080041b3 	.word	0x080041b3
 8003ff4:	080041b3 	.word	0x080041b3
 8003ff8:	080040af 	.word	0x080040af
 8003ffc:	080041b3 	.word	0x080041b3
 8004000:	080041b3 	.word	0x080041b3
 8004004:	080041b3 	.word	0x080041b3
 8004008:	080040ef 	.word	0x080040ef
 800400c:	080041b3 	.word	0x080041b3
 8004010:	080041b3 	.word	0x080041b3
 8004014:	080041b3 	.word	0x080041b3
 8004018:	08004131 	.word	0x08004131
 800401c:	080041b3 	.word	0x080041b3
 8004020:	080041b3 	.word	0x080041b3
 8004024:	080041b3 	.word	0x080041b3
 8004028:	08004171 	.word	0x08004171
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fa7c 	bl	8004530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0208 	orr.w	r2, r2, #8
 8004046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6999      	ldr	r1, [r3, #24]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	619a      	str	r2, [r3, #24]
      break;
 800406a:	e0a5      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 faec 	bl	8004650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	619a      	str	r2, [r3, #24]
      break;
 80040ac:	e084      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fb55 	bl	8004764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0208 	orr.w	r2, r2, #8
 80040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0204 	bic.w	r2, r2, #4
 80040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	61da      	str	r2, [r3, #28]
      break;
 80040ec:	e064      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fbbd 	bl	8004874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	021a      	lsls	r2, r3, #8
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	61da      	str	r2, [r3, #28]
      break;
 800412e:	e043      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fc26 	bl	8004988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800416e:	e023      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fc6a 	bl	8004a50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041b0:	e002      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop

080041cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0de      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x1da>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a63      	ldr	r2, [pc, #396]	; (80043b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	f000 80a9 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 8004228:	4a61      	ldr	r2, [pc, #388]	; (80043b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	f200 80ae 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 8004230:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	f000 80a1 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 8004238:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	f200 80a6 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 8004240:	4a5d      	ldr	r2, [pc, #372]	; (80043b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f000 8099 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 8004248:	4a5b      	ldr	r2, [pc, #364]	; (80043b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	f200 809e 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 8004250:	4a5a      	ldr	r2, [pc, #360]	; (80043bc <HAL_TIM_ConfigClockSource+0x1f0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	f000 8091 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 8004258:	4a58      	ldr	r2, [pc, #352]	; (80043bc <HAL_TIM_ConfigClockSource+0x1f0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	f200 8096 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 8004260:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004264:	f000 8089 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 8004268:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800426c:	f200 808e 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0x128>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x1c6>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 800428c:	2b70      	cmp	r3, #112	; 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xfa>
 8004290:	2b70      	cmp	r3, #112	; 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 8004294:	2b60      	cmp	r3, #96	; 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x16e>
 8004298:	2b60      	cmp	r3, #96	; 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 800429c:	2b50      	cmp	r3, #80	; 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x14e>
 80042a0:	2b50      	cmp	r3, #80	; 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x18e>
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 80042ac:	2b30      	cmp	r3, #48	; 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x1ae>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f000 fc9d 	bl	8004c14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f000 fc86 	bl	8004c14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fbf8 	bl	8004b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fc51 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f000 fc17 	bl	8004b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	; 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fc41 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fbd8 	bl	8004b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fc31 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fc28 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	00100070 	.word	0x00100070
 80043b4:	00100040 	.word	0x00100040
 80043b8:	00100030 	.word	0x00100030
 80043bc:	00100020 	.word	0x00100020

080043c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3c      	ldr	r2, [pc, #240]	; (8004514 <TIM_Base_SetConfig+0x104>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a39      	ldr	r2, [pc, #228]	; (8004518 <TIM_Base_SetConfig+0x108>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <TIM_Base_SetConfig+0x10c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a37      	ldr	r2, [pc, #220]	; (8004520 <TIM_Base_SetConfig+0x110>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2d      	ldr	r2, [pc, #180]	; (8004514 <TIM_Base_SetConfig+0x104>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01b      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d017      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <TIM_Base_SetConfig+0x108>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <TIM_Base_SetConfig+0x10c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00f      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <TIM_Base_SetConfig+0x110>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <TIM_Base_SetConfig+0x114>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <TIM_Base_SetConfig+0x118>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a25      	ldr	r2, [pc, #148]	; (800452c <TIM_Base_SetConfig+0x11c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <TIM_Base_SetConfig+0x104>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00f      	beq.n	80044f8 <TIM_Base_SetConfig+0xe8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a11      	ldr	r2, [pc, #68]	; (8004520 <TIM_Base_SetConfig+0x110>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_Base_SetConfig+0xe8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_Base_SetConfig+0xe8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <TIM_Base_SetConfig+0x118>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_Base_SetConfig+0xe8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a0e      	ldr	r2, [pc, #56]	; (800452c <TIM_Base_SetConfig+0x11c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	615a      	str	r2, [r3, #20]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800

08004530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0303 	bic.w	r3, r3, #3
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f023 0302 	bic.w	r3, r3, #2
 800457c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a2c      	ldr	r2, [pc, #176]	; (800463c <TIM_OC1_SetConfig+0x10c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00f      	beq.n	80045b0 <TIM_OC1_SetConfig+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <TIM_OC1_SetConfig+0x110>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_OC1_SetConfig+0x80>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <TIM_OC1_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_OC1_SetConfig+0x80>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a29      	ldr	r2, [pc, #164]	; (8004648 <TIM_OC1_SetConfig+0x118>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC1_SetConfig+0x80>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a28      	ldr	r2, [pc, #160]	; (800464c <TIM_OC1_SetConfig+0x11c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10c      	bne.n	80045ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0308 	bic.w	r3, r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <TIM_OC1_SetConfig+0x10c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00f      	beq.n	80045f2 <TIM_OC1_SetConfig+0xc2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <TIM_OC1_SetConfig+0x110>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_OC1_SetConfig+0xc2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a19      	ldr	r2, [pc, #100]	; (8004644 <TIM_OC1_SetConfig+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_OC1_SetConfig+0xc2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a18      	ldr	r2, [pc, #96]	; (8004648 <TIM_OC1_SetConfig+0x118>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_OC1_SetConfig+0xc2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a17      	ldr	r2, [pc, #92]	; (800464c <TIM_OC1_SetConfig+0x11c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d111      	bne.n	8004616 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40013400 	.word	0x40013400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800

08004650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800467e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0320 	bic.w	r3, r3, #32
 800469e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a28      	ldr	r2, [pc, #160]	; (8004750 <TIM_OC2_SetConfig+0x100>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_OC2_SetConfig+0x6c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a27      	ldr	r2, [pc, #156]	; (8004754 <TIM_OC2_SetConfig+0x104>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d10d      	bne.n	80046d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <TIM_OC2_SetConfig+0x100>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00f      	beq.n	8004700 <TIM_OC2_SetConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <TIM_OC2_SetConfig+0x104>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_OC2_SetConfig+0xb0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <TIM_OC2_SetConfig+0x108>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_OC2_SetConfig+0xb0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a1a      	ldr	r2, [pc, #104]	; (800475c <TIM_OC2_SetConfig+0x10c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC2_SetConfig+0xb0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a19      	ldr	r2, [pc, #100]	; (8004760 <TIM_OC2_SetConfig+0x110>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d113      	bne.n	8004728 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800

08004764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a27      	ldr	r2, [pc, #156]	; (8004860 <TIM_OC3_SetConfig+0xfc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_OC3_SetConfig+0x6a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a26      	ldr	r2, [pc, #152]	; (8004864 <TIM_OC3_SetConfig+0x100>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10d      	bne.n	80047ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <TIM_OC3_SetConfig+0xfc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00f      	beq.n	8004812 <TIM_OC3_SetConfig+0xae>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <TIM_OC3_SetConfig+0x100>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00b      	beq.n	8004812 <TIM_OC3_SetConfig+0xae>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <TIM_OC3_SetConfig+0x104>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <TIM_OC3_SetConfig+0xae>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <TIM_OC3_SetConfig+0x108>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC3_SetConfig+0xae>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <TIM_OC3_SetConfig+0x10c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d113      	bne.n	800483a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40013400 	.word	0x40013400
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800

08004874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	031b      	lsls	r3, r3, #12
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_OC4_SetConfig+0x100>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_OC4_SetConfig+0x6c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a27      	ldr	r2, [pc, #156]	; (8004978 <TIM_OC4_SetConfig+0x104>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10d      	bne.n	80048fc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	031b      	lsls	r3, r3, #12
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <TIM_OC4_SetConfig+0x100>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00f      	beq.n	8004924 <TIM_OC4_SetConfig+0xb0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <TIM_OC4_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00b      	beq.n	8004924 <TIM_OC4_SetConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1b      	ldr	r2, [pc, #108]	; (800497c <TIM_OC4_SetConfig+0x108>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_OC4_SetConfig+0xb0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <TIM_OC4_SetConfig+0x10c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_OC4_SetConfig+0xb0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a19      	ldr	r2, [pc, #100]	; (8004984 <TIM_OC4_SetConfig+0x110>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d113      	bne.n	800494c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004932:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <TIM_OC5_SetConfig+0xb4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00f      	beq.n	8004a02 <TIM_OC5_SetConfig+0x7a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <TIM_OC5_SetConfig+0xb8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_OC5_SetConfig+0x7a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <TIM_OC5_SetConfig+0xbc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_OC5_SetConfig+0x7a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <TIM_OC5_SetConfig+0xc0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC5_SetConfig+0x7a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <TIM_OC5_SetConfig+0xc4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d109      	bne.n	8004a16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40013400 	.word	0x40013400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40014400 	.word	0x40014400
 8004a4c:	40014800 	.word	0x40014800

08004a50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	051b      	lsls	r3, r3, #20
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <TIM_OC6_SetConfig+0xb8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00f      	beq.n	8004acc <TIM_OC6_SetConfig+0x7c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <TIM_OC6_SetConfig+0xbc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_OC6_SetConfig+0x7c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <TIM_OC6_SetConfig+0xc0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC6_SetConfig+0x7c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <TIM_OC6_SetConfig+0xc4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC6_SetConfig+0x7c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <TIM_OC6_SetConfig+0xc8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d109      	bne.n	8004ae0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 030a 	bic.w	r3, r3, #10
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	031b      	lsls	r3, r3, #12
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f043 0307 	orr.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2201      	movs	r2, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1a      	ldr	r2, [r3, #32]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e065      	b.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2e:	d013      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d10c      	bne.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40013400 	.word	0x40013400
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40014000 	.word	0x40014000

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e042      	b.n	8004ec8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fc ff55 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2224      	movs	r2, #36	; 0x24
 8004e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fc50 	bl	8005718 <UART_SetConfig>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e022      	b.n	8004ec8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 ff10 	bl	8005cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 ff97 	bl	8005df4 <UART_CheckIdleState>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	f040 8083 	bne.w	8004ff2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Transmit+0x28>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e07b      	b.n	8004ff4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Transmit+0x3a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e074      	b.n	8004ff4 <HAL_UART_Transmit+0x124>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2221      	movs	r2, #33	; 0x21
 8004f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f22:	f7fd f913 	bl	800214c <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f40:	d108      	bne.n	8004f54 <HAL_UART_Transmit+0x84>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	e003      	b.n	8004f5c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004f64:	e02c      	b.n	8004fc0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2180      	movs	r1, #128	; 0x80
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 ff8a 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e039      	b.n	8004ff4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e007      	b.n	8004fae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	3301      	adds	r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1cc      	bne.n	8004f66 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 ff57 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e006      	b.n	8004ff4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	2b20      	cmp	r3, #32
 8005012:	d142      	bne.n	800509a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Receive_IT+0x24>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e03b      	b.n	800509c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_UART_Receive_IT+0x36>
 800502e:	2302      	movs	r3, #2
 8005030:	e034      	b.n	800509c <HAL_UART_Receive_IT+0xa0>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_UART_Receive_IT+0xa8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01f      	beq.n	800508a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d018      	beq.n	800508a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	613b      	str	r3, [r7, #16]
   return(result);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	69f9      	ldr	r1, [r7, #28]
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	61bb      	str	r3, [r7, #24]
   return(result);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	461a      	mov	r2, r3
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 ffc3 	bl	800601c <UART_Start_Receive_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	e000      	b.n	800509c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3728      	adds	r7, #40	; 0x28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40008000 	.word	0x40008000

080050a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b0ba      	sub	sp, #232	; 0xe8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80050d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80050d6:	4013      	ands	r3, r2
 80050d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80050dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11b      	bne.n	800511c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 82d6 	beq.w	80056be <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
      }
      return;
 800511a:	e2d0      	b.n	80056be <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800511c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 811f 	beq.w	8005364 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005126:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800512a:	4b8b      	ldr	r3, [pc, #556]	; (8005358 <HAL_UART_IRQHandler+0x2b0>)
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005132:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005136:	4b89      	ldr	r3, [pc, #548]	; (800535c <HAL_UART_IRQHandler+0x2b4>)
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8112 	beq.w	8005364 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d011      	beq.n	8005170 <HAL_UART_IRQHandler+0xc8>
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2201      	movs	r2, #1
 800515e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d011      	beq.n	80051a0 <HAL_UART_IRQHandler+0xf8>
 800517c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2202      	movs	r2, #2
 800518e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005196:	f043 0204 	orr.w	r2, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d011      	beq.n	80051d0 <HAL_UART_IRQHandler+0x128>
 80051ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2204      	movs	r2, #4
 80051be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c6:	f043 0202 	orr.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d017      	beq.n	800520c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80051e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051ec:	4b5a      	ldr	r3, [pc, #360]	; (8005358 <HAL_UART_IRQHandler+0x2b0>)
 80051ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2208      	movs	r2, #8
 80051fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005202:	f043 0208 	orr.w	r2, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800520c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005214:	2b00      	cmp	r3, #0
 8005216:	d012      	beq.n	800523e <HAL_UART_IRQHandler+0x196>
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800522c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 823c 	beq.w	80056c2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d013      	beq.n	800527e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800529a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04f      	beq.n	8005342 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 ffe4 	bl	8006270 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d141      	bne.n	800533a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1d9      	bne.n	80052b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d013      	beq.n	8005332 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530e:	4a14      	ldr	r2, [pc, #80]	; (8005360 <HAL_UART_IRQHandler+0x2b8>)
 8005310:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd f8ae 	bl	8002478 <HAL_DMA_Abort_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d017      	beq.n	8005352 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00f      	b.n	8005352 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9da 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e00b      	b.n	8005352 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9d6 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e007      	b.n	8005352 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9d2 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005350:	e1b7      	b.n	80056c2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005352:	bf00      	nop
    return;
 8005354:	e1b5      	b.n	80056c2 <HAL_UART_IRQHandler+0x61a>
 8005356:	bf00      	nop
 8005358:	10000001 	.word	0x10000001
 800535c:	04000120 	.word	0x04000120
 8005360:	0800633d 	.word	0x0800633d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005368:	2b01      	cmp	r3, #1
 800536a:	f040 814a 	bne.w	8005602 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8143 	beq.w	8005602 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 813c 	beq.w	8005602 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2210      	movs	r2, #16
 8005390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	f040 80b5 	bne.w	800550c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8187 	beq.w	80056c6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053c2:	429a      	cmp	r2, r3
 80053c4:	f080 817f 	bcs.w	80056c6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 8086 	bne.w	80054f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800540e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005412:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800541a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1da      	bne.n	80053e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800543e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005452:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005456:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800545a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e1      	bne.n	800542e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3308      	adds	r3, #8
 8005470:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800547a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800548e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005490:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800549c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e3      	bne.n	800546a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	f023 0310 	bic.w	r3, r3, #16
 80054c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e4      	bne.n	80054b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc ff6b 	bl	80023c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	b29b      	uxth	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8fb 	bl	8005700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800550a:	e0dc      	b.n	80056c6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005518:	b29b      	uxth	r3, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80ce 	beq.w	80056ca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800552e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80c9 	beq.w	80056ca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
 800555c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e4      	bne.n	8005538 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	623b      	str	r3, [r7, #32]
   return(result);
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005596:	633a      	str	r2, [r7, #48]	; 0x30
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e1      	bne.n	800556e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0310 	bic.w	r3, r3, #16
 80055d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	617b      	str	r3, [r7, #20]
   return(result);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e4      	bne.n	80055be <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f880 	bl	8005700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005600:	e063      	b.n	80056ca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00e      	beq.n	800562c <HAL_UART_IRQHandler+0x584>
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 fb27 	bl	8006c78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800562a:	e051      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	d014      	beq.n	8005662 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	2b00      	cmp	r3, #0
 8005656:	d03a      	beq.n	80056ce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
    }
    return;
 8005660:	e035      	b.n	80056ce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_UART_IRQHandler+0x5da>
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fe74 	bl	8006368 <UART_EndTransmit_IT>
    return;
 8005680:	e026      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_UART_IRQHandler+0x5fa>
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005692:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fb00 	bl	8006ca0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056a0:	e016      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_UART_IRQHandler+0x628>
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da0c      	bge.n	80056d0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fae8 	bl	8006c8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056bc:	e008      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
      return;
 80056be:	bf00      	nop
 80056c0:	e006      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
    return;
 80056c2:	bf00      	nop
 80056c4:	e004      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
      return;
 80056c6:	bf00      	nop
 80056c8:	e002      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
      return;
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <HAL_UART_IRQHandler+0x628>
    return;
 80056ce:	bf00      	nop
  }
}
 80056d0:	37e8      	adds	r7, #232	; 0xe8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop

080056d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800571c:	b08c      	sub	sp, #48	; 0x30
 800571e:	af00      	add	r7, sp, #0
 8005720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	431a      	orrs	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4313      	orrs	r3, r2
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4bab      	ldr	r3, [pc, #684]	; (80059f4 <UART_SetConfig+0x2dc>)
 8005748:	4013      	ands	r3, r2
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005750:	430b      	orrs	r3, r1
 8005752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4aa0      	ldr	r2, [pc, #640]	; (80059f8 <UART_SetConfig+0x2e0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d004      	beq.n	8005784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005780:	4313      	orrs	r3, r2
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800578e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005798:	430b      	orrs	r3, r1
 800579a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	f023 010f 	bic.w	r1, r3, #15
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a91      	ldr	r2, [pc, #580]	; (80059fc <UART_SetConfig+0x2e4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d125      	bne.n	8005808 <UART_SetConfig+0xf0>
 80057bc:	4b90      	ldr	r3, [pc, #576]	; (8005a00 <UART_SetConfig+0x2e8>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d81a      	bhi.n	8005800 <UART_SetConfig+0xe8>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0xb8>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e6:	e0d6      	b.n	8005996 <UART_SetConfig+0x27e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e0d2      	b.n	8005996 <UART_SetConfig+0x27e>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f6:	e0ce      	b.n	8005996 <UART_SetConfig+0x27e>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e0ca      	b.n	8005996 <UART_SetConfig+0x27e>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005806:	e0c6      	b.n	8005996 <UART_SetConfig+0x27e>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a7d      	ldr	r2, [pc, #500]	; (8005a04 <UART_SetConfig+0x2ec>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d138      	bne.n	8005884 <UART_SetConfig+0x16c>
 8005812:	4b7b      	ldr	r3, [pc, #492]	; (8005a00 <UART_SetConfig+0x2e8>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b0c      	cmp	r3, #12
 800581e:	d82d      	bhi.n	800587c <UART_SetConfig+0x164>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x110>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	0800585d 	.word	0x0800585d
 800582c:	0800587d 	.word	0x0800587d
 8005830:	0800587d 	.word	0x0800587d
 8005834:	0800587d 	.word	0x0800587d
 8005838:	0800586d 	.word	0x0800586d
 800583c:	0800587d 	.word	0x0800587d
 8005840:	0800587d 	.word	0x0800587d
 8005844:	0800587d 	.word	0x0800587d
 8005848:	08005865 	.word	0x08005865
 800584c:	0800587d 	.word	0x0800587d
 8005850:	0800587d 	.word	0x0800587d
 8005854:	0800587d 	.word	0x0800587d
 8005858:	08005875 	.word	0x08005875
 800585c:	2300      	movs	r3, #0
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e098      	b.n	8005996 <UART_SetConfig+0x27e>
 8005864:	2302      	movs	r3, #2
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e094      	b.n	8005996 <UART_SetConfig+0x27e>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005872:	e090      	b.n	8005996 <UART_SetConfig+0x27e>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587a:	e08c      	b.n	8005996 <UART_SetConfig+0x27e>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005882:	e088      	b.n	8005996 <UART_SetConfig+0x27e>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5f      	ldr	r2, [pc, #380]	; (8005a08 <UART_SetConfig+0x2f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d125      	bne.n	80058da <UART_SetConfig+0x1c2>
 800588e:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <UART_SetConfig+0x2e8>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d016      	beq.n	80058ca <UART_SetConfig+0x1b2>
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d818      	bhi.n	80058d2 <UART_SetConfig+0x1ba>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d00a      	beq.n	80058ba <UART_SetConfig+0x1a2>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d814      	bhi.n	80058d2 <UART_SetConfig+0x1ba>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <UART_SetConfig+0x19a>
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d008      	beq.n	80058c2 <UART_SetConfig+0x1aa>
 80058b0:	e00f      	b.n	80058d2 <UART_SetConfig+0x1ba>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b8:	e06d      	b.n	8005996 <UART_SetConfig+0x27e>
 80058ba:	2302      	movs	r3, #2
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c0:	e069      	b.n	8005996 <UART_SetConfig+0x27e>
 80058c2:	2304      	movs	r3, #4
 80058c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c8:	e065      	b.n	8005996 <UART_SetConfig+0x27e>
 80058ca:	2308      	movs	r3, #8
 80058cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d0:	e061      	b.n	8005996 <UART_SetConfig+0x27e>
 80058d2:	2310      	movs	r3, #16
 80058d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d8:	e05d      	b.n	8005996 <UART_SetConfig+0x27e>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a4b      	ldr	r2, [pc, #300]	; (8005a0c <UART_SetConfig+0x2f4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d125      	bne.n	8005930 <UART_SetConfig+0x218>
 80058e4:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <UART_SetConfig+0x2e8>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058ee:	2bc0      	cmp	r3, #192	; 0xc0
 80058f0:	d016      	beq.n	8005920 <UART_SetConfig+0x208>
 80058f2:	2bc0      	cmp	r3, #192	; 0xc0
 80058f4:	d818      	bhi.n	8005928 <UART_SetConfig+0x210>
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d00a      	beq.n	8005910 <UART_SetConfig+0x1f8>
 80058fa:	2b80      	cmp	r3, #128	; 0x80
 80058fc:	d814      	bhi.n	8005928 <UART_SetConfig+0x210>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <UART_SetConfig+0x1f0>
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d008      	beq.n	8005918 <UART_SetConfig+0x200>
 8005906:	e00f      	b.n	8005928 <UART_SetConfig+0x210>
 8005908:	2300      	movs	r3, #0
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e042      	b.n	8005996 <UART_SetConfig+0x27e>
 8005910:	2302      	movs	r3, #2
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e03e      	b.n	8005996 <UART_SetConfig+0x27e>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e03a      	b.n	8005996 <UART_SetConfig+0x27e>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e036      	b.n	8005996 <UART_SetConfig+0x27e>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e032      	b.n	8005996 <UART_SetConfig+0x27e>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a30      	ldr	r2, [pc, #192]	; (80059f8 <UART_SetConfig+0x2e0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d12a      	bne.n	8005990 <UART_SetConfig+0x278>
 800593a:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <UART_SetConfig+0x2e8>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005948:	d01a      	beq.n	8005980 <UART_SetConfig+0x268>
 800594a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800594e:	d81b      	bhi.n	8005988 <UART_SetConfig+0x270>
 8005950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005954:	d00c      	beq.n	8005970 <UART_SetConfig+0x258>
 8005956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595a:	d815      	bhi.n	8005988 <UART_SetConfig+0x270>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <UART_SetConfig+0x250>
 8005960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005964:	d008      	beq.n	8005978 <UART_SetConfig+0x260>
 8005966:	e00f      	b.n	8005988 <UART_SetConfig+0x270>
 8005968:	2300      	movs	r3, #0
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e012      	b.n	8005996 <UART_SetConfig+0x27e>
 8005970:	2302      	movs	r3, #2
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e00e      	b.n	8005996 <UART_SetConfig+0x27e>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597e:	e00a      	b.n	8005996 <UART_SetConfig+0x27e>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e006      	b.n	8005996 <UART_SetConfig+0x27e>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e002      	b.n	8005996 <UART_SetConfig+0x27e>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <UART_SetConfig+0x2e0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	f040 80a8 	bne.w	8005af2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d834      	bhi.n	8005a14 <UART_SetConfig+0x2fc>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0x298>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	08005a15 	.word	0x08005a15
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	08005a15 	.word	0x08005a15
 80059c0:	080059e3 	.word	0x080059e3
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fd fce0 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059da:	e021      	b.n	8005a20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <UART_SetConfig+0x2f8>)
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059e0:	e01e      	b.n	8005a20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fd fc6b 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059e8:	e01a      	b.n	8005a20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059f0:	e016      	b.n	8005a20 <UART_SetConfig+0x308>
 80059f2:	bf00      	nop
 80059f4:	cfff69f3 	.word	0xcfff69f3
 80059f8:	40008000 	.word	0x40008000
 80059fc:	40013800 	.word	0x40013800
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40004400 	.word	0x40004400
 8005a08:	40004800 	.word	0x40004800
 8005a0c:	40004c00 	.word	0x40004c00
 8005a10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 812a 	beq.w	8005c7c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	4a9e      	ldr	r2, [pc, #632]	; (8005ca8 <UART_SetConfig+0x590>)
 8005a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d305      	bcc.n	8005a58 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a5e:	e10d      	b.n	8005c7c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	2200      	movs	r2, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	60fa      	str	r2, [r7, #12]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	4a8e      	ldr	r2, [pc, #568]	; (8005ca8 <UART_SetConfig+0x590>)
 8005a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a82:	f7fb f87d 	bl	8000b80 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	020b      	lsls	r3, r1, #8
 8005a98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a9c:	0202      	lsls	r2, r0, #8
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	6849      	ldr	r1, [r1, #4]
 8005aa2:	0849      	lsrs	r1, r1, #1
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	eb12 0804 	adds.w	r8, r2, r4
 8005aae:	eb43 0905 	adc.w	r9, r3, r5
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	469a      	mov	sl, r3
 8005aba:	4693      	mov	fp, r2
 8005abc:	4652      	mov	r2, sl
 8005abe:	465b      	mov	r3, fp
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f7fb f85c 	bl	8000b80 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4613      	mov	r3, r2
 8005ace:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad6:	d308      	bcc.n	8005aea <UART_SetConfig+0x3d2>
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ade:	d204      	bcs.n	8005aea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	e0c8      	b.n	8005c7c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005af0:	e0c4      	b.n	8005c7c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d167      	bne.n	8005bcc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005afc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d828      	bhi.n	8005b56 <UART_SetConfig+0x43e>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x3f4>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b57 	.word	0x08005b57
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b57 	.word	0x08005b57
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b4f 	.word	0x08005b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fd fc32 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8005b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b36:	e014      	b.n	8005b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fd fc44 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b3e:	e010      	b.n	8005b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b5a      	ldr	r3, [pc, #360]	; (8005cac <UART_SetConfig+0x594>)
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b44:	e00d      	b.n	8005b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7fd fbb9 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8005b4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b4c:	e009      	b.n	8005b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b54:	e005      	b.n	8005b62 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8089 	beq.w	8005c7c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	4a4e      	ldr	r2, [pc, #312]	; (8005ca8 <UART_SetConfig+0x590>)
 8005b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b7c:	005a      	lsls	r2, r3, #1
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	441a      	add	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d916      	bls.n	8005bc4 <UART_SetConfig+0x4ac>
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9c:	d212      	bcs.n	8005bc4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f023 030f 	bic.w	r3, r3, #15
 8005ba6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	8bfb      	ldrh	r3, [r7, #30]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	8bfa      	ldrh	r2, [r7, #30]
 8005bc0:	60da      	str	r2, [r3, #12]
 8005bc2:	e05b      	b.n	8005c7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bca:	e057      	b.n	8005c7c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d828      	bhi.n	8005c26 <UART_SetConfig+0x50e>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x4c4>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	08005c27 	.word	0x08005c27
 8005bec:	08005c17 	.word	0x08005c17
 8005bf0:	08005c27 	.word	0x08005c27
 8005bf4:	08005c27 	.word	0x08005c27
 8005bf8:	08005c27 	.word	0x08005c27
 8005bfc:	08005c1f 	.word	0x08005c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fd fbca 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8005c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c06:	e014      	b.n	8005c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c08:	f7fd fbdc 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8005c0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c0e:	e010      	b.n	8005c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c10:	4b26      	ldr	r3, [pc, #152]	; (8005cac <UART_SetConfig+0x594>)
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c14:	e00d      	b.n	8005c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c16:	f7fd fb51 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8005c1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c1c:	e009      	b.n	8005c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c24:	e005      	b.n	8005c32 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c30:	bf00      	nop
    }

    if (pclk != 0U)
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d021      	beq.n	8005c7c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <UART_SetConfig+0x590>)
 8005c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	441a      	add	r2, r3
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	d909      	bls.n	8005c76 <UART_SetConfig+0x55e>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c68:	d205      	bcs.n	8005c76 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e002      	b.n	8005c7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2200      	movs	r2, #0
 8005c96:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3730      	adds	r7, #48	; 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca6:	bf00      	nop
 8005ca8:	080178ec 	.word	0x080178ec
 8005cac:	00f42400 	.word	0x00f42400

08005cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dae:	d10a      	bne.n	8005dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e04:	f7fc f9a2 	bl	800214c <HAL_GetTick>
 8005e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d10e      	bne.n	8005e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f82f 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e025      	b.n	8005e82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d10e      	bne.n	8005e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f819 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e00f      	b.n	8005e82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b09c      	sub	sp, #112	; 0x70
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9a:	e0a9      	b.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	f000 80a5 	beq.w	8005ff0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fc f951 	bl	800214c <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8005eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d140      	bne.n	8005f3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005edc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e069      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d051      	beq.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5a:	d149      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
 8005f86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e6      	bne.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fb8:	623a      	str	r2, [r7, #32]
 8005fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	69f9      	ldr	r1, [r7, #28]
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e5      	bne.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e010      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	429a      	cmp	r2, r3
 800600c:	f43f af46 	beq.w	8005e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3770      	adds	r7, #112	; 0x70
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601c:	b480      	push	{r7}
 800601e:	b0a3      	sub	sp, #140	; 0x8c
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	d10e      	bne.n	800606e <UART_Start_Receive_IT+0x52>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <UART_Start_Receive_IT+0x48>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800605e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006062:	e02d      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	22ff      	movs	r2, #255	; 0xff
 8006068:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800606c:	e028      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <UART_Start_Receive_IT+0x76>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <UART_Start_Receive_IT+0x6c>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006086:	e01b      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	227f      	movs	r2, #127	; 0x7f
 800608c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006090:	e016      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800609a:	d10d      	bne.n	80060b8 <UART_Start_Receive_IT+0x9c>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <UART_Start_Receive_IT+0x92>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	227f      	movs	r2, #127	; 0x7f
 80060a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060ac:	e008      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	223f      	movs	r2, #63	; 0x3f
 80060b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060b6:	e003      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2222      	movs	r2, #34	; 0x22
 80060cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3308      	adds	r3, #8
 80060d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80060e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80060f4:	673a      	str	r2, [r7, #112]	; 0x70
 80060f6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80060fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e3      	bne.n	80060d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006110:	d153      	bne.n	80061ba <UART_Start_Receive_IT+0x19e>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	429a      	cmp	r2, r3
 800611c:	d34d      	bcc.n	80061ba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	d107      	bne.n	8006138 <UART_Start_Receive_IT+0x11c>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a4b      	ldr	r2, [pc, #300]	; (8006260 <UART_Start_Receive_IT+0x244>)
 8006134:	671a      	str	r2, [r3, #112]	; 0x70
 8006136:	e002      	b.n	800613e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a4a      	ldr	r2, [pc, #296]	; (8006264 <UART_Start_Receive_IT+0x248>)
 800613c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01a      	beq.n	8006184 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006172:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006176:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e4      	bne.n	800614e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3308      	adds	r3, #8
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3308      	adds	r3, #8
 80061a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80061a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80061a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e5      	bne.n	8006184 <UART_Start_Receive_IT+0x168>
 80061b8:	e04a      	b.n	8006250 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d107      	bne.n	80061d4 <UART_Start_Receive_IT+0x1b8>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a26      	ldr	r2, [pc, #152]	; (8006268 <UART_Start_Receive_IT+0x24c>)
 80061d0:	671a      	str	r2, [r3, #112]	; 0x70
 80061d2:	e002      	b.n	80061da <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a25      	ldr	r2, [pc, #148]	; (800626c <UART_Start_Receive_IT+0x250>)
 80061d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d019      	beq.n	800621e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80061fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800620e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_Start_Receive_IT+0x1ce>
 800621c:	e018      	b.n	8006250 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	613b      	str	r3, [r7, #16]
   return(result);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f043 0320 	orr.w	r3, r3, #32
 8006232:	67bb      	str	r3, [r7, #120]	; 0x78
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69f9      	ldr	r1, [r7, #28]
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	61bb      	str	r3, [r7, #24]
   return(result);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	378c      	adds	r7, #140	; 0x8c
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	08006979 	.word	0x08006979
 8006264:	08006681 	.word	0x08006681
 8006268:	0800651f 	.word	0x0800651f
 800626c:	080063bf 	.word	0x080063bf

08006270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b095      	sub	sp, #84	; 0x54
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
 8006298:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800629c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e6      	bne.n	8006278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e3      	bne.n	80062aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d118      	bne.n	800631c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f023 0310 	bic.w	r3, r3, #16
 80062fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	613b      	str	r3, [r7, #16]
   return(result);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006330:	bf00      	nop
 8006332:	3754      	adds	r7, #84	; 0x54
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff f9c6 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	60bb      	str	r3, [r7, #8]
   return(result);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6979      	ldr	r1, [r7, #20]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	613b      	str	r3, [r7, #16]
   return(result);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e6      	bne.n	8006370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff f991 	bl	80056d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b6:	bf00      	nop
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b096      	sub	sp, #88	; 0x58
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80063cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	2b22      	cmp	r3, #34	; 0x22
 80063d8:	f040 8095 	bne.w	8006506 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80063ea:	b2d9      	uxtb	r1, r3
 80063ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	400a      	ands	r2, r1
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d178      	bne.n	8006516 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006442:	647b      	str	r3, [r7, #68]	; 0x44
 8006444:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e6      	bne.n	8006424 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	623b      	str	r3, [r7, #32]
   return(result);
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006476:	633a      	str	r2, [r7, #48]	; 0x30
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800647c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12e      	bne.n	80064fe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0310 	bic.w	r3, r3, #16
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	617b      	str	r3, [r7, #20]
   return(result);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d103      	bne.n	80064ee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2210      	movs	r2, #16
 80064ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff f902 	bl	8005700 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064fc:	e00b      	b.n	8006516 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fb f868 	bl	80015d4 <HAL_UART_RxCpltCallback>
}
 8006504:	e007      	b.n	8006516 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0208 	orr.w	r2, r2, #8
 8006514:	619a      	str	r2, [r3, #24]
}
 8006516:	bf00      	nop
 8006518:	3758      	adds	r7, #88	; 0x58
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b096      	sub	sp, #88	; 0x58
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800652c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	2b22      	cmp	r3, #34	; 0x22
 8006538:	f040 8095 	bne.w	8006666 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800654c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006550:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006554:	4013      	ands	r3, r2
 8006556:	b29a      	uxth	r2, r3
 8006558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d178      	bne.n	8006676 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
 80065a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e6      	bne.n	8006584 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d12e      	bne.n	800665e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	60bb      	str	r3, [r7, #8]
   return(result);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	647b      	str	r3, [r7, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b10      	cmp	r3, #16
 8006644:	d103      	bne.n	800664e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2210      	movs	r2, #16
 800664c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff f852 	bl	8005700 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800665c:	e00b      	b.n	8006676 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fa ffb8 	bl	80015d4 <HAL_UART_RxCpltCallback>
}
 8006664:	e007      	b.n	8006676 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0208 	orr.w	r2, r2, #8
 8006674:	619a      	str	r2, [r3, #24]
}
 8006676:	bf00      	nop
 8006678:	3758      	adds	r7, #88	; 0x58
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0a6      	sub	sp, #152	; 0x98
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800668e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b6:	2b22      	cmp	r3, #34	; 0x22
 80066b8:	f040 814f 	bne.w	800695a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066c6:	e0f6      	b.n	80068b6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80066d6:	b2d9      	uxtb	r1, r3
 80066d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	400a      	ands	r2, r1
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800670e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d053      	beq.n	80067c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800671a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006740:	f043 0201 	orr.w	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800674a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d011      	beq.n	800677a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2202      	movs	r2, #2
 8006768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006770:	f043 0204 	orr.w	r2, r3, #4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800677a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d011      	beq.n	80067aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2204      	movs	r2, #4
 8006798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a0:	f043 0202 	orr.w	r2, r3, #2
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d006      	beq.n	80067c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fe ff99 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d173      	bne.n	80068b6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80067dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80067f2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80067f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80067fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e4      	bne.n	80067ce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006828:	657a      	str	r2, [r7, #84]	; 0x54
 800682a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800682e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e3      	bne.n	8006804 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d12e      	bne.n	80068b0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	f023 0310 	bic.w	r3, r3, #16
 800686c:	67bb      	str	r3, [r7, #120]	; 0x78
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006876:	643b      	str	r3, [r7, #64]	; 0x40
 8006878:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800687c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d103      	bne.n	80068a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2210      	movs	r2, #16
 800689e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fe ff29 	bl	8005700 <HAL_UARTEx_RxEventCallback>
 80068ae:	e002      	b.n	80068b6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fa fe8f 	bl	80015d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d006      	beq.n	80068cc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80068be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f47f aefe 	bne.w	80066c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80068d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d045      	beq.n	800696a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d23e      	bcs.n	800696a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006902:	673b      	str	r3, [r7, #112]	; 0x70
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800690c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a14      	ldr	r2, [pc, #80]	; (8006974 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006924:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	60bb      	str	r3, [r7, #8]
   return(result);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f043 0320 	orr.w	r3, r3, #32
 800693a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6979      	ldr	r1, [r7, #20]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	613b      	str	r3, [r7, #16]
   return(result);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e6      	bne.n	8006926 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006958:	e007      	b.n	800696a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0208 	orr.w	r2, r2, #8
 8006968:	619a      	str	r2, [r3, #24]
}
 800696a:	bf00      	nop
 800696c:	3798      	adds	r7, #152	; 0x98
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	080063bf 	.word	0x080063bf

08006978 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0a8      	sub	sp, #160	; 0xa0
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006986:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	2b22      	cmp	r3, #34	; 0x22
 80069b0:	f040 8153 	bne.w	8006c5a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069be:	e0fa      	b.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80069d2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80069d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80069da:	4013      	ands	r3, r2
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	1c9a      	adds	r2, r3, #2
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d053      	beq.n	8006abe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d011      	beq.n	8006a46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00b      	beq.n	8006a46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a3c:	f043 0201 	orr.w	r2, r3, #1
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d011      	beq.n	8006a76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2202      	movs	r2, #2
 8006a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a6c:	f043 0204 	orr.w	r2, r3, #4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d011      	beq.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006a82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2204      	movs	r2, #4
 8006a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9c:	f043 0202 	orr.w	r2, r3, #2
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fe fe1b 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d175      	bne.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aee:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006af2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e4      	bne.n	8006aca <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b28:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e1      	bne.n	8006b00 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d12e      	bne.n	8006bb0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	f023 0310 	bic.w	r3, r3, #16
 8006b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b76:	647b      	str	r3, [r7, #68]	; 0x44
 8006b78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e6      	bne.n	8006b58 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d103      	bne.n	8006ba0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fe fda9 	bl	8005700 <HAL_UARTEx_RxEventCallback>
 8006bae:	e002      	b.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fa fd0f 	bl	80015d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bb6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d006      	beq.n	8006bcc <UART_RxISR_16BIT_FIFOEN+0x254>
 8006bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f47f aefa 	bne.w	80069c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bd6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d045      	beq.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006be4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d23e      	bcs.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c02:	677b      	str	r3, [r7, #116]	; 0x74
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c0c:	633a      	str	r2, [r7, #48]	; 0x30
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e5      	bne.n	8006bec <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006c24:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f043 0320 	orr.w	r3, r3, #32
 8006c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c58:	e007      	b.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0208 	orr.w	r2, r2, #8
 8006c68:	619a      	str	r2, [r3, #24]
}
 8006c6a:	bf00      	nop
 8006c6c:	37a0      	adds	r7, #160	; 0xa0
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	0800651f 	.word	0x0800651f

08006c78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d101      	bne.n	8006cca <HAL_UARTEx_DisableFifoMode+0x16>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e027      	b.n	8006d1a <HAL_UARTEx_DisableFifoMode+0x66>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2224      	movs	r2, #36	; 0x24
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0201 	bic.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e02d      	b.n	8006d9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2224      	movs	r2, #36	; 0x24
 8006d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f850 	bl	8006e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e02d      	b.n	8006e16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2224      	movs	r2, #36	; 0x24
 8006dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0201 	bic.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f812 	bl	8006e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d108      	bne.n	8006e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e40:	e031      	b.n	8006ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e42:	2308      	movs	r3, #8
 8006e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e46:	2308      	movs	r3, #8
 8006e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	0e5b      	lsrs	r3, r3, #25
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	0f5b      	lsrs	r3, r3, #29
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	7b3a      	ldrb	r2, [r7, #12]
 8006e6e:	4911      	ldr	r1, [pc, #68]	; (8006eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e70:	5c8a      	ldrb	r2, [r1, r2]
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e76:	7b3a      	ldrb	r2, [r7, #12]
 8006e78:	490f      	ldr	r1, [pc, #60]	; (8006eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	7b7a      	ldrb	r2, [r7, #13]
 8006e8c:	4909      	ldr	r1, [pc, #36]	; (8006eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e8e:	5c8a      	ldrb	r2, [r1, r2]
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e94:	7b7a      	ldrb	r2, [r7, #13]
 8006e96:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	08017904 	.word	0x08017904
 8006eb8:	0801790c 	.word	0x0801790c

08006ebc <__errno>:
 8006ebc:	4b01      	ldr	r3, [pc, #4]	; (8006ec4 <__errno+0x8>)
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000014 	.word	0x20000014

08006ec8 <__libc_init_array>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4d0d      	ldr	r5, [pc, #52]	; (8006f00 <__libc_init_array+0x38>)
 8006ecc:	4c0d      	ldr	r4, [pc, #52]	; (8006f04 <__libc_init_array+0x3c>)
 8006ece:	1b64      	subs	r4, r4, r5
 8006ed0:	10a4      	asrs	r4, r4, #2
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	42a6      	cmp	r6, r4
 8006ed6:	d109      	bne.n	8006eec <__libc_init_array+0x24>
 8006ed8:	4d0b      	ldr	r5, [pc, #44]	; (8006f08 <__libc_init_array+0x40>)
 8006eda:	4c0c      	ldr	r4, [pc, #48]	; (8006f0c <__libc_init_array+0x44>)
 8006edc:	f000 ff3a 	bl	8007d54 <_init>
 8006ee0:	1b64      	subs	r4, r4, r5
 8006ee2:	10a4      	asrs	r4, r4, #2
 8006ee4:	2600      	movs	r6, #0
 8006ee6:	42a6      	cmp	r6, r4
 8006ee8:	d105      	bne.n	8006ef6 <__libc_init_array+0x2e>
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef0:	4798      	blx	r3
 8006ef2:	3601      	adds	r6, #1
 8006ef4:	e7ee      	b.n	8006ed4 <__libc_init_array+0xc>
 8006ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efa:	4798      	blx	r3
 8006efc:	3601      	adds	r6, #1
 8006efe:	e7f2      	b.n	8006ee6 <__libc_init_array+0x1e>
 8006f00:	08017950 	.word	0x08017950
 8006f04:	08017950 	.word	0x08017950
 8006f08:	08017950 	.word	0x08017950
 8006f0c:	08017954 	.word	0x08017954

08006f10 <memset>:
 8006f10:	4402      	add	r2, r0
 8006f12:	4603      	mov	r3, r0
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d100      	bne.n	8006f1a <memset+0xa>
 8006f18:	4770      	bx	lr
 8006f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1e:	e7f9      	b.n	8006f14 <memset+0x4>

08006f20 <pow>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	ed2d 8b02 	vpush	{d8}
 8006f26:	eeb0 8a40 	vmov.f32	s16, s0
 8006f2a:	eef0 8a60 	vmov.f32	s17, s1
 8006f2e:	ec55 4b11 	vmov	r4, r5, d1
 8006f32:	f000 f865 	bl	8007000 <__ieee754_pow>
 8006f36:	4622      	mov	r2, r4
 8006f38:	462b      	mov	r3, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	ec57 6b10 	vmov	r6, r7, d0
 8006f42:	f7f9 fdbf 	bl	8000ac4 <__aeabi_dcmpun>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d13b      	bne.n	8006fc2 <pow+0xa2>
 8006f4a:	ec51 0b18 	vmov	r0, r1, d8
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2300      	movs	r3, #0
 8006f52:	f7f9 fd85 	bl	8000a60 <__aeabi_dcmpeq>
 8006f56:	b1b8      	cbz	r0, 8006f88 <pow+0x68>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	f7f9 fd7e 	bl	8000a60 <__aeabi_dcmpeq>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d146      	bne.n	8006ff6 <pow+0xd6>
 8006f68:	ec45 4b10 	vmov	d0, r4, r5
 8006f6c:	f000 fe61 	bl	8007c32 <finite>
 8006f70:	b338      	cbz	r0, 8006fc2 <pow+0xa2>
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 fd7b 	bl	8000a74 <__aeabi_dcmplt>
 8006f7e:	b300      	cbz	r0, 8006fc2 <pow+0xa2>
 8006f80:	f7ff ff9c 	bl	8006ebc <__errno>
 8006f84:	2322      	movs	r3, #34	; 0x22
 8006f86:	e01b      	b.n	8006fc0 <pow+0xa0>
 8006f88:	ec47 6b10 	vmov	d0, r6, r7
 8006f8c:	f000 fe51 	bl	8007c32 <finite>
 8006f90:	b9e0      	cbnz	r0, 8006fcc <pow+0xac>
 8006f92:	eeb0 0a48 	vmov.f32	s0, s16
 8006f96:	eef0 0a68 	vmov.f32	s1, s17
 8006f9a:	f000 fe4a 	bl	8007c32 <finite>
 8006f9e:	b1a8      	cbz	r0, 8006fcc <pow+0xac>
 8006fa0:	ec45 4b10 	vmov	d0, r4, r5
 8006fa4:	f000 fe45 	bl	8007c32 <finite>
 8006fa8:	b180      	cbz	r0, 8006fcc <pow+0xac>
 8006faa:	4632      	mov	r2, r6
 8006fac:	463b      	mov	r3, r7
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 fd87 	bl	8000ac4 <__aeabi_dcmpun>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d0e2      	beq.n	8006f80 <pow+0x60>
 8006fba:	f7ff ff7f 	bl	8006ebc <__errno>
 8006fbe:	2321      	movs	r3, #33	; 0x21
 8006fc0:	6003      	str	r3, [r0, #0]
 8006fc2:	ecbd 8b02 	vpop	{d8}
 8006fc6:	ec47 6b10 	vmov	d0, r6, r7
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 fd44 	bl	8000a60 <__aeabi_dcmpeq>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d0f2      	beq.n	8006fc2 <pow+0xa2>
 8006fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8006fe0:	eef0 0a68 	vmov.f32	s1, s17
 8006fe4:	f000 fe25 	bl	8007c32 <finite>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d0ea      	beq.n	8006fc2 <pow+0xa2>
 8006fec:	ec45 4b10 	vmov	d0, r4, r5
 8006ff0:	f000 fe1f 	bl	8007c32 <finite>
 8006ff4:	e7c3      	b.n	8006f7e <pow+0x5e>
 8006ff6:	4f01      	ldr	r7, [pc, #4]	; (8006ffc <pow+0xdc>)
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	e7e2      	b.n	8006fc2 <pow+0xa2>
 8006ffc:	3ff00000 	.word	0x3ff00000

08007000 <__ieee754_pow>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ed2d 8b06 	vpush	{d8-d10}
 8007008:	b089      	sub	sp, #36	; 0x24
 800700a:	ed8d 1b00 	vstr	d1, [sp]
 800700e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007012:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007016:	ea58 0102 	orrs.w	r1, r8, r2
 800701a:	ec57 6b10 	vmov	r6, r7, d0
 800701e:	d115      	bne.n	800704c <__ieee754_pow+0x4c>
 8007020:	19b3      	adds	r3, r6, r6
 8007022:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007026:	4152      	adcs	r2, r2
 8007028:	4299      	cmp	r1, r3
 800702a:	4b89      	ldr	r3, [pc, #548]	; (8007250 <__ieee754_pow+0x250>)
 800702c:	4193      	sbcs	r3, r2
 800702e:	f080 84d2 	bcs.w	80079d6 <__ieee754_pow+0x9d6>
 8007032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 f8f3 	bl	8000224 <__adddf3>
 800703e:	ec41 0b10 	vmov	d0, r0, r1
 8007042:	b009      	add	sp, #36	; 0x24
 8007044:	ecbd 8b06 	vpop	{d8-d10}
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	4b81      	ldr	r3, [pc, #516]	; (8007254 <__ieee754_pow+0x254>)
 800704e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007052:	429c      	cmp	r4, r3
 8007054:	ee10 aa10 	vmov	sl, s0
 8007058:	463d      	mov	r5, r7
 800705a:	dc06      	bgt.n	800706a <__ieee754_pow+0x6a>
 800705c:	d101      	bne.n	8007062 <__ieee754_pow+0x62>
 800705e:	2e00      	cmp	r6, #0
 8007060:	d1e7      	bne.n	8007032 <__ieee754_pow+0x32>
 8007062:	4598      	cmp	r8, r3
 8007064:	dc01      	bgt.n	800706a <__ieee754_pow+0x6a>
 8007066:	d10f      	bne.n	8007088 <__ieee754_pow+0x88>
 8007068:	b172      	cbz	r2, 8007088 <__ieee754_pow+0x88>
 800706a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800706e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007072:	ea55 050a 	orrs.w	r5, r5, sl
 8007076:	d1dc      	bne.n	8007032 <__ieee754_pow+0x32>
 8007078:	e9dd 3200 	ldrd	r3, r2, [sp]
 800707c:	18db      	adds	r3, r3, r3
 800707e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007082:	4152      	adcs	r2, r2
 8007084:	429d      	cmp	r5, r3
 8007086:	e7d0      	b.n	800702a <__ieee754_pow+0x2a>
 8007088:	2d00      	cmp	r5, #0
 800708a:	da3b      	bge.n	8007104 <__ieee754_pow+0x104>
 800708c:	4b72      	ldr	r3, [pc, #456]	; (8007258 <__ieee754_pow+0x258>)
 800708e:	4598      	cmp	r8, r3
 8007090:	dc51      	bgt.n	8007136 <__ieee754_pow+0x136>
 8007092:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007096:	4598      	cmp	r8, r3
 8007098:	f340 84ac 	ble.w	80079f4 <__ieee754_pow+0x9f4>
 800709c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80070a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070a4:	2b14      	cmp	r3, #20
 80070a6:	dd0f      	ble.n	80070c8 <__ieee754_pow+0xc8>
 80070a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80070ac:	fa22 f103 	lsr.w	r1, r2, r3
 80070b0:	fa01 f303 	lsl.w	r3, r1, r3
 80070b4:	4293      	cmp	r3, r2
 80070b6:	f040 849d 	bne.w	80079f4 <__ieee754_pow+0x9f4>
 80070ba:	f001 0101 	and.w	r1, r1, #1
 80070be:	f1c1 0302 	rsb	r3, r1, #2
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	b182      	cbz	r2, 80070e8 <__ieee754_pow+0xe8>
 80070c6:	e05f      	b.n	8007188 <__ieee754_pow+0x188>
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	d15b      	bne.n	8007184 <__ieee754_pow+0x184>
 80070cc:	f1c3 0314 	rsb	r3, r3, #20
 80070d0:	fa48 f103 	asr.w	r1, r8, r3
 80070d4:	fa01 f303 	lsl.w	r3, r1, r3
 80070d8:	4543      	cmp	r3, r8
 80070da:	f040 8488 	bne.w	80079ee <__ieee754_pow+0x9ee>
 80070de:	f001 0101 	and.w	r1, r1, #1
 80070e2:	f1c1 0302 	rsb	r3, r1, #2
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	4b5c      	ldr	r3, [pc, #368]	; (800725c <__ieee754_pow+0x25c>)
 80070ea:	4598      	cmp	r8, r3
 80070ec:	d132      	bne.n	8007154 <__ieee754_pow+0x154>
 80070ee:	f1b9 0f00 	cmp.w	r9, #0
 80070f2:	f280 8478 	bge.w	80079e6 <__ieee754_pow+0x9e6>
 80070f6:	4959      	ldr	r1, [pc, #356]	; (800725c <__ieee754_pow+0x25c>)
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	2000      	movs	r0, #0
 80070fe:	f7f9 fb71 	bl	80007e4 <__aeabi_ddiv>
 8007102:	e79c      	b.n	800703e <__ieee754_pow+0x3e>
 8007104:	2300      	movs	r3, #0
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	2a00      	cmp	r2, #0
 800710a:	d13d      	bne.n	8007188 <__ieee754_pow+0x188>
 800710c:	4b51      	ldr	r3, [pc, #324]	; (8007254 <__ieee754_pow+0x254>)
 800710e:	4598      	cmp	r8, r3
 8007110:	d1ea      	bne.n	80070e8 <__ieee754_pow+0xe8>
 8007112:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007116:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800711a:	ea53 030a 	orrs.w	r3, r3, sl
 800711e:	f000 845a 	beq.w	80079d6 <__ieee754_pow+0x9d6>
 8007122:	4b4f      	ldr	r3, [pc, #316]	; (8007260 <__ieee754_pow+0x260>)
 8007124:	429c      	cmp	r4, r3
 8007126:	dd08      	ble.n	800713a <__ieee754_pow+0x13a>
 8007128:	f1b9 0f00 	cmp.w	r9, #0
 800712c:	f2c0 8457 	blt.w	80079de <__ieee754_pow+0x9de>
 8007130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007134:	e783      	b.n	800703e <__ieee754_pow+0x3e>
 8007136:	2302      	movs	r3, #2
 8007138:	e7e5      	b.n	8007106 <__ieee754_pow+0x106>
 800713a:	f1b9 0f00 	cmp.w	r9, #0
 800713e:	f04f 0000 	mov.w	r0, #0
 8007142:	f04f 0100 	mov.w	r1, #0
 8007146:	f6bf af7a 	bge.w	800703e <__ieee754_pow+0x3e>
 800714a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800714e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007152:	e774      	b.n	800703e <__ieee754_pow+0x3e>
 8007154:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007158:	d106      	bne.n	8007168 <__ieee754_pow+0x168>
 800715a:	4632      	mov	r2, r6
 800715c:	463b      	mov	r3, r7
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fa15 	bl	8000590 <__aeabi_dmul>
 8007166:	e76a      	b.n	800703e <__ieee754_pow+0x3e>
 8007168:	4b3e      	ldr	r3, [pc, #248]	; (8007264 <__ieee754_pow+0x264>)
 800716a:	4599      	cmp	r9, r3
 800716c:	d10c      	bne.n	8007188 <__ieee754_pow+0x188>
 800716e:	2d00      	cmp	r5, #0
 8007170:	db0a      	blt.n	8007188 <__ieee754_pow+0x188>
 8007172:	ec47 6b10 	vmov	d0, r6, r7
 8007176:	b009      	add	sp, #36	; 0x24
 8007178:	ecbd 8b06 	vpop	{d8-d10}
 800717c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	f000 bc6c 	b.w	8007a5c <__ieee754_sqrt>
 8007184:	2300      	movs	r3, #0
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	ec47 6b10 	vmov	d0, r6, r7
 800718c:	f000 fd48 	bl	8007c20 <fabs>
 8007190:	ec51 0b10 	vmov	r0, r1, d0
 8007194:	f1ba 0f00 	cmp.w	sl, #0
 8007198:	d129      	bne.n	80071ee <__ieee754_pow+0x1ee>
 800719a:	b124      	cbz	r4, 80071a6 <__ieee754_pow+0x1a6>
 800719c:	4b2f      	ldr	r3, [pc, #188]	; (800725c <__ieee754_pow+0x25c>)
 800719e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d123      	bne.n	80071ee <__ieee754_pow+0x1ee>
 80071a6:	f1b9 0f00 	cmp.w	r9, #0
 80071aa:	da05      	bge.n	80071b8 <__ieee754_pow+0x1b8>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	2000      	movs	r0, #0
 80071b2:	492a      	ldr	r1, [pc, #168]	; (800725c <__ieee754_pow+0x25c>)
 80071b4:	f7f9 fb16 	bl	80007e4 <__aeabi_ddiv>
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	f6bf af40 	bge.w	800703e <__ieee754_pow+0x3e>
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80071c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80071c8:	4323      	orrs	r3, r4
 80071ca:	d108      	bne.n	80071de <__ieee754_pow+0x1de>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4610      	mov	r0, r2
 80071d2:	4619      	mov	r1, r3
 80071d4:	f7f9 f824 	bl	8000220 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	e78f      	b.n	80070fe <__ieee754_pow+0xfe>
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f47f af2c 	bne.w	800703e <__ieee754_pow+0x3e>
 80071e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ea:	4619      	mov	r1, r3
 80071ec:	e727      	b.n	800703e <__ieee754_pow+0x3e>
 80071ee:	0feb      	lsrs	r3, r5, #31
 80071f0:	3b01      	subs	r3, #1
 80071f2:	9306      	str	r3, [sp, #24]
 80071f4:	9a06      	ldr	r2, [sp, #24]
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d102      	bne.n	8007202 <__ieee754_pow+0x202>
 80071fc:	4632      	mov	r2, r6
 80071fe:	463b      	mov	r3, r7
 8007200:	e7e6      	b.n	80071d0 <__ieee754_pow+0x1d0>
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <__ieee754_pow+0x268>)
 8007204:	4598      	cmp	r8, r3
 8007206:	f340 80fb 	ble.w	8007400 <__ieee754_pow+0x400>
 800720a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800720e:	4598      	cmp	r8, r3
 8007210:	4b13      	ldr	r3, [pc, #76]	; (8007260 <__ieee754_pow+0x260>)
 8007212:	dd0c      	ble.n	800722e <__ieee754_pow+0x22e>
 8007214:	429c      	cmp	r4, r3
 8007216:	dc0f      	bgt.n	8007238 <__ieee754_pow+0x238>
 8007218:	f1b9 0f00 	cmp.w	r9, #0
 800721c:	da0f      	bge.n	800723e <__ieee754_pow+0x23e>
 800721e:	2000      	movs	r0, #0
 8007220:	b009      	add	sp, #36	; 0x24
 8007222:	ecbd 8b06 	vpop	{d8-d10}
 8007226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	f000 bcf0 	b.w	8007c0e <__math_oflow>
 800722e:	429c      	cmp	r4, r3
 8007230:	dbf2      	blt.n	8007218 <__ieee754_pow+0x218>
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <__ieee754_pow+0x25c>)
 8007234:	429c      	cmp	r4, r3
 8007236:	dd19      	ble.n	800726c <__ieee754_pow+0x26c>
 8007238:	f1b9 0f00 	cmp.w	r9, #0
 800723c:	dcef      	bgt.n	800721e <__ieee754_pow+0x21e>
 800723e:	2000      	movs	r0, #0
 8007240:	b009      	add	sp, #36	; 0x24
 8007242:	ecbd 8b06 	vpop	{d8-d10}
 8007246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f000 bcd7 	b.w	8007bfc <__math_uflow>
 800724e:	bf00      	nop
 8007250:	fff00000 	.word	0xfff00000
 8007254:	7ff00000 	.word	0x7ff00000
 8007258:	433fffff 	.word	0x433fffff
 800725c:	3ff00000 	.word	0x3ff00000
 8007260:	3fefffff 	.word	0x3fefffff
 8007264:	3fe00000 	.word	0x3fe00000
 8007268:	41e00000 	.word	0x41e00000
 800726c:	4b60      	ldr	r3, [pc, #384]	; (80073f0 <__ieee754_pow+0x3f0>)
 800726e:	2200      	movs	r2, #0
 8007270:	f7f8 ffd6 	bl	8000220 <__aeabi_dsub>
 8007274:	a354      	add	r3, pc, #336	; (adr r3, 80073c8 <__ieee754_pow+0x3c8>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	4604      	mov	r4, r0
 800727c:	460d      	mov	r5, r1
 800727e:	f7f9 f987 	bl	8000590 <__aeabi_dmul>
 8007282:	a353      	add	r3, pc, #332	; (adr r3, 80073d0 <__ieee754_pow+0x3d0>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	f7f9 f97e 	bl	8000590 <__aeabi_dmul>
 8007294:	4b57      	ldr	r3, [pc, #348]	; (80073f4 <__ieee754_pow+0x3f4>)
 8007296:	4682      	mov	sl, r0
 8007298:	468b      	mov	fp, r1
 800729a:	2200      	movs	r2, #0
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 f976 	bl	8000590 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	a14b      	add	r1, pc, #300	; (adr r1, 80073d8 <__ieee754_pow+0x3d8>)
 80072aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ae:	f7f8 ffb7 	bl	8000220 <__aeabi_dsub>
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f7f9 f96b 	bl	8000590 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	2000      	movs	r0, #0
 80072c0:	494d      	ldr	r1, [pc, #308]	; (80073f8 <__ieee754_pow+0x3f8>)
 80072c2:	f7f8 ffad 	bl	8000220 <__aeabi_dsub>
 80072c6:	4622      	mov	r2, r4
 80072c8:	4680      	mov	r8, r0
 80072ca:	4689      	mov	r9, r1
 80072cc:	462b      	mov	r3, r5
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 f95d 	bl	8000590 <__aeabi_dmul>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4640      	mov	r0, r8
 80072dc:	4649      	mov	r1, r9
 80072de:	f7f9 f957 	bl	8000590 <__aeabi_dmul>
 80072e2:	a33f      	add	r3, pc, #252	; (adr r3, 80073e0 <__ieee754_pow+0x3e0>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f9 f952 	bl	8000590 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4650      	mov	r0, sl
 80072f2:	4659      	mov	r1, fp
 80072f4:	f7f8 ff94 	bl	8000220 <__aeabi_dsub>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ff8e 	bl	8000224 <__adddf3>
 8007308:	2000      	movs	r0, #0
 800730a:	4632      	mov	r2, r6
 800730c:	463b      	mov	r3, r7
 800730e:	4604      	mov	r4, r0
 8007310:	460d      	mov	r5, r1
 8007312:	f7f8 ff85 	bl	8000220 <__aeabi_dsub>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	f7f8 ff7f 	bl	8000220 <__aeabi_dsub>
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	3b01      	subs	r3, #1
 8007328:	4313      	orrs	r3, r2
 800732a:	4682      	mov	sl, r0
 800732c:	468b      	mov	fp, r1
 800732e:	f040 81e7 	bne.w	8007700 <__ieee754_pow+0x700>
 8007332:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80073e8 <__ieee754_pow+0x3e8>
 8007336:	eeb0 8a47 	vmov.f32	s16, s14
 800733a:	eef0 8a67 	vmov.f32	s17, s15
 800733e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007342:	2600      	movs	r6, #0
 8007344:	4632      	mov	r2, r6
 8007346:	463b      	mov	r3, r7
 8007348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800734c:	f7f8 ff68 	bl	8000220 <__aeabi_dsub>
 8007350:	4622      	mov	r2, r4
 8007352:	462b      	mov	r3, r5
 8007354:	f7f9 f91c 	bl	8000590 <__aeabi_dmul>
 8007358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735c:	4680      	mov	r8, r0
 800735e:	4689      	mov	r9, r1
 8007360:	4650      	mov	r0, sl
 8007362:	4659      	mov	r1, fp
 8007364:	f7f9 f914 	bl	8000590 <__aeabi_dmul>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4640      	mov	r0, r8
 800736e:	4649      	mov	r1, r9
 8007370:	f7f8 ff58 	bl	8000224 <__adddf3>
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	4680      	mov	r8, r0
 800737a:	4689      	mov	r9, r1
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f9 f906 	bl	8000590 <__aeabi_dmul>
 8007384:	460b      	mov	r3, r1
 8007386:	4604      	mov	r4, r0
 8007388:	460d      	mov	r5, r1
 800738a:	4602      	mov	r2, r0
 800738c:	4649      	mov	r1, r9
 800738e:	4640      	mov	r0, r8
 8007390:	f7f8 ff48 	bl	8000224 <__adddf3>
 8007394:	4b19      	ldr	r3, [pc, #100]	; (80073fc <__ieee754_pow+0x3fc>)
 8007396:	4299      	cmp	r1, r3
 8007398:	ec45 4b19 	vmov	d9, r4, r5
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	468b      	mov	fp, r1
 80073a2:	f340 82f1 	ble.w	8007988 <__ieee754_pow+0x988>
 80073a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80073aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80073ae:	4303      	orrs	r3, r0
 80073b0:	f000 81e4 	beq.w	800777c <__ieee754_pow+0x77c>
 80073b4:	ec51 0b18 	vmov	r0, r1, d8
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	f7f9 fb5a 	bl	8000a74 <__aeabi_dcmplt>
 80073c0:	3800      	subs	r0, #0
 80073c2:	bf18      	it	ne
 80073c4:	2001      	movne	r0, #1
 80073c6:	e72b      	b.n	8007220 <__ieee754_pow+0x220>
 80073c8:	60000000 	.word	0x60000000
 80073cc:	3ff71547 	.word	0x3ff71547
 80073d0:	f85ddf44 	.word	0xf85ddf44
 80073d4:	3e54ae0b 	.word	0x3e54ae0b
 80073d8:	55555555 	.word	0x55555555
 80073dc:	3fd55555 	.word	0x3fd55555
 80073e0:	652b82fe 	.word	0x652b82fe
 80073e4:	3ff71547 	.word	0x3ff71547
 80073e8:	00000000 	.word	0x00000000
 80073ec:	bff00000 	.word	0xbff00000
 80073f0:	3ff00000 	.word	0x3ff00000
 80073f4:	3fd00000 	.word	0x3fd00000
 80073f8:	3fe00000 	.word	0x3fe00000
 80073fc:	408fffff 	.word	0x408fffff
 8007400:	4bd5      	ldr	r3, [pc, #852]	; (8007758 <__ieee754_pow+0x758>)
 8007402:	402b      	ands	r3, r5
 8007404:	2200      	movs	r2, #0
 8007406:	b92b      	cbnz	r3, 8007414 <__ieee754_pow+0x414>
 8007408:	4bd4      	ldr	r3, [pc, #848]	; (800775c <__ieee754_pow+0x75c>)
 800740a:	f7f9 f8c1 	bl	8000590 <__aeabi_dmul>
 800740e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007412:	460c      	mov	r4, r1
 8007414:	1523      	asrs	r3, r4, #20
 8007416:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800741a:	4413      	add	r3, r2
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	4bd0      	ldr	r3, [pc, #832]	; (8007760 <__ieee754_pow+0x760>)
 8007420:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007424:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007428:	429c      	cmp	r4, r3
 800742a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800742e:	dd08      	ble.n	8007442 <__ieee754_pow+0x442>
 8007430:	4bcc      	ldr	r3, [pc, #816]	; (8007764 <__ieee754_pow+0x764>)
 8007432:	429c      	cmp	r4, r3
 8007434:	f340 8162 	ble.w	80076fc <__ieee754_pow+0x6fc>
 8007438:	9b05      	ldr	r3, [sp, #20]
 800743a:	3301      	adds	r3, #1
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007442:	2400      	movs	r4, #0
 8007444:	00e3      	lsls	r3, r4, #3
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	4bc7      	ldr	r3, [pc, #796]	; (8007768 <__ieee754_pow+0x768>)
 800744a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800744e:	ed93 7b00 	vldr	d7, [r3]
 8007452:	4629      	mov	r1, r5
 8007454:	ec53 2b17 	vmov	r2, r3, d7
 8007458:	eeb0 9a47 	vmov.f32	s18, s14
 800745c:	eef0 9a67 	vmov.f32	s19, s15
 8007460:	4682      	mov	sl, r0
 8007462:	f7f8 fedd 	bl	8000220 <__aeabi_dsub>
 8007466:	4652      	mov	r2, sl
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	462b      	mov	r3, r5
 800746e:	ec51 0b19 	vmov	r0, r1, d9
 8007472:	f7f8 fed7 	bl	8000224 <__adddf3>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	2000      	movs	r0, #0
 800747c:	49bb      	ldr	r1, [pc, #748]	; (800776c <__ieee754_pow+0x76c>)
 800747e:	f7f9 f9b1 	bl	80007e4 <__aeabi_ddiv>
 8007482:	ec41 0b1a 	vmov	d10, r0, r1
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7f9 f87f 	bl	8000590 <__aeabi_dmul>
 8007492:	2300      	movs	r3, #0
 8007494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800749e:	46ab      	mov	fp, r5
 80074a0:	106d      	asrs	r5, r5, #1
 80074a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80074a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80074aa:	ec41 0b18 	vmov	d8, r0, r1
 80074ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80074b2:	2200      	movs	r2, #0
 80074b4:	4640      	mov	r0, r8
 80074b6:	4649      	mov	r1, r9
 80074b8:	4614      	mov	r4, r2
 80074ba:	461d      	mov	r5, r3
 80074bc:	f7f9 f868 	bl	8000590 <__aeabi_dmul>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f8 feaa 	bl	8000220 <__aeabi_dsub>
 80074cc:	ec53 2b19 	vmov	r2, r3, d9
 80074d0:	4606      	mov	r6, r0
 80074d2:	460f      	mov	r7, r1
 80074d4:	4620      	mov	r0, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	f7f8 fea2 	bl	8000220 <__aeabi_dsub>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4650      	mov	r0, sl
 80074e2:	4659      	mov	r1, fp
 80074e4:	f7f8 fe9c 	bl	8000220 <__aeabi_dsub>
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	f7f9 f850 	bl	8000590 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4630      	mov	r0, r6
 80074f6:	4639      	mov	r1, r7
 80074f8:	f7f8 fe92 	bl	8000220 <__aeabi_dsub>
 80074fc:	ec53 2b1a 	vmov	r2, r3, d10
 8007500:	f7f9 f846 	bl	8000590 <__aeabi_dmul>
 8007504:	ec53 2b18 	vmov	r2, r3, d8
 8007508:	ec41 0b19 	vmov	d9, r0, r1
 800750c:	ec51 0b18 	vmov	r0, r1, d8
 8007510:	f7f9 f83e 	bl	8000590 <__aeabi_dmul>
 8007514:	a37c      	add	r3, pc, #496	; (adr r3, 8007708 <__ieee754_pow+0x708>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	4604      	mov	r4, r0
 800751c:	460d      	mov	r5, r1
 800751e:	f7f9 f837 	bl	8000590 <__aeabi_dmul>
 8007522:	a37b      	add	r3, pc, #492	; (adr r3, 8007710 <__ieee754_pow+0x710>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f8 fe7c 	bl	8000224 <__adddf3>
 800752c:	4622      	mov	r2, r4
 800752e:	462b      	mov	r3, r5
 8007530:	f7f9 f82e 	bl	8000590 <__aeabi_dmul>
 8007534:	a378      	add	r3, pc, #480	; (adr r3, 8007718 <__ieee754_pow+0x718>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f8 fe73 	bl	8000224 <__adddf3>
 800753e:	4622      	mov	r2, r4
 8007540:	462b      	mov	r3, r5
 8007542:	f7f9 f825 	bl	8000590 <__aeabi_dmul>
 8007546:	a376      	add	r3, pc, #472	; (adr r3, 8007720 <__ieee754_pow+0x720>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f7f8 fe6a 	bl	8000224 <__adddf3>
 8007550:	4622      	mov	r2, r4
 8007552:	462b      	mov	r3, r5
 8007554:	f7f9 f81c 	bl	8000590 <__aeabi_dmul>
 8007558:	a373      	add	r3, pc, #460	; (adr r3, 8007728 <__ieee754_pow+0x728>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 fe61 	bl	8000224 <__adddf3>
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	f7f9 f813 	bl	8000590 <__aeabi_dmul>
 800756a:	a371      	add	r3, pc, #452	; (adr r3, 8007730 <__ieee754_pow+0x730>)
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	f7f8 fe58 	bl	8000224 <__adddf3>
 8007574:	4622      	mov	r2, r4
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	462b      	mov	r3, r5
 800757c:	4620      	mov	r0, r4
 800757e:	4629      	mov	r1, r5
 8007580:	f7f9 f806 	bl	8000590 <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f9 f800 	bl	8000590 <__aeabi_dmul>
 8007590:	4642      	mov	r2, r8
 8007592:	4604      	mov	r4, r0
 8007594:	460d      	mov	r5, r1
 8007596:	464b      	mov	r3, r9
 8007598:	ec51 0b18 	vmov	r0, r1, d8
 800759c:	f7f8 fe42 	bl	8000224 <__adddf3>
 80075a0:	ec53 2b19 	vmov	r2, r3, d9
 80075a4:	f7f8 fff4 	bl	8000590 <__aeabi_dmul>
 80075a8:	4622      	mov	r2, r4
 80075aa:	462b      	mov	r3, r5
 80075ac:	f7f8 fe3a 	bl	8000224 <__adddf3>
 80075b0:	4642      	mov	r2, r8
 80075b2:	4682      	mov	sl, r0
 80075b4:	468b      	mov	fp, r1
 80075b6:	464b      	mov	r3, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f8 ffe8 	bl	8000590 <__aeabi_dmul>
 80075c0:	4b6b      	ldr	r3, [pc, #428]	; (8007770 <__ieee754_pow+0x770>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	4606      	mov	r6, r0
 80075c6:	460f      	mov	r7, r1
 80075c8:	f7f8 fe2c 	bl	8000224 <__adddf3>
 80075cc:	4652      	mov	r2, sl
 80075ce:	465b      	mov	r3, fp
 80075d0:	f7f8 fe28 	bl	8000224 <__adddf3>
 80075d4:	2000      	movs	r0, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	460d      	mov	r5, r1
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f8 ffd5 	bl	8000590 <__aeabi_dmul>
 80075e6:	4b62      	ldr	r3, [pc, #392]	; (8007770 <__ieee754_pow+0x770>)
 80075e8:	4680      	mov	r8, r0
 80075ea:	4689      	mov	r9, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f8 fe15 	bl	8000220 <__aeabi_dsub>
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	f7f8 fe11 	bl	8000220 <__aeabi_dsub>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	f7f8 fe0b 	bl	8000220 <__aeabi_dsub>
 800760a:	ec53 2b18 	vmov	r2, r3, d8
 800760e:	f7f8 ffbf 	bl	8000590 <__aeabi_dmul>
 8007612:	4622      	mov	r2, r4
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	462b      	mov	r3, r5
 800761a:	ec51 0b19 	vmov	r0, r1, d9
 800761e:	f7f8 ffb7 	bl	8000590 <__aeabi_dmul>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f8 fdfb 	bl	8000224 <__adddf3>
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4640      	mov	r0, r8
 8007638:	4649      	mov	r1, r9
 800763a:	f7f8 fdf3 	bl	8000224 <__adddf3>
 800763e:	a33e      	add	r3, pc, #248	; (adr r3, 8007738 <__ieee754_pow+0x738>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	2000      	movs	r0, #0
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	f7f8 ffa1 	bl	8000590 <__aeabi_dmul>
 800764e:	4642      	mov	r2, r8
 8007650:	ec41 0b18 	vmov	d8, r0, r1
 8007654:	464b      	mov	r3, r9
 8007656:	4620      	mov	r0, r4
 8007658:	4629      	mov	r1, r5
 800765a:	f7f8 fde1 	bl	8000220 <__aeabi_dsub>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f8 fddb 	bl	8000220 <__aeabi_dsub>
 800766a:	a335      	add	r3, pc, #212	; (adr r3, 8007740 <__ieee754_pow+0x740>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 ff8e 	bl	8000590 <__aeabi_dmul>
 8007674:	a334      	add	r3, pc, #208	; (adr r3, 8007748 <__ieee754_pow+0x748>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	4606      	mov	r6, r0
 800767c:	460f      	mov	r7, r1
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f8 ff85 	bl	8000590 <__aeabi_dmul>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4630      	mov	r0, r6
 800768c:	4639      	mov	r1, r7
 800768e:	f7f8 fdc9 	bl	8000224 <__adddf3>
 8007692:	9a07      	ldr	r2, [sp, #28]
 8007694:	4b37      	ldr	r3, [pc, #220]	; (8007774 <__ieee754_pow+0x774>)
 8007696:	4413      	add	r3, r2
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f7f8 fdc2 	bl	8000224 <__adddf3>
 80076a0:	4682      	mov	sl, r0
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	468b      	mov	fp, r1
 80076a6:	f7f8 ff09 	bl	80004bc <__aeabi_i2d>
 80076aa:	9a07      	ldr	r2, [sp, #28]
 80076ac:	4b32      	ldr	r3, [pc, #200]	; (8007778 <__ieee754_pow+0x778>)
 80076ae:	4413      	add	r3, r2
 80076b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076b4:	4606      	mov	r6, r0
 80076b6:	460f      	mov	r7, r1
 80076b8:	4652      	mov	r2, sl
 80076ba:	465b      	mov	r3, fp
 80076bc:	ec51 0b18 	vmov	r0, r1, d8
 80076c0:	f7f8 fdb0 	bl	8000224 <__adddf3>
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	f7f8 fdac 	bl	8000224 <__adddf3>
 80076cc:	4632      	mov	r2, r6
 80076ce:	463b      	mov	r3, r7
 80076d0:	f7f8 fda8 	bl	8000224 <__adddf3>
 80076d4:	2000      	movs	r0, #0
 80076d6:	4632      	mov	r2, r6
 80076d8:	463b      	mov	r3, r7
 80076da:	4604      	mov	r4, r0
 80076dc:	460d      	mov	r5, r1
 80076de:	f7f8 fd9f 	bl	8000220 <__aeabi_dsub>
 80076e2:	4642      	mov	r2, r8
 80076e4:	464b      	mov	r3, r9
 80076e6:	f7f8 fd9b 	bl	8000220 <__aeabi_dsub>
 80076ea:	ec53 2b18 	vmov	r2, r3, d8
 80076ee:	f7f8 fd97 	bl	8000220 <__aeabi_dsub>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4650      	mov	r0, sl
 80076f8:	4659      	mov	r1, fp
 80076fa:	e610      	b.n	800731e <__ieee754_pow+0x31e>
 80076fc:	2401      	movs	r4, #1
 80076fe:	e6a1      	b.n	8007444 <__ieee754_pow+0x444>
 8007700:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007750 <__ieee754_pow+0x750>
 8007704:	e617      	b.n	8007336 <__ieee754_pow+0x336>
 8007706:	bf00      	nop
 8007708:	4a454eef 	.word	0x4a454eef
 800770c:	3fca7e28 	.word	0x3fca7e28
 8007710:	93c9db65 	.word	0x93c9db65
 8007714:	3fcd864a 	.word	0x3fcd864a
 8007718:	a91d4101 	.word	0xa91d4101
 800771c:	3fd17460 	.word	0x3fd17460
 8007720:	518f264d 	.word	0x518f264d
 8007724:	3fd55555 	.word	0x3fd55555
 8007728:	db6fabff 	.word	0xdb6fabff
 800772c:	3fdb6db6 	.word	0x3fdb6db6
 8007730:	33333303 	.word	0x33333303
 8007734:	3fe33333 	.word	0x3fe33333
 8007738:	e0000000 	.word	0xe0000000
 800773c:	3feec709 	.word	0x3feec709
 8007740:	dc3a03fd 	.word	0xdc3a03fd
 8007744:	3feec709 	.word	0x3feec709
 8007748:	145b01f5 	.word	0x145b01f5
 800774c:	be3e2fe0 	.word	0xbe3e2fe0
 8007750:	00000000 	.word	0x00000000
 8007754:	3ff00000 	.word	0x3ff00000
 8007758:	7ff00000 	.word	0x7ff00000
 800775c:	43400000 	.word	0x43400000
 8007760:	0003988e 	.word	0x0003988e
 8007764:	000bb679 	.word	0x000bb679
 8007768:	08017918 	.word	0x08017918
 800776c:	3ff00000 	.word	0x3ff00000
 8007770:	40080000 	.word	0x40080000
 8007774:	08017938 	.word	0x08017938
 8007778:	08017928 	.word	0x08017928
 800777c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007a54 <__ieee754_pow+0xa54>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	f7f8 fd4d 	bl	8000224 <__adddf3>
 800778a:	4622      	mov	r2, r4
 800778c:	ec41 0b1a 	vmov	d10, r0, r1
 8007790:	462b      	mov	r3, r5
 8007792:	4630      	mov	r0, r6
 8007794:	4639      	mov	r1, r7
 8007796:	f7f8 fd43 	bl	8000220 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	ec51 0b1a 	vmov	r0, r1, d10
 80077a2:	f7f9 f985 	bl	8000ab0 <__aeabi_dcmpgt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f47f ae04 	bne.w	80073b4 <__ieee754_pow+0x3b4>
 80077ac:	4aa4      	ldr	r2, [pc, #656]	; (8007a40 <__ieee754_pow+0xa40>)
 80077ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077b2:	4293      	cmp	r3, r2
 80077b4:	f340 8108 	ble.w	80079c8 <__ieee754_pow+0x9c8>
 80077b8:	151b      	asrs	r3, r3, #20
 80077ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80077be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80077c2:	fa4a f303 	asr.w	r3, sl, r3
 80077c6:	445b      	add	r3, fp
 80077c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80077cc:	4e9d      	ldr	r6, [pc, #628]	; (8007a44 <__ieee754_pow+0xa44>)
 80077ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80077d2:	4116      	asrs	r6, r2
 80077d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80077d8:	2000      	movs	r0, #0
 80077da:	ea23 0106 	bic.w	r1, r3, r6
 80077de:	f1c2 0214 	rsb	r2, r2, #20
 80077e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80077e6:	fa4a fa02 	asr.w	sl, sl, r2
 80077ea:	f1bb 0f00 	cmp.w	fp, #0
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	bfb8      	it	lt
 80077f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80077fc:	f7f8 fd10 	bl	8000220 <__aeabi_dsub>
 8007800:	ec41 0b19 	vmov	d9, r0, r1
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	ec51 0b19 	vmov	r0, r1, d9
 800780c:	f7f8 fd0a 	bl	8000224 <__adddf3>
 8007810:	a37b      	add	r3, pc, #492	; (adr r3, 8007a00 <__ieee754_pow+0xa00>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	2000      	movs	r0, #0
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	f7f8 feb8 	bl	8000590 <__aeabi_dmul>
 8007820:	ec53 2b19 	vmov	r2, r3, d9
 8007824:	4606      	mov	r6, r0
 8007826:	460f      	mov	r7, r1
 8007828:	4620      	mov	r0, r4
 800782a:	4629      	mov	r1, r5
 800782c:	f7f8 fcf8 	bl	8000220 <__aeabi_dsub>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4640      	mov	r0, r8
 8007836:	4649      	mov	r1, r9
 8007838:	f7f8 fcf2 	bl	8000220 <__aeabi_dsub>
 800783c:	a372      	add	r3, pc, #456	; (adr r3, 8007a08 <__ieee754_pow+0xa08>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f8 fea5 	bl	8000590 <__aeabi_dmul>
 8007846:	a372      	add	r3, pc, #456	; (adr r3, 8007a10 <__ieee754_pow+0xa10>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	4620      	mov	r0, r4
 8007852:	4629      	mov	r1, r5
 8007854:	f7f8 fe9c 	bl	8000590 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f8 fce0 	bl	8000224 <__adddf3>
 8007864:	4604      	mov	r4, r0
 8007866:	460d      	mov	r5, r1
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fcd8 	bl	8000224 <__adddf3>
 8007874:	4632      	mov	r2, r6
 8007876:	463b      	mov	r3, r7
 8007878:	4680      	mov	r8, r0
 800787a:	4689      	mov	r9, r1
 800787c:	f7f8 fcd0 	bl	8000220 <__aeabi_dsub>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f8 fcca 	bl	8000220 <__aeabi_dsub>
 800788c:	4642      	mov	r2, r8
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	464b      	mov	r3, r9
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	f7f8 fe7a 	bl	8000590 <__aeabi_dmul>
 800789c:	a35e      	add	r3, pc, #376	; (adr r3, 8007a18 <__ieee754_pow+0xa18>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	4604      	mov	r4, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	f7f8 fe73 	bl	8000590 <__aeabi_dmul>
 80078aa:	a35d      	add	r3, pc, #372	; (adr r3, 8007a20 <__ieee754_pow+0xa20>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 fcb6 	bl	8000220 <__aeabi_dsub>
 80078b4:	4622      	mov	r2, r4
 80078b6:	462b      	mov	r3, r5
 80078b8:	f7f8 fe6a 	bl	8000590 <__aeabi_dmul>
 80078bc:	a35a      	add	r3, pc, #360	; (adr r3, 8007a28 <__ieee754_pow+0xa28>)
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f7f8 fcaf 	bl	8000224 <__adddf3>
 80078c6:	4622      	mov	r2, r4
 80078c8:	462b      	mov	r3, r5
 80078ca:	f7f8 fe61 	bl	8000590 <__aeabi_dmul>
 80078ce:	a358      	add	r3, pc, #352	; (adr r3, 8007a30 <__ieee754_pow+0xa30>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 fca4 	bl	8000220 <__aeabi_dsub>
 80078d8:	4622      	mov	r2, r4
 80078da:	462b      	mov	r3, r5
 80078dc:	f7f8 fe58 	bl	8000590 <__aeabi_dmul>
 80078e0:	a355      	add	r3, pc, #340	; (adr r3, 8007a38 <__ieee754_pow+0xa38>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fc9d 	bl	8000224 <__adddf3>
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	f7f8 fe4f 	bl	8000590 <__aeabi_dmul>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	f7f8 fc91 	bl	8000220 <__aeabi_dsub>
 80078fe:	4604      	mov	r4, r0
 8007900:	460d      	mov	r5, r1
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f8 fe41 	bl	8000590 <__aeabi_dmul>
 800790e:	2200      	movs	r2, #0
 8007910:	ec41 0b19 	vmov	d9, r0, r1
 8007914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	f7f8 fc80 	bl	8000220 <__aeabi_dsub>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	ec51 0b19 	vmov	r0, r1, d9
 8007928:	f7f8 ff5c 	bl	80007e4 <__aeabi_ddiv>
 800792c:	4632      	mov	r2, r6
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	463b      	mov	r3, r7
 8007934:	4640      	mov	r0, r8
 8007936:	4649      	mov	r1, r9
 8007938:	f7f8 fe2a 	bl	8000590 <__aeabi_dmul>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	f7f8 fc70 	bl	8000224 <__adddf3>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4620      	mov	r0, r4
 800794a:	4629      	mov	r1, r5
 800794c:	f7f8 fc68 	bl	8000220 <__aeabi_dsub>
 8007950:	4642      	mov	r2, r8
 8007952:	464b      	mov	r3, r9
 8007954:	f7f8 fc64 	bl	8000220 <__aeabi_dsub>
 8007958:	460b      	mov	r3, r1
 800795a:	4602      	mov	r2, r0
 800795c:	493a      	ldr	r1, [pc, #232]	; (8007a48 <__ieee754_pow+0xa48>)
 800795e:	2000      	movs	r0, #0
 8007960:	f7f8 fc5e 	bl	8000220 <__aeabi_dsub>
 8007964:	ec41 0b10 	vmov	d0, r0, r1
 8007968:	ee10 3a90 	vmov	r3, s1
 800796c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007974:	da2b      	bge.n	80079ce <__ieee754_pow+0x9ce>
 8007976:	4650      	mov	r0, sl
 8007978:	f000 f966 	bl	8007c48 <scalbn>
 800797c:	ec51 0b10 	vmov	r0, r1, d0
 8007980:	ec53 2b18 	vmov	r2, r3, d8
 8007984:	f7ff bbed 	b.w	8007162 <__ieee754_pow+0x162>
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <__ieee754_pow+0xa4c>)
 800798a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800798e:	429e      	cmp	r6, r3
 8007990:	f77f af0c 	ble.w	80077ac <__ieee754_pow+0x7ac>
 8007994:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <__ieee754_pow+0xa50>)
 8007996:	440b      	add	r3, r1
 8007998:	4303      	orrs	r3, r0
 800799a:	d009      	beq.n	80079b0 <__ieee754_pow+0x9b0>
 800799c:	ec51 0b18 	vmov	r0, r1, d8
 80079a0:	2200      	movs	r2, #0
 80079a2:	2300      	movs	r3, #0
 80079a4:	f7f9 f866 	bl	8000a74 <__aeabi_dcmplt>
 80079a8:	3800      	subs	r0, #0
 80079aa:	bf18      	it	ne
 80079ac:	2001      	movne	r0, #1
 80079ae:	e447      	b.n	8007240 <__ieee754_pow+0x240>
 80079b0:	4622      	mov	r2, r4
 80079b2:	462b      	mov	r3, r5
 80079b4:	f7f8 fc34 	bl	8000220 <__aeabi_dsub>
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	f7f9 f86e 	bl	8000a9c <__aeabi_dcmpge>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f43f aef3 	beq.w	80077ac <__ieee754_pow+0x7ac>
 80079c6:	e7e9      	b.n	800799c <__ieee754_pow+0x99c>
 80079c8:	f04f 0a00 	mov.w	sl, #0
 80079cc:	e71a      	b.n	8007804 <__ieee754_pow+0x804>
 80079ce:	ec51 0b10 	vmov	r0, r1, d0
 80079d2:	4619      	mov	r1, r3
 80079d4:	e7d4      	b.n	8007980 <__ieee754_pow+0x980>
 80079d6:	491c      	ldr	r1, [pc, #112]	; (8007a48 <__ieee754_pow+0xa48>)
 80079d8:	2000      	movs	r0, #0
 80079da:	f7ff bb30 	b.w	800703e <__ieee754_pow+0x3e>
 80079de:	2000      	movs	r0, #0
 80079e0:	2100      	movs	r1, #0
 80079e2:	f7ff bb2c 	b.w	800703e <__ieee754_pow+0x3e>
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7ff bb28 	b.w	800703e <__ieee754_pow+0x3e>
 80079ee:	9204      	str	r2, [sp, #16]
 80079f0:	f7ff bb7a 	b.w	80070e8 <__ieee754_pow+0xe8>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f7ff bb64 	b.w	80070c2 <__ieee754_pow+0xc2>
 80079fa:	bf00      	nop
 80079fc:	f3af 8000 	nop.w
 8007a00:	00000000 	.word	0x00000000
 8007a04:	3fe62e43 	.word	0x3fe62e43
 8007a08:	fefa39ef 	.word	0xfefa39ef
 8007a0c:	3fe62e42 	.word	0x3fe62e42
 8007a10:	0ca86c39 	.word	0x0ca86c39
 8007a14:	be205c61 	.word	0xbe205c61
 8007a18:	72bea4d0 	.word	0x72bea4d0
 8007a1c:	3e663769 	.word	0x3e663769
 8007a20:	c5d26bf1 	.word	0xc5d26bf1
 8007a24:	3ebbbd41 	.word	0x3ebbbd41
 8007a28:	af25de2c 	.word	0xaf25de2c
 8007a2c:	3f11566a 	.word	0x3f11566a
 8007a30:	16bebd93 	.word	0x16bebd93
 8007a34:	3f66c16c 	.word	0x3f66c16c
 8007a38:	5555553e 	.word	0x5555553e
 8007a3c:	3fc55555 	.word	0x3fc55555
 8007a40:	3fe00000 	.word	0x3fe00000
 8007a44:	000fffff 	.word	0x000fffff
 8007a48:	3ff00000 	.word	0x3ff00000
 8007a4c:	4090cbff 	.word	0x4090cbff
 8007a50:	3f6f3400 	.word	0x3f6f3400
 8007a54:	652b82fe 	.word	0x652b82fe
 8007a58:	3c971547 	.word	0x3c971547

08007a5c <__ieee754_sqrt>:
 8007a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a60:	ec55 4b10 	vmov	r4, r5, d0
 8007a64:	4e55      	ldr	r6, [pc, #340]	; (8007bbc <__ieee754_sqrt+0x160>)
 8007a66:	43ae      	bics	r6, r5
 8007a68:	ee10 0a10 	vmov	r0, s0
 8007a6c:	ee10 3a10 	vmov	r3, s0
 8007a70:	462a      	mov	r2, r5
 8007a72:	4629      	mov	r1, r5
 8007a74:	d110      	bne.n	8007a98 <__ieee754_sqrt+0x3c>
 8007a76:	ee10 2a10 	vmov	r2, s0
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	f7f8 fd88 	bl	8000590 <__aeabi_dmul>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fbcc 	bl	8000224 <__adddf3>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	ec45 4b10 	vmov	d0, r4, r5
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a98:	2d00      	cmp	r5, #0
 8007a9a:	dc10      	bgt.n	8007abe <__ieee754_sqrt+0x62>
 8007a9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007aa0:	4330      	orrs	r0, r6
 8007aa2:	d0f5      	beq.n	8007a90 <__ieee754_sqrt+0x34>
 8007aa4:	b15d      	cbz	r5, 8007abe <__ieee754_sqrt+0x62>
 8007aa6:	ee10 2a10 	vmov	r2, s0
 8007aaa:	462b      	mov	r3, r5
 8007aac:	ee10 0a10 	vmov	r0, s0
 8007ab0:	f7f8 fbb6 	bl	8000220 <__aeabi_dsub>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	f7f8 fe94 	bl	80007e4 <__aeabi_ddiv>
 8007abc:	e7e6      	b.n	8007a8c <__ieee754_sqrt+0x30>
 8007abe:	1512      	asrs	r2, r2, #20
 8007ac0:	d074      	beq.n	8007bac <__ieee754_sqrt+0x150>
 8007ac2:	07d4      	lsls	r4, r2, #31
 8007ac4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007ac8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007ad0:	bf5e      	ittt	pl
 8007ad2:	0fda      	lsrpl	r2, r3, #31
 8007ad4:	005b      	lslpl	r3, r3, #1
 8007ad6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007ada:	2400      	movs	r4, #0
 8007adc:	0fda      	lsrs	r2, r3, #31
 8007ade:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007ae2:	107f      	asrs	r7, r7, #1
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	2516      	movs	r5, #22
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007aee:	1886      	adds	r6, r0, r2
 8007af0:	428e      	cmp	r6, r1
 8007af2:	bfde      	ittt	le
 8007af4:	1b89      	suble	r1, r1, r6
 8007af6:	18b0      	addle	r0, r6, r2
 8007af8:	18a4      	addle	r4, r4, r2
 8007afa:	0049      	lsls	r1, r1, #1
 8007afc:	3d01      	subs	r5, #1
 8007afe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007b02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007b06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b0a:	d1f0      	bne.n	8007aee <__ieee754_sqrt+0x92>
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	f04f 0e20 	mov.w	lr, #32
 8007b12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007b16:	4281      	cmp	r1, r0
 8007b18:	eb06 0c05 	add.w	ip, r6, r5
 8007b1c:	dc02      	bgt.n	8007b24 <__ieee754_sqrt+0xc8>
 8007b1e:	d113      	bne.n	8007b48 <__ieee754_sqrt+0xec>
 8007b20:	459c      	cmp	ip, r3
 8007b22:	d811      	bhi.n	8007b48 <__ieee754_sqrt+0xec>
 8007b24:	f1bc 0f00 	cmp.w	ip, #0
 8007b28:	eb0c 0506 	add.w	r5, ip, r6
 8007b2c:	da43      	bge.n	8007bb6 <__ieee754_sqrt+0x15a>
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	db41      	blt.n	8007bb6 <__ieee754_sqrt+0x15a>
 8007b32:	f100 0801 	add.w	r8, r0, #1
 8007b36:	1a09      	subs	r1, r1, r0
 8007b38:	459c      	cmp	ip, r3
 8007b3a:	bf88      	it	hi
 8007b3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007b40:	eba3 030c 	sub.w	r3, r3, ip
 8007b44:	4432      	add	r2, r6
 8007b46:	4640      	mov	r0, r8
 8007b48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007b4c:	f1be 0e01 	subs.w	lr, lr, #1
 8007b50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007b5c:	d1db      	bne.n	8007b16 <__ieee754_sqrt+0xba>
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	d006      	beq.n	8007b70 <__ieee754_sqrt+0x114>
 8007b62:	1c50      	adds	r0, r2, #1
 8007b64:	bf13      	iteet	ne
 8007b66:	3201      	addne	r2, #1
 8007b68:	3401      	addeq	r4, #1
 8007b6a:	4672      	moveq	r2, lr
 8007b6c:	f022 0201 	bicne.w	r2, r2, #1
 8007b70:	1063      	asrs	r3, r4, #1
 8007b72:	0852      	lsrs	r2, r2, #1
 8007b74:	07e1      	lsls	r1, r4, #31
 8007b76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007b7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007b7e:	bf48      	it	mi
 8007b80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007b84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007b88:	4614      	mov	r4, r2
 8007b8a:	e781      	b.n	8007a90 <__ieee754_sqrt+0x34>
 8007b8c:	0ad9      	lsrs	r1, r3, #11
 8007b8e:	3815      	subs	r0, #21
 8007b90:	055b      	lsls	r3, r3, #21
 8007b92:	2900      	cmp	r1, #0
 8007b94:	d0fa      	beq.n	8007b8c <__ieee754_sqrt+0x130>
 8007b96:	02cd      	lsls	r5, r1, #11
 8007b98:	d50a      	bpl.n	8007bb0 <__ieee754_sqrt+0x154>
 8007b9a:	f1c2 0420 	rsb	r4, r2, #32
 8007b9e:	fa23 f404 	lsr.w	r4, r3, r4
 8007ba2:	1e55      	subs	r5, r2, #1
 8007ba4:	4093      	lsls	r3, r2
 8007ba6:	4321      	orrs	r1, r4
 8007ba8:	1b42      	subs	r2, r0, r5
 8007baa:	e78a      	b.n	8007ac2 <__ieee754_sqrt+0x66>
 8007bac:	4610      	mov	r0, r2
 8007bae:	e7f0      	b.n	8007b92 <__ieee754_sqrt+0x136>
 8007bb0:	0049      	lsls	r1, r1, #1
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	e7ef      	b.n	8007b96 <__ieee754_sqrt+0x13a>
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	e7bd      	b.n	8007b36 <__ieee754_sqrt+0xda>
 8007bba:	bf00      	nop
 8007bbc:	7ff00000 	.word	0x7ff00000

08007bc0 <with_errno>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	460d      	mov	r5, r1
 8007bc6:	4616      	mov	r6, r2
 8007bc8:	f7ff f978 	bl	8006ebc <__errno>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	6006      	str	r6, [r0, #0]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}

08007bd4 <xflow>:
 8007bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd6:	4614      	mov	r4, r2
 8007bd8:	461d      	mov	r5, r3
 8007bda:	b108      	cbz	r0, 8007be0 <xflow+0xc>
 8007bdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007be0:	e9cd 2300 	strd	r2, r3, [sp]
 8007be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fcd0 	bl	8000590 <__aeabi_dmul>
 8007bf0:	2222      	movs	r2, #34	; 0x22
 8007bf2:	b003      	add	sp, #12
 8007bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bf8:	f7ff bfe2 	b.w	8007bc0 <with_errno>

08007bfc <__math_uflow>:
 8007bfc:	b508      	push	{r3, lr}
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c04:	f7ff ffe6 	bl	8007bd4 <xflow>
 8007c08:	ec41 0b10 	vmov	d0, r0, r1
 8007c0c:	bd08      	pop	{r3, pc}

08007c0e <__math_oflow>:
 8007c0e:	b508      	push	{r3, lr}
 8007c10:	2200      	movs	r2, #0
 8007c12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007c16:	f7ff ffdd 	bl	8007bd4 <xflow>
 8007c1a:	ec41 0b10 	vmov	d0, r0, r1
 8007c1e:	bd08      	pop	{r3, pc}

08007c20 <fabs>:
 8007c20:	ec51 0b10 	vmov	r0, r1, d0
 8007c24:	ee10 2a10 	vmov	r2, s0
 8007c28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c2c:	ec43 2b10 	vmov	d0, r2, r3
 8007c30:	4770      	bx	lr

08007c32 <finite>:
 8007c32:	b082      	sub	sp, #8
 8007c34:	ed8d 0b00 	vstr	d0, [sp]
 8007c38:	9801      	ldr	r0, [sp, #4]
 8007c3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007c3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007c42:	0fc0      	lsrs	r0, r0, #31
 8007c44:	b002      	add	sp, #8
 8007c46:	4770      	bx	lr

08007c48 <scalbn>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	ec55 4b10 	vmov	r4, r5, d0
 8007c4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c52:	4606      	mov	r6, r0
 8007c54:	462b      	mov	r3, r5
 8007c56:	b99a      	cbnz	r2, 8007c80 <scalbn+0x38>
 8007c58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c5c:	4323      	orrs	r3, r4
 8007c5e:	d036      	beq.n	8007cce <scalbn+0x86>
 8007c60:	4b39      	ldr	r3, [pc, #228]	; (8007d48 <scalbn+0x100>)
 8007c62:	4629      	mov	r1, r5
 8007c64:	ee10 0a10 	vmov	r0, s0
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f7f8 fc91 	bl	8000590 <__aeabi_dmul>
 8007c6e:	4b37      	ldr	r3, [pc, #220]	; (8007d4c <scalbn+0x104>)
 8007c70:	429e      	cmp	r6, r3
 8007c72:	4604      	mov	r4, r0
 8007c74:	460d      	mov	r5, r1
 8007c76:	da10      	bge.n	8007c9a <scalbn+0x52>
 8007c78:	a32b      	add	r3, pc, #172	; (adr r3, 8007d28 <scalbn+0xe0>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	e03a      	b.n	8007cf6 <scalbn+0xae>
 8007c80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c84:	428a      	cmp	r2, r1
 8007c86:	d10c      	bne.n	8007ca2 <scalbn+0x5a>
 8007c88:	ee10 2a10 	vmov	r2, s0
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	4629      	mov	r1, r5
 8007c90:	f7f8 fac8 	bl	8000224 <__adddf3>
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	e019      	b.n	8007cce <scalbn+0x86>
 8007c9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	3a36      	subs	r2, #54	; 0x36
 8007ca2:	4432      	add	r2, r6
 8007ca4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ca8:	428a      	cmp	r2, r1
 8007caa:	dd08      	ble.n	8007cbe <scalbn+0x76>
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	a120      	add	r1, pc, #128	; (adr r1, 8007d30 <scalbn+0xe8>)
 8007cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb4:	da1c      	bge.n	8007cf0 <scalbn+0xa8>
 8007cb6:	a120      	add	r1, pc, #128	; (adr r1, 8007d38 <scalbn+0xf0>)
 8007cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cbc:	e018      	b.n	8007cf0 <scalbn+0xa8>
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	dd08      	ble.n	8007cd4 <scalbn+0x8c>
 8007cc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cce:	ec45 4b10 	vmov	d0, r4, r5
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007cd8:	da19      	bge.n	8007d0e <scalbn+0xc6>
 8007cda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cde:	429e      	cmp	r6, r3
 8007ce0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007ce4:	dd0a      	ble.n	8007cfc <scalbn+0xb4>
 8007ce6:	a112      	add	r1, pc, #72	; (adr r1, 8007d30 <scalbn+0xe8>)
 8007ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e2      	bne.n	8007cb6 <scalbn+0x6e>
 8007cf0:	a30f      	add	r3, pc, #60	; (adr r3, 8007d30 <scalbn+0xe8>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fc4b 	bl	8000590 <__aeabi_dmul>
 8007cfa:	e7cb      	b.n	8007c94 <scalbn+0x4c>
 8007cfc:	a10a      	add	r1, pc, #40	; (adr r1, 8007d28 <scalbn+0xe0>)
 8007cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0b8      	beq.n	8007c78 <scalbn+0x30>
 8007d06:	a10e      	add	r1, pc, #56	; (adr r1, 8007d40 <scalbn+0xf8>)
 8007d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d0c:	e7b4      	b.n	8007c78 <scalbn+0x30>
 8007d0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d12:	3236      	adds	r2, #54	; 0x36
 8007d14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <scalbn+0x108>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	e7e8      	b.n	8007cf6 <scalbn+0xae>
 8007d24:	f3af 8000 	nop.w
 8007d28:	c2f8f359 	.word	0xc2f8f359
 8007d2c:	01a56e1f 	.word	0x01a56e1f
 8007d30:	8800759c 	.word	0x8800759c
 8007d34:	7e37e43c 	.word	0x7e37e43c
 8007d38:	8800759c 	.word	0x8800759c
 8007d3c:	fe37e43c 	.word	0xfe37e43c
 8007d40:	c2f8f359 	.word	0xc2f8f359
 8007d44:	81a56e1f 	.word	0x81a56e1f
 8007d48:	43500000 	.word	0x43500000
 8007d4c:	ffff3cb0 	.word	0xffff3cb0
 8007d50:	3c900000 	.word	0x3c900000

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
