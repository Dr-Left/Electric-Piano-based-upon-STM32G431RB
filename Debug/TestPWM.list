
TestPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fbd8  08005be8  08005be8  00015be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157c0  080157c0  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  080157c0  080157c0  000257c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157c8  080157c8  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157c8  080157c8  000257c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157cc  080157cc  000257cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080157d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08015840  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08015840  00030174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dfe  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d8  00000000  00000000  00041e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00043f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00044f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de15  00000000  00000000  00045e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127c4  00000000  00000000  00063c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c559a  00000000  00000000  00076439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  0013ba24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005bcc 	.word	0x08005bcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08005bcc 	.word	0x08005bcc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b974 	b.w	8000e30 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9d08      	ldr	r5, [sp, #32]
 8000b66:	4604      	mov	r4, r0
 8000b68:	468e      	mov	lr, r1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d14d      	bne.n	8000c0a <__udivmoddi4+0xaa>
 8000b6e:	428a      	cmp	r2, r1
 8000b70:	4694      	mov	ip, r2
 8000b72:	d969      	bls.n	8000c48 <__udivmoddi4+0xe8>
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	b152      	cbz	r2, 8000b90 <__udivmoddi4+0x30>
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	f1c2 0120 	rsb	r1, r2, #32
 8000b82:	fa20 f101 	lsr.w	r1, r0, r1
 8000b86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8e:	4094      	lsls	r4, r2
 8000b90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b94:	0c21      	lsrs	r1, r4, #16
 8000b96:	fbbe f6f8 	udiv	r6, lr, r8
 8000b9a:	fa1f f78c 	uxth.w	r7, ip
 8000b9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ba2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba6:	fb06 f107 	mul.w	r1, r6, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x64>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb6:	f080 811f 	bcs.w	8000df8 <__udivmoddi4+0x298>
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	f240 811c 	bls.w	8000df8 <__udivmoddi4+0x298>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	1a5b      	subs	r3, r3, r1
 8000bc6:	b2a4      	uxth	r4, r4
 8000bc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd4:	fb00 f707 	mul.w	r7, r0, r7
 8000bd8:	42a7      	cmp	r7, r4
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x92>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be4:	f080 810a 	bcs.w	8000dfc <__udivmoddi4+0x29c>
 8000be8:	42a7      	cmp	r7, r4
 8000bea:	f240 8107 	bls.w	8000dfc <__udivmoddi4+0x29c>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf6:	1be4      	subs	r4, r4, r7
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	b11d      	cbz	r5, 8000c04 <__udivmoddi4+0xa4>
 8000bfc:	40d4      	lsrs	r4, r2
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e9c5 4300 	strd	r4, r3, [r5]
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0xc2>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	f000 80ef 	beq.w	8000df2 <__udivmoddi4+0x292>
 8000c14:	2600      	movs	r6, #0
 8000c16:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	fab3 f683 	clz	r6, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d14a      	bne.n	8000cc0 <__udivmoddi4+0x160>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xd4>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 80f9 	bhi.w	8000e26 <__udivmoddi4+0x2c6>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb61 0303 	sbc.w	r3, r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	469e      	mov	lr, r3
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e0      	beq.n	8000c04 <__udivmoddi4+0xa4>
 8000c42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c46:	e7dd      	b.n	8000c04 <__udivmoddi4+0xa4>
 8000c48:	b902      	cbnz	r2, 8000c4c <__udivmoddi4+0xec>
 8000c4a:	deff      	udf	#255	; 0xff
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	f040 8092 	bne.w	8000d7a <__udivmoddi4+0x21a>
 8000c56:	eba1 010c 	sub.w	r1, r1, ip
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f fe8c 	uxth.w	lr, ip
 8000c62:	2601      	movs	r6, #1
 8000c64:	0c20      	lsrs	r0, r4, #16
 8000c66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c72:	fb0e f003 	mul.w	r0, lr, r3
 8000c76:	4288      	cmp	r0, r1
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x12c>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x12a>
 8000c84:	4288      	cmp	r0, r1
 8000c86:	f200 80cb 	bhi.w	8000e20 <__udivmoddi4+0x2c0>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	1a09      	subs	r1, r1, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c94:	fb07 1110 	mls	r1, r7, r0, r1
 8000c98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x156>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x154>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f200 80bb 	bhi.w	8000e2a <__udivmoddi4+0x2ca>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	eba4 040e 	sub.w	r4, r4, lr
 8000cba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cbe:	e79c      	b.n	8000bfa <__udivmoddi4+0x9a>
 8000cc0:	f1c6 0720 	rsb	r7, r6, #32
 8000cc4:	40b3      	lsls	r3, r6
 8000cc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cce:	fa20 f407 	lsr.w	r4, r0, r7
 8000cd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd6:	431c      	orrs	r4, r3
 8000cd8:	40f9      	lsrs	r1, r7
 8000cda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cde:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce6:	0c20      	lsrs	r0, r4, #16
 8000ce8:	fa1f fe8c 	uxth.w	lr, ip
 8000cec:	fb09 1118 	mls	r1, r9, r8, r1
 8000cf0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfe:	d90b      	bls.n	8000d18 <__udivmoddi4+0x1b8>
 8000d00:	eb1c 0101 	adds.w	r1, ip, r1
 8000d04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d08:	f080 8088 	bcs.w	8000e1c <__udivmoddi4+0x2bc>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f240 8085 	bls.w	8000e1c <__udivmoddi4+0x2bc>
 8000d12:	f1a8 0802 	sub.w	r8, r8, #2
 8000d16:	4461      	add	r1, ip
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d20:	fb09 1110 	mls	r1, r9, r0, r1
 8000d24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	458e      	cmp	lr, r1
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x1e2>
 8000d30:	eb1c 0101 	adds.w	r1, ip, r1
 8000d34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d38:	d26c      	bcs.n	8000e14 <__udivmoddi4+0x2b4>
 8000d3a:	458e      	cmp	lr, r1
 8000d3c:	d96a      	bls.n	8000e14 <__udivmoddi4+0x2b4>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	4461      	add	r1, ip
 8000d42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d46:	fba0 9402 	umull	r9, r4, r0, r2
 8000d4a:	eba1 010e 	sub.w	r1, r1, lr
 8000d4e:	42a1      	cmp	r1, r4
 8000d50:	46c8      	mov	r8, r9
 8000d52:	46a6      	mov	lr, r4
 8000d54:	d356      	bcc.n	8000e04 <__udivmoddi4+0x2a4>
 8000d56:	d053      	beq.n	8000e00 <__udivmoddi4+0x2a0>
 8000d58:	b15d      	cbz	r5, 8000d72 <__udivmoddi4+0x212>
 8000d5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d62:	fa01 f707 	lsl.w	r7, r1, r7
 8000d66:	fa22 f306 	lsr.w	r3, r2, r6
 8000d6a:	40f1      	lsrs	r1, r6
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d72:	2600      	movs	r6, #0
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	f1c2 0320 	rsb	r3, r2, #32
 8000d7e:	40d8      	lsrs	r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa21 f303 	lsr.w	r3, r1, r3
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d98:	fb07 3610 	mls	r6, r7, r0, r3
 8000d9c:	0c0b      	lsrs	r3, r1, #16
 8000d9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000da2:	fb00 f60e 	mul.w	r6, r0, lr
 8000da6:	429e      	cmp	r6, r3
 8000da8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x260>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db6:	d22f      	bcs.n	8000e18 <__udivmoddi4+0x2b8>
 8000db8:	429e      	cmp	r6, r3
 8000dba:	d92d      	bls.n	8000e18 <__udivmoddi4+0x2b8>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1b9b      	subs	r3, r3, r6
 8000dc2:	b289      	uxth	r1, r1
 8000dc4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x28a>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000de0:	d216      	bcs.n	8000e10 <__udivmoddi4+0x2b0>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d914      	bls.n	8000e10 <__udivmoddi4+0x2b0>
 8000de6:	3e02      	subs	r6, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000df0:	e738      	b.n	8000c64 <__udivmoddi4+0x104>
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e705      	b.n	8000c04 <__udivmoddi4+0xa4>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e3      	b.n	8000bc4 <__udivmoddi4+0x64>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6f8      	b.n	8000bf2 <__udivmoddi4+0x92>
 8000e00:	454b      	cmp	r3, r9
 8000e02:	d2a9      	bcs.n	8000d58 <__udivmoddi4+0x1f8>
 8000e04:	ebb9 0802 	subs.w	r8, r9, r2
 8000e08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7a3      	b.n	8000d58 <__udivmoddi4+0x1f8>
 8000e10:	4646      	mov	r6, r8
 8000e12:	e7ea      	b.n	8000dea <__udivmoddi4+0x28a>
 8000e14:	4620      	mov	r0, r4
 8000e16:	e794      	b.n	8000d42 <__udivmoddi4+0x1e2>
 8000e18:	4640      	mov	r0, r8
 8000e1a:	e7d1      	b.n	8000dc0 <__udivmoddi4+0x260>
 8000e1c:	46d0      	mov	r8, sl
 8000e1e:	e77b      	b.n	8000d18 <__udivmoddi4+0x1b8>
 8000e20:	3b02      	subs	r3, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	e732      	b.n	8000c8c <__udivmoddi4+0x12c>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e709      	b.n	8000c3e <__udivmoddi4+0xde>
 8000e2a:	4464      	add	r4, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e742      	b.n	8000cb6 <__udivmoddi4+0x156>

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <setPWM>:
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */

void setPWM(double freq, int duty_percent)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e42:	6078      	str	r0, [r7, #4]
	if (freq == 0) {
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e50:	f7ff fe06 	bl	8000a60 <__aeabi_dcmpeq>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <setPWM+0x2a>
		TIM3->CCR1 = 0;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <setPWM+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 8000e60:	e03b      	b.n	8000eda <setPWM+0xa2>
	}
	TIM3->ARR = 100000.0 / freq - 1;
 8000e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e66:	a11e      	add	r1, pc, #120	; (adr r1, 8000ee0 <setPWM+0xa8>)
 8000e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e6c:	f7ff fcba 	bl	80007e4 <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <setPWM+0xb4>)
 8000e7e:	f7ff f9cf 	bl	8000220 <__aeabi_dsub>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4c18      	ldr	r4, [pc, #96]	; (8000ee8 <setPWM+0xb0>)
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fe30 	bl	8000af0 <__aeabi_d2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->CCR1 = (double)duty_percent * (TIM3->ARR + 1) / 100.0;
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fb11 	bl	80004bc <__aeabi_i2d>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	460d      	mov	r5, r1
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <setPWM+0xb0>)
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff faf9 	bl	800049c <__aeabi_ui2d>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4620      	mov	r0, r4
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f7ff fb6d 	bl	8000590 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <setPWM+0xb8>)
 8000ec4:	f7ff fc8e 	bl	80007e4 <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4c06      	ldr	r4, [pc, #24]	; (8000ee8 <setPWM+0xb0>)
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fe0d 	bl	8000af0 <__aeabi_d2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40f86a00 	.word	0x40f86a00
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	3ff00000 	.word	0x3ff00000
 8000ef0:	40590000 	.word	0x40590000
 8000ef4:	00000000 	.word	0x00000000

08000ef8 <note_to_frequency>:

double note_to_frequency(int note)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	return 440.0 * pow(2, (note - 69)/12.0);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b45      	subs	r3, #69	; 0x45
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fad9 	bl	80004bc <__aeabi_i2d>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <note_to_frequency+0x60>)
 8000f10:	f7ff fc68 	bl	80007e4 <__aeabi_ddiv>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	ec43 2b17 	vmov	d7, r2, r3
 8000f1c:	eeb0 1a47 	vmov.f32	s2, s14
 8000f20:	eef0 1a67 	vmov.f32	s3, s15
 8000f24:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000f50 <note_to_frequency+0x58>
 8000f28:	f003 ff36 	bl	8004d98 <pow>
 8000f2c:	ec51 0b10 	vmov	r0, r1, d0
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <note_to_frequency+0x64>)
 8000f36:	f7ff fb2b 	bl	8000590 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f42:	eeb0 0a47 	vmov.f32	s0, s14
 8000f46:	eef0 0a67 	vmov.f32	s1, s15
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	00000000 	.word	0x00000000
 8000f54:	40000000 	.word	0x40000000
 8000f58:	40280000 	.word	0x40280000
 8000f5c:	407b8000 	.word	0x407b8000

08000f60 <produce_sound>:

void produce_sound(int note, int lasting_millisecond)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	if (output_device == OUTPUT_BUZZER) {
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <produce_sound+0x70>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d123      	bne.n	8000fba <produce_sound+0x5a>
		if (note == 0) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <produce_sound+0x2c>
			setPWM(0, 100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8000fc8 <produce_sound+0x68>
 8000f7e:	f7ff ff5b 	bl	8000e38 <setPWM>
			HAL_Delay(lasting_millisecond);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fdb5 	bl	8001af4 <HAL_Delay>
			return ;
 8000f8a:	e018      	b.n	8000fbe <produce_sound+0x5e>
		}
		double freq = note_to_frequency(note);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffb3 	bl	8000ef8 <note_to_frequency>
 8000f92:	ed87 0b02 	vstr	d0, [r7, #8]
		setPWM(freq, DEFAULT_DUTY);
 8000f96:	205f      	movs	r0, #95	; 0x5f
 8000f98:	ed97 0b02 	vldr	d0, [r7, #8]
 8000f9c:	f7ff ff4c 	bl	8000e38 <setPWM>
		HAL_Delay(lasting_millisecond);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fda6 	bl	8001af4 <HAL_Delay>
		setPWM(0, 100);
 8000fa8:	2064      	movs	r0, #100	; 0x64
 8000faa:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000fc8 <produce_sound+0x68>
 8000fae:	f7ff ff43 	bl	8000e38 <setPWM>
		HAL_Delay(50);
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f000 fd9e 	bl	8001af4 <HAL_Delay>
 8000fb8:	e001      	b.n	8000fbe <produce_sound+0x5e>
		// send MIDI
		unsigned char operation;
		unsigned char sound;
		unsigned char force;
		char signal;
		operation = 0x90;
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	75fb      	strb	r3, [r7, #23]
//		sound = 0x3C + ;
//		HAL_UART_Transmit(&hlpuart1, &signal, 1, 0xffff);
	}
}
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	f3af 8000 	nop.w
	...
 8000fd0:	20000090 	.word	0x20000090

08000fd4 <init_piano>:

void init_piano()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	produce_sound(0, 1000);
 8000fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff ffbe 	bl	8000f60 <produce_sound>
	unsigned int i;
	for (i=0;i<8;i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	e00b      	b.n	8001002 <init_piano+0x2e>
		produce_sound(MIDDLE_C + white_note[i], 200);
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <init_piano+0x44>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	333c      	adds	r3, #60	; 0x3c
 8000ff4:	21c8      	movs	r1, #200	; 0xc8
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffb2 	bl	8000f60 <produce_sound>
	for (i=0;i<8;i++) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b07      	cmp	r3, #7
 8001006:	d9f0      	bls.n	8000fea <init_piano+0x16>
	}
	produce_sound(0, 0);
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ffa8 	bl	8000f60 <produce_sound>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	08005be8 	.word	0x08005be8
 800101c:	00000000 	.word	0x00000000

08001020 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Keys interrupt
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
//	if (clock - lastTime <= 80) {
//		lastTime = clock;
//		return ;
//	}
//	lastTime = clock;
	if (GPIO_Pin == GPIO_PIN_8) {
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001030:	d116      	bne.n	8001060 <HAL_GPIO_EXTI_Callback+0x40>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001032:	2101      	movs	r1, #1
 8001034:	486e      	ldr	r0, [pc, #440]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001036:	f001 f811 	bl	800205c <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80bf 	beq.w	80011c0 <HAL_GPIO_EXTI_Callback+0x1a0>
			// switch mode
			play_mode = (play_mode + 1) % TOTAL_MODES;
 8001042:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1c59      	adds	r1, r3, #1
 8001048:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800104a:	fb83 3201 	smull	r3, r2, r3, r1
 800104e:	17cb      	asrs	r3, r1, #31
 8001050:	1ad2      	subs	r2, r2, r3
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	1aca      	subs	r2, r1, r3
 800105a:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800105c:	601a      	str	r2, [r3, #0]
		}
		return ;
 800105e:	e0af      	b.n	80011c0 <HAL_GPIO_EXTI_Callback+0x1a0>
	}
	double freq = 0.0;
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c7 2302 	strd	r2, r3, [r7, #8]
	switch (GPIO_Pin) {
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2b80      	cmp	r3, #128	; 0x80
 8001070:	d071      	beq.n	8001156 <HAL_GPIO_EXTI_Callback+0x136>
 8001072:	2b80      	cmp	r3, #128	; 0x80
 8001074:	dc75      	bgt.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
 8001076:	2b20      	cmp	r3, #32
 8001078:	dc46      	bgt.n	8001108 <HAL_GPIO_EXTI_Callback+0xe8>
 800107a:	2b02      	cmp	r3, #2
 800107c:	db71      	blt.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
 800107e:	3b02      	subs	r3, #2
 8001080:	2b1e      	cmp	r3, #30
 8001082:	d86e      	bhi.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	0800110f 	.word	0x0800110f
 8001090:	08001163 	.word	0x08001163
 8001094:	0800111b 	.word	0x0800111b
 8001098:	08001163 	.word	0x08001163
 800109c:	08001163 	.word	0x08001163
 80010a0:	08001163 	.word	0x08001163
 80010a4:	08001127 	.word	0x08001127
 80010a8:	08001163 	.word	0x08001163
 80010ac:	08001163 	.word	0x08001163
 80010b0:	08001163 	.word	0x08001163
 80010b4:	08001163 	.word	0x08001163
 80010b8:	08001163 	.word	0x08001163
 80010bc:	08001163 	.word	0x08001163
 80010c0:	08001163 	.word	0x08001163
 80010c4:	08001133 	.word	0x08001133
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001163 	.word	0x08001163
 80010d4:	08001163 	.word	0x08001163
 80010d8:	08001163 	.word	0x08001163
 80010dc:	08001163 	.word	0x08001163
 80010e0:	08001163 	.word	0x08001163
 80010e4:	08001163 	.word	0x08001163
 80010e8:	08001163 	.word	0x08001163
 80010ec:	08001163 	.word	0x08001163
 80010f0:	08001163 	.word	0x08001163
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001163 	.word	0x08001163
 80010fc:	08001163 	.word	0x08001163
 8001100:	08001163 	.word	0x08001163
 8001104:	0800113f 	.word	0x0800113f
 8001108:	2b40      	cmp	r3, #64	; 0x40
 800110a:	d01e      	beq.n	800114a <HAL_GPIO_EXTI_Callback+0x12a>
 800110c:	e029      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_1: freq = note_freq[1]; break;
 800110e:	a32e      	add	r3, pc, #184	; (adr r3, 80011c8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001118:	e023      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_2: freq = note_freq[2]; break;
 800111a:	a32d      	add	r3, pc, #180	; (adr r3, 80011d0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001124:	e01d      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_3: freq = note_freq[3]; break;
 8001126:	a32c      	add	r3, pc, #176	; (adr r3, 80011d8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001130:	e017      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_4: freq = note_freq[4]; break;
 8001132:	a32b      	add	r3, pc, #172	; (adr r3, 80011e0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800113c:	e011      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_5: freq = note_freq[5]; break;
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001144:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001148:	e00b      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_6: freq = note_freq[6]; break;
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001150:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001154:	e005      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x142>
	case GPIO_PIN_7: freq = note_freq[7]; break;
 8001156:	a324      	add	r3, pc, #144	; (adr r3, 80011e8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001160:	bf00      	nop
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001162:	2101      	movs	r1, #1
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001166:	f000 ff79 	bl	800205c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <HAL_GPIO_EXTI_Callback+0x164>
		// big button pushed down
		freq *= 2.0;
 8001170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	f7ff f854 	bl	8000224 <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0) {
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	481e      	ldr	r0, [pc, #120]	; (8001204 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800118a:	f000 ff67 	bl	800205c <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10b      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x18c>
		// small button pushed down
		freq /= 2.0;
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a0:	f7ff fb20 	bl	80007e4 <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if (play_mode == PIANO_MODE)
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d106      	bne.n	80011c2 <HAL_GPIO_EXTI_Callback+0x1a2>
		setPWM(freq, DEFAULT_DUTY); // TODO: change: last for a certain period of time
 80011b4:	205f      	movs	r0, #95	; 0x5f
 80011b6:	ed97 0b02 	vldr	d0, [r7, #8]
 80011ba:	f7ff fe3d 	bl	8000e38 <setPWM>
 80011be:	e000      	b.n	80011c2 <HAL_GPIO_EXTI_Callback+0x1a2>
		return ;
 80011c0:	bf00      	nop
}
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40706000 	.word	0x40706000
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40726000 	.word	0x40726000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	4074a000 	.word	0x4074a000
 80011e0:	00000000 	.word	0x00000000
 80011e4:	4075d000 	.word	0x4075d000
 80011e8:	00000000 	.word	0x00000000
 80011ec:	407ee000 	.word	0x407ee000
 80011f0:	48000800 	.word	0x48000800
 80011f4:	2000008c 	.word	0x2000008c
 80011f8:	55555556 	.word	0x55555556
 80011fc:	40788000 	.word	0x40788000
 8001200:	407b8000 	.word	0x407b8000
 8001204:	48000400 	.word	0x48000400

08001208 <play_music>:



void play_music(const int* pnote, const int* pbeat, const int* ptone,
		int bpm, int tone_shift)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
	int i;
	int init_mode = play_mode;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <play_music+0xf8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	617b      	str	r3, [r7, #20]
	if (init_mode == 0)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d069      	beq.n	80012f6 <play_music+0xee>
		return ;
	for (i=0;pnote[i]!=-1 && play_mode == init_mode;i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e058      	b.n	80012da <play_music+0xd2>
		int note = pnote[i]>0?(white_note[pnote[i]-1] + MIDDLE_C - 1):0;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	dd0a      	ble.n	800124c <play_music+0x44>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <play_music+0xfc>)
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	333b      	adds	r3, #59	; 0x3b
 800124a:	e000      	b.n	800124e <play_music+0x46>
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
//		double freq = note_freq[pnote[i]];
		switch (ptone[i]) {
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3303      	adds	r3, #3
 800125c:	2b06      	cmp	r3, #6
 800125e:	d829      	bhi.n	80012b4 <play_music+0xac>
 8001260:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <play_music+0x60>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	080012ad 	.word	0x080012ad
 800126c:	080012a5 	.word	0x080012a5
 8001270:	08001295 	.word	0x08001295
 8001274:	080012b5 	.word	0x080012b5
 8001278:	08001285 	.word	0x08001285
 800127c:	0800129d 	.word	0x0800129d
 8001280:	0800128d 	.word	0x0800128d
		case 1:  note += 12; break;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	330c      	adds	r3, #12
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	e013      	b.n	80012b4 <play_music+0xac>
		case 3:  note += 13; break;
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	330d      	adds	r3, #13
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	e00f      	b.n	80012b4 <play_music+0xac>
		case -1: note -= 12;; break;
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	3b0c      	subs	r3, #12
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	e00b      	b.n	80012b4 <play_music+0xac>
		case 2:  note++; break;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	3301      	adds	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	e007      	b.n	80012b4 <play_music+0xac>
		case -2: note--; break;
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	e003      	b.n	80012b4 <play_music+0xac>
		case -3: note -= 13; break;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	3b0d      	subs	r3, #13
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	bf00      	nop
		}
//		freq *= pow(INCRE, tone_shift);
		produce_sound(note, 60*1000*pbeat[i]/bpm);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80012c2:	fb03 f202 	mul.w	r2, r3, r2
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	69b8      	ldr	r0, [r7, #24]
 80012d0:	f7ff fe46 	bl	8000f60 <produce_sound>
	for (i=0;pnote[i]!=-1 && play_mode == init_mode;i++) {
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	3301      	adds	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d006      	beq.n	80012f8 <play_music+0xf0>
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <play_music+0xf8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d099      	beq.n	8001228 <play_music+0x20>
 80012f4:	e000      	b.n	80012f8 <play_music+0xf0>
		return ;
 80012f6:	bf00      	nop
	}
}
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000008c 	.word	0x2000008c
 8001304:	08005be8 	.word	0x08005be8

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130e:	f000 fb80 	bl	8001a12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 f85f 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f000 f96b 	bl	80015f0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800131a:	f000 f8ef 	bl	80014fc <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 800131e:	f000 f8a3 	bl	8001468 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //启动定时器TIM3通道1的PWM输出
 8001322:	2100      	movs	r1, #0
 8001324:	4828      	ldr	r0, [pc, #160]	; (80013c8 <main+0xc0>)
 8001326:	f001 ff59 	bl	80031dc <HAL_TIM_PWM_Start>
  //定义函数
  setPWM(0, DEFAULT_DUTY);
 800132a:	205f      	movs	r0, #95	; 0x5f
 800132c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80013c0 <main+0xb8>
 8001330:	f7ff fd82 	bl	8000e38 <setPWM>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode == PIANO_MODE) {
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <main+0xc4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <main+0x42>
		  init_piano();
 800133c:	f7ff fe4a 	bl	8000fd4 <init_piano>
		  while (play_mode==PIANO_MODE);
 8001340:	bf00      	nop
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <main+0xc4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0fb      	beq.n	8001342 <main+0x3a>
	  }
	  HAL_Delay(1000);
 800134a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134e:	f000 fbd1 	bl	8001af4 <HAL_Delay>
	  play_music(score[play_mode][1], score[play_mode][2], score[play_mode][3],
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <main+0xc4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8001362:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <main+0xc8>)
 8001364:	1898      	adds	r0, r3, r2
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <main+0xc4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <main+0xc8>)
 8001378:	1899      	adds	r1, r3, r2
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <main+0xc4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800138a:	3318      	adds	r3, #24
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <main+0xc8>)
 800138e:	441a      	add	r2, r3
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <main+0xc4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4c0e      	ldr	r4, [pc, #56]	; (80013d0 <main+0xc8>)
 8001396:	f44f 55c9 	mov.w	r5, #6432	; 0x1920
 800139a:	fb05 f303 	mul.w	r3, r5, r3
 800139e:	4423      	add	r3, r4
 80013a0:	681c      	ldr	r4, [r3, #0]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <main+0xc4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4d0a      	ldr	r5, [pc, #40]	; (80013d0 <main+0xc8>)
 80013a8:	f44f 56c9 	mov.w	r6, #6432	; 0x1920
 80013ac:	fb06 f303 	mul.w	r3, r6, r3
 80013b0:	442b      	add	r3, r5
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4623      	mov	r3, r4
 80013ba:	f7ff ff25 	bl	8001208 <play_music>
	  if (play_mode == PIANO_MODE) {
 80013be:	e7b9      	b.n	8001334 <main+0x2c>
	...
 80013c8:	20000124 	.word	0x20000124
 80013cc:	2000008c 	.word	0x2000008c
 80013d0:	08005c0c 	.word	0x08005c0c

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2238      	movs	r2, #56	; 0x38
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fcd0 	bl	8004d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 fe60 	bl	80020bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001404:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140a:	2303      	movs	r3, #3
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800140e:	2306      	movs	r3, #6
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001412:	2355      	movs	r3, #85	; 0x55
 8001414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fefc 	bl	8002224 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001432:	f000 f97b 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2303      	movs	r3, #3
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2104      	movs	r1, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fa00 	bl	8002854 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800145a:	f000 f967 	bl	800172c <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3750      	adds	r7, #80	; 0x50
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <MX_LPUART1_UART_Init+0x90>)
 8001470:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 80014ac:	f002 fe6e 	bl	800418c <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80014b6:	f000 f939 	bl	800172c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ba:	2100      	movs	r1, #0
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 80014be:	f003 fb6f 	bl	8004ba0 <HAL_UARTEx_SetTxFifoThreshold>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80014c8:	f000 f930 	bl	800172c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 80014d0:	f003 fba4 	bl	8004c1c <HAL_UARTEx_SetRxFifoThreshold>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80014da:	f000 f927 	bl	800172c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_LPUART1_UART_Init+0x8c>)
 80014e0:	f003 fb25 	bl	8004b2e <HAL_UARTEx_DisableFifoMode>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80014ea:	f000 f91f 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000094 	.word	0x20000094
 80014f8:	40008000 	.word	0x40008000

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001530:	4a2e      	ldr	r2, [pc, #184]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001536:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800153a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_TIM3_Init+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001544:	f242 720f 	movw	r2, #9999	; 0x270f
 8001548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_TIM3_Init+0xec>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001556:	4824      	ldr	r0, [pc, #144]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001558:	f001 fd88 	bl	800306c <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001562:	f000 f8e3 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001570:	4619      	mov	r1, r3
 8001572:	481d      	ldr	r0, [pc, #116]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001574:	f002 f846 	bl	8003604 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800157e:	f000 f8d5 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001582:	4819      	ldr	r0, [pc, #100]	; (80015e8 <MX_TIM3_Init+0xec>)
 8001584:	f001 fdc9 	bl	800311a <HAL_TIM_PWM_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800158e:	f000 f8cd 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_TIM3_Init+0xec>)
 80015a2:	f002 fd71 	bl	8004088 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80015ac:	f000 f8be 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	2360      	movs	r3, #96	; 0x60
 80015b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 80015b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM3_Init+0xec>)
 80015ca:	f001 ff07 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80015d4:	f000 f8aa 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM3_Init+0xec>)
 80015da:	f000 f949 	bl	8001870 <HAL_TIM_MspPostInit>

}
 80015de:	bf00      	nop
 80015e0:	3738      	adds	r7, #56	; 0x38
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000124 	.word	0x20000124
 80015ec:	40000400 	.word	0x40000400

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <MX_GPIO_Init+0x130>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a45      	ldr	r2, [pc, #276]	; (8001720 <MX_GPIO_Init+0x130>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <MX_GPIO_Init+0x130>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <MX_GPIO_Init+0x130>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a3f      	ldr	r2, [pc, #252]	; (8001720 <MX_GPIO_Init+0x130>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <MX_GPIO_Init+0x130>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <MX_GPIO_Init+0x130>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <MX_GPIO_Init+0x130>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <MX_GPIO_Init+0x130>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <MX_GPIO_Init+0x130>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <MX_GPIO_Init+0x130>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <MX_GPIO_Init+0x130>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4829      	ldr	r0, [pc, #164]	; (8001724 <MX_GPIO_Init+0x134>)
 800167e:	f000 fb6b 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168a:	2301      	movs	r3, #1
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_GPIO_Init+0x134>)
 8001696:	f000 fb5f 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800169a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800169e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	481d      	ldr	r0, [pc, #116]	; (8001728 <MX_GPIO_Init+0x138>)
 80016b2:	f000 fb51 	bl	8001d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2007      	movs	r0, #7
 80016bc:	f000 fb17 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016c0:	2007      	movs	r0, #7
 80016c2:	f000 fb2e 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2008      	movs	r0, #8
 80016cc:	f000 fb0f 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016d0:	2008      	movs	r0, #8
 80016d2:	f000 fb26 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2009      	movs	r0, #9
 80016dc:	f000 fb07 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016e0:	2009      	movs	r0, #9
 80016e2:	f000 fb1e 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2101      	movs	r1, #1
 80016ea:	200a      	movs	r0, #10
 80016ec:	f000 faff 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f000 fb16 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2101      	movs	r1, #1
 80016fa:	2017      	movs	r0, #23
 80016fc:	f000 faf7 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001700:	2017      	movs	r0, #23
 8001702:	f000 fb0e 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2101      	movs	r1, #1
 800170a:	2028      	movs	r0, #40	; 0x28
 800170c:	f000 faef 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001710:	2028      	movs	r0, #40	; 0x28
 8001712:	f000 fb06 	bl	8001d22 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	48000800 	.word	0x48000800
 8001728:	48000400 	.word	0x48000400

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_MspInit+0x44>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x44>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800176e:	f000 fd49 	bl	8002204 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b09a      	sub	sp, #104	; 0x68
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2244      	movs	r2, #68	; 0x44
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 faf1 	bl	8004d88 <memset>
  if(huart->Instance==LPUART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_UART_MspInit+0xa8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d136      	bne.n	800181e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017b0:	2320      	movs	r3, #32
 80017b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fa65 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c8:	f7ff ffb0 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_UART_MspInit+0xac>)
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_UART_MspInit+0xac>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_MspInit+0xac>)
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_MspInit+0xac>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_UART_MspInit+0xac>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_UART_MspInit+0xac>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fc:	230c      	movs	r3, #12
 80017fe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800180c:	230c      	movs	r3, #12
 800180e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f000 fa9d 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3768      	adds	r7, #104	; 0x68
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40008000 	.word	0x40008000
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_TIM_Base_MspInit+0x38>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10b      	bne.n	800185a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40000400 	.word	0x40000400
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_TIM_MspPostInit+0x64>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d11c      	bne.n	80018cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_MspPostInit+0x68>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_TIM_MspPostInit+0x68>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_MspPostInit+0x68>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f000 fa46 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40021000 	.word	0x40021000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f8c6 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001934:	2002      	movs	r0, #2
 8001936:	f000 fba9 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001942:	2004      	movs	r0, #4
 8001944:	f000 fba2 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001950:	2008      	movs	r0, #8
 8001952:	f000 fb9b 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}

0800195a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800195e:	2010      	movs	r0, #16
 8001960:	f000 fb94 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800196c:	2020      	movs	r0, #32
 800196e:	f000 fb8d 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001972:	2040      	movs	r0, #64	; 0x40
 8001974:	f000 fb8a 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001978:	2080      	movs	r0, #128	; 0x80
 800197a:	f000 fb87 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800197e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001982:	f000 fb83 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}

0800198a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800198e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001992:	f000 fb7b 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490e      	ldr	r1, [pc, #56]	; (8001a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0b      	ldr	r4, [pc, #44]	; (8001a0c <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ea:	f7ff ffd7 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f003 f9a7 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f2:	f7ff fc89 	bl	8001308 <main>

080019f6 <LoopForever>:

LoopForever:
    b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   r0, =_estack
 80019f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a04:	080157d0 	.word	0x080157d0
  ldr r2, =_sbss
 8001a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a0c:	20000174 	.word	0x20000174

08001a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_2_IRQHandler>

08001a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f95b 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f80e 	bl	8001a44 <HAL_InitTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	e001      	b.n	8001a38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a34:	f7ff fe80 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a38:	79fb      	ldrb	r3, [r7, #7]

}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_InitTick+0x68>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d022      	beq.n	8001a9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_InitTick+0x6c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_InitTick+0x68>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f966 	bl	8001d3e <HAL_SYSTICK_Config>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	d809      	bhi.n	8001a92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	f04f 30ff 	mov.w	r0, #4294967295
 8001a86:	f000 f932 	bl	8001cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_InitTick+0x70>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e007      	b.n	8001aa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e004      	b.n	8001aa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x1c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x20>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x1c>)
 8001ac8:	6013      	str	r3, [r2, #0]
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20000170 	.word	0x20000170
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000170 	.word	0x20000170

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d004      	beq.n	8001b18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_Delay+0x40>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b18:	bf00      	nop
 8001b1a:	f7ff ffdf 	bl	8001adc <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d8f7      	bhi.n	8001b1a <HAL_Delay+0x26>
  {
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000008 	.word	0x20000008

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff40 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff90 	bl	8001c2c <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5f 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff33 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa4 	bl	8001c94 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d66:	e15a      	b.n	800201e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 814c 	beq.w	8002018 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 0201 	and.w	r2, r3, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	6939      	ldr	r1, [r7, #16]
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a6 	beq.w	8002018 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_GPIO_Init+0x2e4>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_GPIO_Init+0x2e4>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_GPIO_Init+0x2e4>)
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee4:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_GPIO_Init+0x2e8>)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f0e:	d01f      	beq.n	8001f50 <HAL_GPIO_Init+0x1f8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x2ec>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d019      	beq.n	8001f4c <HAL_GPIO_Init+0x1f4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x2f0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_GPIO_Init+0x1f0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x2f4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00d      	beq.n	8001f44 <HAL_GPIO_Init+0x1ec>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_GPIO_Init+0x2f8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <HAL_GPIO_Init+0x1e8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_GPIO_Init+0x2fc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_GPIO_Init+0x1e4>
 8001f38:	2305      	movs	r3, #5
 8001f3a:	e00a      	b.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f3c:	2306      	movs	r3, #6
 8001f3e:	e008      	b.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f50:	2300      	movs	r3, #0
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f62:	4937      	ldr	r1, [pc, #220]	; (8002040 <HAL_GPIO_Init+0x2e8>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f94:	4a30      	ldr	r2, [pc, #192]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fbe:	4a26      	ldr	r2, [pc, #152]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_GPIO_Init+0x300>)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	f47f ae9d 	bne.w	8001d68 <HAL_GPIO_Init+0x10>
  }
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	48000400 	.word	0x48000400
 8002048:	48000800 	.word	0x48000800
 800204c:	48000c00 	.word	0x48000c00
 8002050:	48001000 	.word	0x48001000
 8002054:	48001400 	.word	0x48001400
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe ffb8 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d141      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ca:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d131      	bne.n	800213c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d8:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020de:	4a46      	ldr	r2, [pc, #280]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f0:	4a41      	ldr	r2, [pc, #260]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2232      	movs	r2, #50	; 0x32
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	4a3f      	ldr	r2, [pc, #252]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9b      	lsrs	r3, r3, #18
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210e:	e002      	b.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3b01      	subs	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d102      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f2      	bne.n	8002110 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d158      	bne.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e057      	b.n	80021ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002142:	4a2d      	ldr	r2, [pc, #180]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800214c:	e04d      	b.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002154:	d141      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d131      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216a:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800217c:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2232      	movs	r2, #50	; 0x32
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0c9b      	lsrs	r3, r3, #18
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219a:	e002      	b.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3b01      	subs	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d102      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f2      	bne.n	800219c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d112      	bne.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e011      	b.n	80021ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021d8:	e007      	b.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40007000 	.word	0x40007000
 80021fc:	20000000 	.word	0x20000000
 8002200:	431bde83 	.word	0x431bde83

08002204 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800220e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40007000 	.word	0x40007000

08002224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e306      	b.n	8002844 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002242:	4b97      	ldr	r3, [pc, #604]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224c:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d102      	bne.n	8002262 <HAL_RCC_OscConfig+0x3e>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d002      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b8d      	ldr	r3, [pc, #564]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e2e1      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b85      	ldr	r3, [pc, #532]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a84      	ldr	r2, [pc, #528]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7b      	ldr	r2, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a74      	ldr	r2, [pc, #464]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7ff fbfe 	bl	8001adc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fbfa 	bl	8001adc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e2a6      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff fbea 	bl	8001adc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fbe6 	bl	8001adc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e292      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231e:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d075      	beq.n	8002426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233a:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002344:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d102      	bne.n	800235a <HAL_RCC_OscConfig+0x136>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d002      	beq.n	8002360 <HAL_RCC_OscConfig+0x13c>
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d11f      	bne.n	80023a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_OscConfig+0x154>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e265      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	4946      	ldr	r1, [pc, #280]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800238c:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <HAL_RCC_OscConfig+0x280>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb57 	bl	8001a44 <HAL_InitTick>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d043      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e251      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d023      	beq.n	80023f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7ff fb92 	bl	8001adc <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff fb8e 	bl	8001adc <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e23a      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	492d      	ldr	r1, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
 80023ee:	e01a      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fb6e 	bl	8001adc <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fb6a 	bl	8001adc <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e216      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1e0>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d041      	beq.n	80024b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01c      	beq.n	8002474 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7ff fb47 	bl	8001adc <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff fb43 	bl	8001adc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1ef      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ef      	beq.n	8002452 <HAL_RCC_OscConfig+0x22e>
 8002472:	e020      	b.n	80024b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_RCC_OscConfig+0x27c>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff fb2a 	bl	8001adc <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800248a:	e00d      	b.n	80024a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff fb26 	bl	8001adc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d906      	bls.n	80024a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1d2      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a8:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ea      	bne.n	800248c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80a6 	beq.w	8002610 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2b4>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x2b6>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ea:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	4b79      	ldr	r3, [pc, #484]	; (80026e0 <HAL_RCC_OscConfig+0x4bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x4bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a75      	ldr	r2, [pc, #468]	; (80026e0 <HAL_RCC_OscConfig+0x4bc>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7ff fae3 	bl	8001adc <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7ff fadf 	bl	8001adc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e18b      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x4bc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d108      	bne.n	8002552 <HAL_RCC_OscConfig+0x32e>
 8002540:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002550:	e024      	b.n	800259c <HAL_RCC_OscConfig+0x378>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d110      	bne.n	800257c <HAL_RCC_OscConfig+0x358>
 800255a:	4b60      	ldr	r3, [pc, #384]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	4a5e      	ldr	r2, [pc, #376]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256a:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	4a5a      	ldr	r2, [pc, #360]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800257a:	e00f      	b.n	800259c <HAL_RCC_OscConfig+0x378>
 800257c:	4b57      	ldr	r3, [pc, #348]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	4a56      	ldr	r2, [pc, #344]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d016      	beq.n	80025d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7ff fa9a 	bl	8001adc <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7ff fa96 	bl	8001adc <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e140      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c2:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ed      	beq.n	80025ac <HAL_RCC_OscConfig+0x388>
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7ff fa83 	bl	8001adc <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7ff fa7f 	bl	8001adc <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e129      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f0:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ed      	bne.n	80025da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800260a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03c      	beq.n	8002696 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800262a:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7ff fa52 	bl	8001adc <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263c:	f7ff fa4e 	bl	8001adc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0fa      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCC_OscConfig+0x418>
 800265c:	e01b      	b.n	8002696 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7ff fa35 	bl	8001adc <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002676:	f7ff fa31 	bl	8001adc <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0dd      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ef      	bne.n	8002676 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80d1 	beq.w	8002842 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	f000 808b 	beq.w	80027c4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d15e      	bne.n	8002774 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_RCC_OscConfig+0x4b8>)
 80026bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff fa0b 	bl	8001adc <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c8:	e00c      	b.n	80026e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7ff fa07 	bl	8001adc <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d905      	bls.n	80026e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0b3      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_OscConfig+0x628>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ec      	bne.n	80026ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <HAL_RCC_OscConfig+0x628>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4b56      	ldr	r3, [pc, #344]	; (8002850 <HAL_RCC_OscConfig+0x62c>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6a11      	ldr	r1, [r2, #32]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002700:	3a01      	subs	r2, #1
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800270a:	0212      	lsls	r2, r2, #8
 800270c:	4311      	orrs	r1, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002712:	0852      	lsrs	r2, r2, #1
 8002714:	3a01      	subs	r2, #1
 8002716:	0552      	lsls	r2, r2, #21
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0652      	lsls	r2, r2, #25
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800272a:	06d2      	lsls	r2, r2, #27
 800272c:	430a      	orrs	r2, r1
 800272e:	4947      	ldr	r1, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b45      	ldr	r3, [pc, #276]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a44      	ldr	r2, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x628>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a41      	ldr	r2, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7ff f9c6 	bl	8001adc <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7ff f9c2 	bl	8001adc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e06e      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x530>
 8002772:	e066      	b.n	8002842 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a34      	ldr	r2, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x628>)
 800277a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a31      	ldr	r2, [pc, #196]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_OscConfig+0x628>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_RCC_OscConfig+0x628>)
 8002792:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7ff f99e 	bl	8001adc <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7ff f99a 	bl	8001adc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e046      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_OscConfig+0x628>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x580>
 80027c2:	e03e      	b.n	8002842 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e039      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027d0:	4b1e      	ldr	r3, [pc, #120]	; (800284c <HAL_RCC_OscConfig+0x628>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d12c      	bne.n	800283e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	3b01      	subs	r3, #1
 80027f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d123      	bne.n	800283e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d11b      	bne.n	800283e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d113      	bne.n	800283e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d109      	bne.n	800283e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	019f800c 	.word	0x019f800c

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e11e      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b8e      	ldr	r3, [pc, #568]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 020f 	bic.w	r2, r3, #15
 8002882:	498c      	ldr	r1, [pc, #560]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b8a      	ldr	r3, [pc, #552]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e106      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d073      	beq.n	8002990 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d129      	bne.n	8002904 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0f4      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028c0:	f000 f99e 	bl	8002c00 <RCC_GetSysClockFreqFromPLLSource>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4a7c      	ldr	r2, [pc, #496]	; (8002abc <HAL_RCC_ClockConfig+0x268>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d93f      	bls.n	800294e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ce:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d033      	beq.n	800294e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d12f      	bne.n	800294e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ee:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f6:	4a70      	ldr	r2, [pc, #448]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80028f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e024      	b.n	800294e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d107      	bne.n	800291c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290c:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0c6      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0be      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800292c:	f000 f8ce 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002930:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4a61      	ldr	r2, [pc, #388]	; (8002abc <HAL_RCC_ClockConfig+0x268>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d909      	bls.n	800294e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002942:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002948:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4957      	ldr	r1, [pc, #348]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7ff f8bc 	bl	8001adc <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7ff f8b8 	bl	8001adc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e095      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d023      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a42      	ldr	r2, [pc, #264]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029c0:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029c8:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4936      	ldr	r1, [pc, #216]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029ea:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 80029f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d21d      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 020f 	bic.w	r2, r3, #15
 8002a0c:	4929      	ldr	r1, [pc, #164]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a14:	f7ff f862 	bl	8001adc <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7ff f85e 	bl	8001adc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e03b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1ed      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4917      	ldr	r1, [pc, #92]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a7e:	f000 f825 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490c      	ldr	r1, [pc, #48]	; (8002ac0 <HAL_RCC_ClockConfig+0x26c>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x270>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe ffce 	bl	8001a44 <HAL_InitTick>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	04c4b400 	.word	0x04c4b400
 8002ac0:	0801574c 	.word	0x0801574c
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e047      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002af0:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e03e      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d136      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3301      	adds	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b20:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2a:	68d2      	ldr	r2, [r2, #12]
 8002b2c:	0a12      	lsrs	r2, r2, #8
 8002b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
      break;
 8002b38:	e00c      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	0a12      	lsrs	r2, r2, #8
 8002b48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
      break;
 8002b52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0e5b      	lsrs	r3, r3, #25
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	e001      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b74:	693b      	ldr	r3, [r7, #16]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	016e3600 	.word	0x016e3600

08002b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	0801575c 	.word	0x0801575c

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bd8:	f7ff ffda 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0adb      	lsrs	r3, r3, #11
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	0801575c 	.word	0x0801575c

08002c00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d10c      	bne.n	8002c3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c2e:	68d2      	ldr	r2, [r2, #12]
 8002c30:	0a12      	lsrs	r2, r2, #8
 8002c32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	617b      	str	r3, [r7, #20]
    break;
 8002c3c:	e00c      	b.n	8002c58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    break;
 8002c56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0e5b      	lsrs	r3, r3, #25
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c72:	687b      	ldr	r3, [r7, #4]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40021000 	.word	0x40021000
 8002c84:	016e3600 	.word	0x016e3600
 8002c88:	00f42400 	.word	0x00f42400

08002c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c94:	2300      	movs	r3, #0
 8002c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8098 	beq.w	8002dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10d      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	4a3f      	ldr	r2, [pc, #252]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd6:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe fefb 	bl	8001adc <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce8:	e009      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe fef7 	bl	8001adc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d902      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	74fb      	strb	r3, [r7, #19]
        break;
 8002cfc:	e005      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ef      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d159      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01e      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d019      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe feb7 	bl	8001adc <HAL_GetTick>
 8002d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d70:	e00b      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe feb3 	bl	8001adc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d902      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	74fb      	strb	r3, [r7, #19]
            break;
 8002d88:	e006      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ec      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002db4:	e008      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	74bb      	strb	r3, [r7, #18]
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc8:	7c7b      	ldrb	r3, [r7, #17]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dce:	4ba6      	ldr	r3, [pc, #664]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	4aa5      	ldr	r2, [pc, #660]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de6:	4ba0      	ldr	r3, [pc, #640]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f023 0203 	bic.w	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	499c      	ldr	r1, [pc, #624]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e08:	4b97      	ldr	r3, [pc, #604]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f023 020c 	bic.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4994      	ldr	r1, [pc, #592]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e2a:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	498b      	ldr	r1, [pc, #556]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e4c:	4b86      	ldr	r3, [pc, #536]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	4983      	ldr	r1, [pc, #524]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e6e:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	497a      	ldr	r1, [pc, #488]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e90:	4b75      	ldr	r3, [pc, #468]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	4972      	ldr	r1, [pc, #456]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4969      	ldr	r1, [pc, #420]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed4:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4961      	ldr	r1, [pc, #388]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef6:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	4958      	ldr	r1, [pc, #352]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	4950      	ldr	r1, [pc, #320]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f36:	d105      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f38:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a4a      	ldr	r2, [pc, #296]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f50:	4b45      	ldr	r3, [pc, #276]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	4942      	ldr	r1, [pc, #264]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f70:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f88:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4934      	ldr	r1, [pc, #208]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	4926      	ldr	r1, [pc, #152]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fde:	d105      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	4918      	ldr	r1, [pc, #96]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003016:	d105      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a12      	ldr	r2, [pc, #72]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	490a      	ldr	r1, [pc, #40]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800305c:	7cbb      	ldrb	r3, [r7, #18]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e049      	b.n	8003112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fbcc 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 fba4 	bl	80037f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e049      	b.n	80031c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f841 	bl	80031c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f000 fb4d 	bl	80037f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_TIM_PWM_Start+0x24>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e03c      	b.n	800327a <HAL_TIM_PWM_Start+0x9e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d109      	bne.n	800321a <HAL_TIM_PWM_Start+0x3e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e02f      	b.n	800327a <HAL_TIM_PWM_Start+0x9e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x58>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e022      	b.n	800327a <HAL_TIM_PWM_Start+0x9e>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d109      	bne.n	800324e <HAL_TIM_PWM_Start+0x72>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e015      	b.n	800327a <HAL_TIM_PWM_Start+0x9e>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b10      	cmp	r3, #16
 8003252:	d109      	bne.n	8003268 <HAL_TIM_PWM_Start+0x8c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e008      	b.n	800327a <HAL_TIM_PWM_Start+0x9e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e097      	b.n	80033b2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xb6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003290:	e023      	b.n	80032da <HAL_TIM_PWM_Start+0xfe>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0xc6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a0:	e01b      	b.n	80032da <HAL_TIM_PWM_Start+0xfe>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0xd6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b0:	e013      	b.n	80032da <HAL_TIM_PWM_Start+0xfe>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xe6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032c0:	e00b      	b.n	80032da <HAL_TIM_PWM_Start+0xfe>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_PWM_Start+0xf6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d0:	e003      	b.n	80032da <HAL_TIM_PWM_Start+0xfe>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 feaa 	bl	800403c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a33      	ldr	r2, [pc, #204]	; (80033bc <HAL_TIM_PWM_Start+0x1e0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_TIM_PWM_Start+0x13e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_TIM_PWM_Start+0x1e4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_TIM_PWM_Start+0x13e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a30      	ldr	r2, [pc, #192]	; (80033c4 <HAL_TIM_PWM_Start+0x1e8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_TIM_PWM_Start+0x13e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_TIM_PWM_Start+0x1ec>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_PWM_Start+0x13e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2d      	ldr	r2, [pc, #180]	; (80033cc <HAL_TIM_PWM_Start+0x1f0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_TIM_PWM_Start+0x142>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_TIM_PWM_Start+0x144>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_TIM_PWM_Start+0x1e0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_PWM_Start+0x194>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d013      	beq.n	8003370 <HAL_TIM_PWM_Start+0x194>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_TIM_PWM_Start+0x1f4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_PWM_Start+0x194>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <HAL_TIM_PWM_Start+0x1f8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_PWM_Start+0x194>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_TIM_PWM_Start+0x1e4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_PWM_Start+0x194>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_TIM_PWM_Start+0x1e8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d115      	bne.n	800339c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_TIM_PWM_Start+0x1fc>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d015      	beq.n	80033ae <HAL_TIM_PWM_Start+0x1d2>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d011      	beq.n	80033ae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	e008      	b.n	80033ae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	00010007 	.word	0x00010007

080033dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0ff      	b.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b14      	cmp	r3, #20
 8003406:	f200 80f0 	bhi.w	80035ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003465 	.word	0x08003465
 8003414:	080035eb 	.word	0x080035eb
 8003418:	080035eb 	.word	0x080035eb
 800341c:	080035eb 	.word	0x080035eb
 8003420:	080034a5 	.word	0x080034a5
 8003424:	080035eb 	.word	0x080035eb
 8003428:	080035eb 	.word	0x080035eb
 800342c:	080035eb 	.word	0x080035eb
 8003430:	080034e7 	.word	0x080034e7
 8003434:	080035eb 	.word	0x080035eb
 8003438:	080035eb 	.word	0x080035eb
 800343c:	080035eb 	.word	0x080035eb
 8003440:	08003527 	.word	0x08003527
 8003444:	080035eb 	.word	0x080035eb
 8003448:	080035eb 	.word	0x080035eb
 800344c:	080035eb 	.word	0x080035eb
 8003450:	08003569 	.word	0x08003569
 8003454:	080035eb 	.word	0x080035eb
 8003458:	080035eb 	.word	0x080035eb
 800345c:	080035eb 	.word	0x080035eb
 8003460:	080035a9 	.word	0x080035a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa54 	bl	8003918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0204 	bic.w	r2, r2, #4
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
      break;
 80034a2:	e0a5      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fac4 	bl	8003a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      break;
 80034e4:	e084      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fb2d 	bl	8003b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0208 	orr.w	r2, r2, #8
 8003500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0204 	bic.w	r2, r2, #4
 8003510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      break;
 8003524:	e064      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb95 	bl	8003c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	61da      	str	r2, [r3, #28]
      break;
 8003566:	e043      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fbfe 	bl	8003d70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80035a6:	e023      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fc42 	bl	8003e38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80035e8:	e002      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
      break;
 80035ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop

08003604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIM_ConfigClockSource+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e0de      	b.n	80037de <HAL_TIM_ConfigClockSource+0x1da>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800363e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f000 80a9 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003660:	4a61      	ldr	r2, [pc, #388]	; (80037e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	f200 80ae 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003668:	4a60      	ldr	r2, [pc, #384]	; (80037ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f000 80a1 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003670:	4a5e      	ldr	r2, [pc, #376]	; (80037ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	f200 80a6 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003678:	4a5d      	ldr	r2, [pc, #372]	; (80037f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800367a:	4293      	cmp	r3, r2
 800367c:	f000 8099 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003680:	4a5b      	ldr	r2, [pc, #364]	; (80037f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f200 809e 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003688:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f000 8091 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	f200 8096 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003698:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800369c:	f000 8089 	beq.w	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80036a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036a4:	f200 808e 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ac:	d03e      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x128>
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b2:	f200 8087 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	f000 8086 	beq.w	80037ca <HAL_TIM_ConfigClockSource+0x1c6>
 80036be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c2:	d87f      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036c4:	2b70      	cmp	r3, #112	; 0x70
 80036c6:	d01a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0xfa>
 80036c8:	2b70      	cmp	r3, #112	; 0x70
 80036ca:	d87b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036cc:	2b60      	cmp	r3, #96	; 0x60
 80036ce:	d050      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x16e>
 80036d0:	2b60      	cmp	r3, #96	; 0x60
 80036d2:	d877      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036d4:	2b50      	cmp	r3, #80	; 0x50
 80036d6:	d03c      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x14e>
 80036d8:	2b50      	cmp	r3, #80	; 0x50
 80036da:	d873      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d058      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x18e>
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d86f      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036e4:	2b30      	cmp	r3, #48	; 0x30
 80036e6:	d064      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80036e8:	2b30      	cmp	r3, #48	; 0x30
 80036ea:	d86b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d060      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d867      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05c      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d05a      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80036fc:	e062      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6899      	ldr	r1, [r3, #8]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f000 fc75 	bl	8003ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]
      break;
 800372a:	e04f      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6899      	ldr	r1, [r3, #8]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f000 fc5e 	bl	8003ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374e:	609a      	str	r2, [r3, #8]
      break;
 8003750:	e03c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	461a      	mov	r2, r3
 8003760:	f000 fbd0 	bl	8003f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2150      	movs	r1, #80	; 0x50
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fc29 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003770:	e02c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	f000 fbef 	bl	8003f62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2160      	movs	r1, #96	; 0x60
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fc19 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003790:	e01c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 fbb0 	bl	8003f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2140      	movs	r1, #64	; 0x40
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fc09 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e00c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 fc00 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 80037c2:	e003      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e000      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80037ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	00100070 	.word	0x00100070
 80037ec:	00100040 	.word	0x00100040
 80037f0:	00100030 	.word	0x00100030
 80037f4:	00100020 	.word	0x00100020

080037f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3c      	ldr	r2, [pc, #240]	; (80038fc <TIM_Base_SetConfig+0x104>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00f      	beq.n	8003830 <TIM_Base_SetConfig+0x38>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d00b      	beq.n	8003830 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a39      	ldr	r2, [pc, #228]	; (8003900 <TIM_Base_SetConfig+0x108>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d007      	beq.n	8003830 <TIM_Base_SetConfig+0x38>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a38      	ldr	r2, [pc, #224]	; (8003904 <TIM_Base_SetConfig+0x10c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0x38>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a37      	ldr	r2, [pc, #220]	; (8003908 <TIM_Base_SetConfig+0x110>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <TIM_Base_SetConfig+0x104>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01b      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d017      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <TIM_Base_SetConfig+0x108>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a29      	ldr	r2, [pc, #164]	; (8003904 <TIM_Base_SetConfig+0x10c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a28      	ldr	r2, [pc, #160]	; (8003908 <TIM_Base_SetConfig+0x110>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <TIM_Base_SetConfig+0x114>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <TIM_Base_SetConfig+0x118>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_Base_SetConfig+0x8a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d108      	bne.n	8003894 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <TIM_Base_SetConfig+0x104>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00f      	beq.n	80038e0 <TIM_Base_SetConfig+0xe8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <TIM_Base_SetConfig+0x110>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <TIM_Base_SetConfig+0xe8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <TIM_Base_SetConfig+0x114>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_Base_SetConfig+0xe8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <TIM_Base_SetConfig+0x118>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_Base_SetConfig+0xe8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d103      	bne.n	80038e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	615a      	str	r2, [r3, #20]
}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40013400 	.word	0x40013400
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800

08003918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0201 	bic.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 0302 	bic.w	r3, r3, #2
 8003964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a2c      	ldr	r2, [pc, #176]	; (8003a24 <TIM_OC1_SetConfig+0x10c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00f      	beq.n	8003998 <TIM_OC1_SetConfig+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2b      	ldr	r2, [pc, #172]	; (8003a28 <TIM_OC1_SetConfig+0x110>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00b      	beq.n	8003998 <TIM_OC1_SetConfig+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a2a      	ldr	r2, [pc, #168]	; (8003a2c <TIM_OC1_SetConfig+0x114>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <TIM_OC1_SetConfig+0x80>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <TIM_OC1_SetConfig+0x118>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_OC1_SetConfig+0x80>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <TIM_OC1_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10c      	bne.n	80039b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0308 	bic.w	r3, r3, #8
 800399e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <TIM_OC1_SetConfig+0x10c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_OC1_SetConfig+0xc2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <TIM_OC1_SetConfig+0x110>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_OC1_SetConfig+0xc2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_OC1_SetConfig+0x114>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_OC1_SetConfig+0xc2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_OC1_SetConfig+0x118>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_OC1_SetConfig+0xc2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <TIM_OC1_SetConfig+0x11c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d111      	bne.n	80039fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0210 	bic.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <TIM_OC2_SetConfig+0x100>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC2_SetConfig+0x6c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <TIM_OC2_SetConfig+0x104>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10d      	bne.n	8003ac0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <TIM_OC2_SetConfig+0x100>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_OC2_SetConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <TIM_OC2_SetConfig+0x104>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_OC2_SetConfig+0xb0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <TIM_OC2_SetConfig+0x108>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC2_SetConfig+0xb0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <TIM_OC2_SetConfig+0x10c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC2_SetConfig+0xb0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <TIM_OC2_SetConfig+0x110>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d113      	bne.n	8003b10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800

08003b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <TIM_OC3_SetConfig+0xfc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_OC3_SetConfig+0x6a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <TIM_OC3_SetConfig+0x100>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10d      	bne.n	8003bd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <TIM_OC3_SetConfig+0xfc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00f      	beq.n	8003bfa <TIM_OC3_SetConfig+0xae>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <TIM_OC3_SetConfig+0x100>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_OC3_SetConfig+0xae>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <TIM_OC3_SetConfig+0x104>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC3_SetConfig+0xae>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <TIM_OC3_SetConfig+0x108>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC3_SetConfig+0xae>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <TIM_OC3_SetConfig+0x10c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <TIM_OC4_SetConfig+0x100>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x6c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <TIM_OC4_SetConfig+0x104>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10d      	bne.n	8003ce4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <TIM_OC4_SetConfig+0x100>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00f      	beq.n	8003d0c <TIM_OC4_SetConfig+0xb0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <TIM_OC4_SetConfig+0x104>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00b      	beq.n	8003d0c <TIM_OC4_SetConfig+0xb0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <TIM_OC4_SetConfig+0x108>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <TIM_OC4_SetConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1a      	ldr	r2, [pc, #104]	; (8003d68 <TIM_OC4_SetConfig+0x10c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC4_SetConfig+0xb0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <TIM_OC4_SetConfig+0x110>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d113      	bne.n	8003d34 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	019b      	lsls	r3, r3, #6
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	019b      	lsls	r3, r3, #6
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40013400 	.word	0x40013400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800

08003d70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <TIM_OC5_SetConfig+0xb4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00f      	beq.n	8003dea <TIM_OC5_SetConfig+0x7a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <TIM_OC5_SetConfig+0xb8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_OC5_SetConfig+0x7a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <TIM_OC5_SetConfig+0xbc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <TIM_OC5_SetConfig+0x7a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <TIM_OC5_SetConfig+0xc0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_OC5_SetConfig+0x7a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <TIM_OC5_SetConfig+0xc4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d109      	bne.n	8003dfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800

08003e38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	051b      	lsls	r3, r3, #20
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <TIM_OC6_SetConfig+0xb8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00f      	beq.n	8003eb4 <TIM_OC6_SetConfig+0x7c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <TIM_OC6_SetConfig+0xbc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_OC6_SetConfig+0x7c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <TIM_OC6_SetConfig+0xc0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_OC6_SetConfig+0x7c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <TIM_OC6_SetConfig+0xc4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC6_SetConfig+0x7c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <TIM_OC6_SetConfig+0xc8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d109      	bne.n	8003ec8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	029b      	lsls	r3, r3, #10
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40013400 	.word	0x40013400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800

08003f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 030a 	bic.w	r3, r3, #10
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0210 	bic.w	r2, r3, #16
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f043 0307 	orr.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	431a      	orrs	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2201      	movs	r2, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800409c:	2302      	movs	r3, #2
 800409e:	e065      	b.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2b      	ldr	r2, [pc, #172]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d013      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10c      	bne.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40013400 	.word	0x40013400
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40014000 	.word	0x40014000

0800418c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e042      	b.n	8004224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fd fae5 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2224      	movs	r2, #36	; 0x24
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f82c 	bl	800422c <UART_SetConfig>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e022      	b.n	8004224 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 faec 	bl	80047c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800420a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fb73 	bl	8004908 <UART_CheckIdleState>
 8004222:	4603      	mov	r3, r0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800422c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004230:	b08c      	sub	sp, #48	; 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4bab      	ldr	r3, [pc, #684]	; (8004508 <UART_SetConfig+0x2dc>)
 800425c:	4013      	ands	r3, r2
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004264:	430b      	orrs	r3, r1
 8004266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4aa0      	ldr	r2, [pc, #640]	; (800450c <UART_SetConfig+0x2e0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004294:	4313      	orrs	r3, r2
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80042a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f023 010f 	bic.w	r1, r3, #15
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a91      	ldr	r2, [pc, #580]	; (8004510 <UART_SetConfig+0x2e4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d125      	bne.n	800431c <UART_SetConfig+0xf0>
 80042d0:	4b90      	ldr	r3, [pc, #576]	; (8004514 <UART_SetConfig+0x2e8>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d81a      	bhi.n	8004314 <UART_SetConfig+0xe8>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0xb8>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004305 	.word	0x08004305
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	0800430d 	.word	0x0800430d
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042fa:	e0d6      	b.n	80044aa <UART_SetConfig+0x27e>
 80042fc:	2302      	movs	r3, #2
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004302:	e0d2      	b.n	80044aa <UART_SetConfig+0x27e>
 8004304:	2304      	movs	r3, #4
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430a:	e0ce      	b.n	80044aa <UART_SetConfig+0x27e>
 800430c:	2308      	movs	r3, #8
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004312:	e0ca      	b.n	80044aa <UART_SetConfig+0x27e>
 8004314:	2310      	movs	r3, #16
 8004316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431a:	e0c6      	b.n	80044aa <UART_SetConfig+0x27e>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <UART_SetConfig+0x2ec>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d138      	bne.n	8004398 <UART_SetConfig+0x16c>
 8004326:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <UART_SetConfig+0x2e8>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d82d      	bhi.n	8004390 <UART_SetConfig+0x164>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x110>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004371 	.word	0x08004371
 8004340:	08004391 	.word	0x08004391
 8004344:	08004391 	.word	0x08004391
 8004348:	08004391 	.word	0x08004391
 800434c:	08004381 	.word	0x08004381
 8004350:	08004391 	.word	0x08004391
 8004354:	08004391 	.word	0x08004391
 8004358:	08004391 	.word	0x08004391
 800435c:	08004379 	.word	0x08004379
 8004360:	08004391 	.word	0x08004391
 8004364:	08004391 	.word	0x08004391
 8004368:	08004391 	.word	0x08004391
 800436c:	08004389 	.word	0x08004389
 8004370:	2300      	movs	r3, #0
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004376:	e098      	b.n	80044aa <UART_SetConfig+0x27e>
 8004378:	2302      	movs	r3, #2
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437e:	e094      	b.n	80044aa <UART_SetConfig+0x27e>
 8004380:	2304      	movs	r3, #4
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004386:	e090      	b.n	80044aa <UART_SetConfig+0x27e>
 8004388:	2308      	movs	r3, #8
 800438a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438e:	e08c      	b.n	80044aa <UART_SetConfig+0x27e>
 8004390:	2310      	movs	r3, #16
 8004392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004396:	e088      	b.n	80044aa <UART_SetConfig+0x27e>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5f      	ldr	r2, [pc, #380]	; (800451c <UART_SetConfig+0x2f0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d125      	bne.n	80043ee <UART_SetConfig+0x1c2>
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <UART_SetConfig+0x2e8>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d016      	beq.n	80043de <UART_SetConfig+0x1b2>
 80043b0:	2b30      	cmp	r3, #48	; 0x30
 80043b2:	d818      	bhi.n	80043e6 <UART_SetConfig+0x1ba>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d00a      	beq.n	80043ce <UART_SetConfig+0x1a2>
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d814      	bhi.n	80043e6 <UART_SetConfig+0x1ba>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <UART_SetConfig+0x19a>
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d008      	beq.n	80043d6 <UART_SetConfig+0x1aa>
 80043c4:	e00f      	b.n	80043e6 <UART_SetConfig+0x1ba>
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043cc:	e06d      	b.n	80044aa <UART_SetConfig+0x27e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d4:	e069      	b.n	80044aa <UART_SetConfig+0x27e>
 80043d6:	2304      	movs	r3, #4
 80043d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043dc:	e065      	b.n	80044aa <UART_SetConfig+0x27e>
 80043de:	2308      	movs	r3, #8
 80043e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e4:	e061      	b.n	80044aa <UART_SetConfig+0x27e>
 80043e6:	2310      	movs	r3, #16
 80043e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ec:	e05d      	b.n	80044aa <UART_SetConfig+0x27e>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4b      	ldr	r2, [pc, #300]	; (8004520 <UART_SetConfig+0x2f4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d125      	bne.n	8004444 <UART_SetConfig+0x218>
 80043f8:	4b46      	ldr	r3, [pc, #280]	; (8004514 <UART_SetConfig+0x2e8>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004402:	2bc0      	cmp	r3, #192	; 0xc0
 8004404:	d016      	beq.n	8004434 <UART_SetConfig+0x208>
 8004406:	2bc0      	cmp	r3, #192	; 0xc0
 8004408:	d818      	bhi.n	800443c <UART_SetConfig+0x210>
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d00a      	beq.n	8004424 <UART_SetConfig+0x1f8>
 800440e:	2b80      	cmp	r3, #128	; 0x80
 8004410:	d814      	bhi.n	800443c <UART_SetConfig+0x210>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <UART_SetConfig+0x1f0>
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d008      	beq.n	800442c <UART_SetConfig+0x200>
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x210>
 800441c:	2300      	movs	r3, #0
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004422:	e042      	b.n	80044aa <UART_SetConfig+0x27e>
 8004424:	2302      	movs	r3, #2
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442a:	e03e      	b.n	80044aa <UART_SetConfig+0x27e>
 800442c:	2304      	movs	r3, #4
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004432:	e03a      	b.n	80044aa <UART_SetConfig+0x27e>
 8004434:	2308      	movs	r3, #8
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443a:	e036      	b.n	80044aa <UART_SetConfig+0x27e>
 800443c:	2310      	movs	r3, #16
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004442:	e032      	b.n	80044aa <UART_SetConfig+0x27e>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a30      	ldr	r2, [pc, #192]	; (800450c <UART_SetConfig+0x2e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d12a      	bne.n	80044a4 <UART_SetConfig+0x278>
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <UART_SetConfig+0x2e8>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800445c:	d01a      	beq.n	8004494 <UART_SetConfig+0x268>
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004462:	d81b      	bhi.n	800449c <UART_SetConfig+0x270>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004468:	d00c      	beq.n	8004484 <UART_SetConfig+0x258>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446e:	d815      	bhi.n	800449c <UART_SetConfig+0x270>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <UART_SetConfig+0x250>
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d008      	beq.n	800448c <UART_SetConfig+0x260>
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x270>
 800447c:	2300      	movs	r3, #0
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004482:	e012      	b.n	80044aa <UART_SetConfig+0x27e>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448a:	e00e      	b.n	80044aa <UART_SetConfig+0x27e>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004492:	e00a      	b.n	80044aa <UART_SetConfig+0x27e>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449a:	e006      	b.n	80044aa <UART_SetConfig+0x27e>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e002      	b.n	80044aa <UART_SetConfig+0x27e>
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <UART_SetConfig+0x2e0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	f040 80a8 	bne.w	8004606 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d834      	bhi.n	8004528 <UART_SetConfig+0x2fc>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x298>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004529 	.word	0x08004529
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004529 	.word	0x08004529
 80044d4:	080044f7 	.word	0x080044f7
 80044d8:	08004529 	.word	0x08004529
 80044dc:	08004529 	.word	0x08004529
 80044e0:	08004529 	.word	0x08004529
 80044e4:	080044ff 	.word	0x080044ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fe fb5e 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80044ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ee:	e021      	b.n	8004534 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <UART_SetConfig+0x2f8>)
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044f4:	e01e      	b.n	8004534 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f6:	f7fe fae9 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044fc:	e01a      	b.n	8004534 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004504:	e016      	b.n	8004534 <UART_SetConfig+0x308>
 8004506:	bf00      	nop
 8004508:	cfff69f3 	.word	0xcfff69f3
 800450c:	40008000 	.word	0x40008000
 8004510:	40013800 	.word	0x40013800
 8004514:	40021000 	.word	0x40021000
 8004518:	40004400 	.word	0x40004400
 800451c:	40004800 	.word	0x40004800
 8004520:	40004c00 	.word	0x40004c00
 8004524:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004532:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 812a 	beq.w	8004790 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4a9e      	ldr	r2, [pc, #632]	; (80047bc <UART_SetConfig+0x590>)
 8004542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004546:	461a      	mov	r2, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	fbb3 f3f2 	udiv	r3, r3, r2
 800454e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	429a      	cmp	r2, r3
 800455e:	d305      	bcc.n	800456c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	429a      	cmp	r2, r3
 800456a:	d903      	bls.n	8004574 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004572:	e10d      	b.n	8004790 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2200      	movs	r2, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	60fa      	str	r2, [r7, #12]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	4a8e      	ldr	r2, [pc, #568]	; (80047bc <UART_SetConfig+0x590>)
 8004582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004586:	b29b      	uxth	r3, r3
 8004588:	2200      	movs	r2, #0
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004596:	f7fc facb 	bl	8000b30 <__aeabi_uldivmod>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	020b      	lsls	r3, r1, #8
 80045ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045b0:	0202      	lsls	r2, r0, #8
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	6849      	ldr	r1, [r1, #4]
 80045b6:	0849      	lsrs	r1, r1, #1
 80045b8:	2000      	movs	r0, #0
 80045ba:	460c      	mov	r4, r1
 80045bc:	4605      	mov	r5, r0
 80045be:	eb12 0804 	adds.w	r8, r2, r4
 80045c2:	eb43 0905 	adc.w	r9, r3, r5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	469a      	mov	sl, r3
 80045ce:	4693      	mov	fp, r2
 80045d0:	4652      	mov	r2, sl
 80045d2:	465b      	mov	r3, fp
 80045d4:	4640      	mov	r0, r8
 80045d6:	4649      	mov	r1, r9
 80045d8:	f7fc faaa 	bl	8000b30 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ea:	d308      	bcc.n	80045fe <UART_SetConfig+0x3d2>
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f2:	d204      	bcs.n	80045fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	e0c8      	b.n	8004790 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004604:	e0c4      	b.n	8004790 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460e:	d167      	bne.n	80046e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004614:	2b08      	cmp	r3, #8
 8004616:	d828      	bhi.n	800466a <UART_SetConfig+0x43e>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x3f4>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe fab0 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800464a:	e014      	b.n	8004676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe fac2 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004652:	e010      	b.n	8004676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <UART_SetConfig+0x594>)
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004658:	e00d      	b.n	8004676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe fa37 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 800465e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004660:	e009      	b.n	8004676 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004668:	e005      	b.n	8004676 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8089 	beq.w	8004790 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <UART_SetConfig+0x590>)
 8004684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004688:	461a      	mov	r2, r3
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004690:	005a      	lsls	r2, r3, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	441a      	add	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	2b0f      	cmp	r3, #15
 80046a8:	d916      	bls.n	80046d8 <UART_SetConfig+0x4ac>
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d212      	bcs.n	80046d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f023 030f 	bic.w	r3, r3, #15
 80046ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	8bfb      	ldrh	r3, [r7, #30]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	8bfa      	ldrh	r2, [r7, #30]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	e05b      	b.n	8004790 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046de:	e057      	b.n	8004790 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d828      	bhi.n	800473a <UART_SetConfig+0x50e>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x4c4>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004715 	.word	0x08004715
 80046f4:	0800471d 	.word	0x0800471d
 80046f8:	08004725 	.word	0x08004725
 80046fc:	0800473b 	.word	0x0800473b
 8004700:	0800472b 	.word	0x0800472b
 8004704:	0800473b 	.word	0x0800473b
 8004708:	0800473b 	.word	0x0800473b
 800470c:	0800473b 	.word	0x0800473b
 8004710:	08004733 	.word	0x08004733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fe fa48 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800471a:	e014      	b.n	8004746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7fe fa5a 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004722:	e010      	b.n	8004746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004724:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <UART_SetConfig+0x594>)
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004728:	e00d      	b.n	8004746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472a:	f7fe f9cf 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004730:	e009      	b.n	8004746 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004738:	e005      	b.n	8004746 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004744:	bf00      	nop
    }

    if (pclk != 0U)
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	2b00      	cmp	r3, #0
 800474a:	d021      	beq.n	8004790 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <UART_SetConfig+0x590>)
 8004752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004756:	461a      	mov	r2, r3
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	fbb3 f2f2 	udiv	r2, r3, r2
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	441a      	add	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d909      	bls.n	800478a <UART_SetConfig+0x55e>
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d205      	bcs.n	800478a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	b29a      	uxth	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	e002      	b.n	8004790 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2201      	movs	r2, #1
 8004794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2201      	movs	r2, #1
 800479c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80047ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3730      	adds	r7, #48	; 0x30
 80047b4:	46bd      	mov	sp, r7
 80047b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ba:	bf00      	nop
 80047bc:	08015764 	.word	0x08015764
 80047c0:	00f42400 	.word	0x00f42400

080047c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01a      	beq.n	80048da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c2:	d10a      	bne.n	80048da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af02      	add	r7, sp, #8
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004918:	f7fd f8e0 	bl	8001adc <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d10e      	bne.n	800494a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f82f 	bl	800499e <UART_WaitOnFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e025      	b.n	8004996 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d10e      	bne.n	8004976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f819 	bl	800499e <UART_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e00f      	b.n	8004996 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b09c      	sub	sp, #112	; 0x70
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ae:	e0a9      	b.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	f000 80a5 	beq.w	8004b04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fd f88f 	bl	8001adc <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d140      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e4:	667b      	str	r3, [r7, #100]	; 0x64
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e6      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e5      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e069      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d051      	beq.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6e:	d149      	bne.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	613b      	str	r3, [r7, #16]
   return(result);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004acc:	623a      	str	r2, [r7, #32]
 8004ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	69f9      	ldr	r1, [r7, #28]
 8004ad2:	6a3a      	ldr	r2, [r7, #32]
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e010      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	f43f af46 	beq.w	80049b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3770      	adds	r7, #112	; 0x70
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e027      	b.n	8004b94 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e02d      	b.n	8004c14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f84f 	bl	8004c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e02d      	b.n	8004c90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f811 	bl	8004c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d108      	bne.n	8004cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cb8:	e031      	b.n	8004d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cba:	2308      	movs	r3, #8
 8004cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	0e5b      	lsrs	r3, r3, #25
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	0f5b      	lsrs	r3, r3, #29
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	7b3a      	ldrb	r2, [r7, #12]
 8004ce6:	4911      	ldr	r1, [pc, #68]	; (8004d2c <UARTEx_SetNbDataToProcess+0x94>)
 8004ce8:	5c8a      	ldrb	r2, [r1, r2]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cee:	7b3a      	ldrb	r2, [r7, #12]
 8004cf0:	490f      	ldr	r1, [pc, #60]	; (8004d30 <UARTEx_SetNbDataToProcess+0x98>)
 8004cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	7b7a      	ldrb	r2, [r7, #13]
 8004d04:	4909      	ldr	r1, [pc, #36]	; (8004d2c <UARTEx_SetNbDataToProcess+0x94>)
 8004d06:	5c8a      	ldrb	r2, [r1, r2]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d0c:	7b7a      	ldrb	r2, [r7, #13]
 8004d0e:	4908      	ldr	r1, [pc, #32]	; (8004d30 <UARTEx_SetNbDataToProcess+0x98>)
 8004d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	0801577c 	.word	0x0801577c
 8004d30:	08015784 	.word	0x08015784

08004d34 <__errno>:
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <__errno+0x8>)
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2000000c 	.word	0x2000000c

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4d0d      	ldr	r5, [pc, #52]	; (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	; (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1b64      	subs	r4, r4, r5
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	42a6      	cmp	r6, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4d0b      	ldr	r5, [pc, #44]	; (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	; (8004d84 <__libc_init_array+0x44>)
 8004d54:	f000 ff3a 	bl	8005bcc <_init>
 8004d58:	1b64      	subs	r4, r4, r5
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	42a6      	cmp	r6, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d68:	4798      	blx	r3
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d72:	4798      	blx	r3
 8004d74:	3601      	adds	r6, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	080157c8 	.word	0x080157c8
 8004d7c:	080157c8 	.word	0x080157c8
 8004d80:	080157c8 	.word	0x080157c8
 8004d84:	080157cc 	.word	0x080157cc

08004d88 <memset>:
 8004d88:	4402      	add	r2, r0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <memset+0xa>
 8004d90:	4770      	bx	lr
 8004d92:	f803 1b01 	strb.w	r1, [r3], #1
 8004d96:	e7f9      	b.n	8004d8c <memset+0x4>

08004d98 <pow>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	ed2d 8b02 	vpush	{d8}
 8004d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8004da2:	eef0 8a60 	vmov.f32	s17, s1
 8004da6:	ec55 4b11 	vmov	r4, r5, d1
 8004daa:	f000 f865 	bl	8004e78 <__ieee754_pow>
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	4620      	mov	r0, r4
 8004db4:	4629      	mov	r1, r5
 8004db6:	ec57 6b10 	vmov	r6, r7, d0
 8004dba:	f7fb fe83 	bl	8000ac4 <__aeabi_dcmpun>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d13b      	bne.n	8004e3a <pow+0xa2>
 8004dc2:	ec51 0b18 	vmov	r0, r1, d8
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f7fb fe49 	bl	8000a60 <__aeabi_dcmpeq>
 8004dce:	b1b8      	cbz	r0, 8004e00 <pow+0x68>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7fb fe42 	bl	8000a60 <__aeabi_dcmpeq>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d146      	bne.n	8004e6e <pow+0xd6>
 8004de0:	ec45 4b10 	vmov	d0, r4, r5
 8004de4:	f000 fe61 	bl	8005aaa <finite>
 8004de8:	b338      	cbz	r0, 8004e3a <pow+0xa2>
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fe3f 	bl	8000a74 <__aeabi_dcmplt>
 8004df6:	b300      	cbz	r0, 8004e3a <pow+0xa2>
 8004df8:	f7ff ff9c 	bl	8004d34 <__errno>
 8004dfc:	2322      	movs	r3, #34	; 0x22
 8004dfe:	e01b      	b.n	8004e38 <pow+0xa0>
 8004e00:	ec47 6b10 	vmov	d0, r6, r7
 8004e04:	f000 fe51 	bl	8005aaa <finite>
 8004e08:	b9e0      	cbnz	r0, 8004e44 <pow+0xac>
 8004e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e0e:	eef0 0a68 	vmov.f32	s1, s17
 8004e12:	f000 fe4a 	bl	8005aaa <finite>
 8004e16:	b1a8      	cbz	r0, 8004e44 <pow+0xac>
 8004e18:	ec45 4b10 	vmov	d0, r4, r5
 8004e1c:	f000 fe45 	bl	8005aaa <finite>
 8004e20:	b180      	cbz	r0, 8004e44 <pow+0xac>
 8004e22:	4632      	mov	r2, r6
 8004e24:	463b      	mov	r3, r7
 8004e26:	4630      	mov	r0, r6
 8004e28:	4639      	mov	r1, r7
 8004e2a:	f7fb fe4b 	bl	8000ac4 <__aeabi_dcmpun>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d0e2      	beq.n	8004df8 <pow+0x60>
 8004e32:	f7ff ff7f 	bl	8004d34 <__errno>
 8004e36:	2321      	movs	r3, #33	; 0x21
 8004e38:	6003      	str	r3, [r0, #0]
 8004e3a:	ecbd 8b02 	vpop	{d8}
 8004e3e:	ec47 6b10 	vmov	d0, r6, r7
 8004e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e44:	2200      	movs	r2, #0
 8004e46:	2300      	movs	r3, #0
 8004e48:	4630      	mov	r0, r6
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	f7fb fe08 	bl	8000a60 <__aeabi_dcmpeq>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d0f2      	beq.n	8004e3a <pow+0xa2>
 8004e54:	eeb0 0a48 	vmov.f32	s0, s16
 8004e58:	eef0 0a68 	vmov.f32	s1, s17
 8004e5c:	f000 fe25 	bl	8005aaa <finite>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d0ea      	beq.n	8004e3a <pow+0xa2>
 8004e64:	ec45 4b10 	vmov	d0, r4, r5
 8004e68:	f000 fe1f 	bl	8005aaa <finite>
 8004e6c:	e7c3      	b.n	8004df6 <pow+0x5e>
 8004e6e:	4f01      	ldr	r7, [pc, #4]	; (8004e74 <pow+0xdc>)
 8004e70:	2600      	movs	r6, #0
 8004e72:	e7e2      	b.n	8004e3a <pow+0xa2>
 8004e74:	3ff00000 	.word	0x3ff00000

08004e78 <__ieee754_pow>:
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	ed2d 8b06 	vpush	{d8-d10}
 8004e80:	b089      	sub	sp, #36	; 0x24
 8004e82:	ed8d 1b00 	vstr	d1, [sp]
 8004e86:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004e8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004e8e:	ea58 0102 	orrs.w	r1, r8, r2
 8004e92:	ec57 6b10 	vmov	r6, r7, d0
 8004e96:	d115      	bne.n	8004ec4 <__ieee754_pow+0x4c>
 8004e98:	19b3      	adds	r3, r6, r6
 8004e9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004e9e:	4152      	adcs	r2, r2
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <__ieee754_pow+0x250>)
 8004ea4:	4193      	sbcs	r3, r2
 8004ea6:	f080 84d2 	bcs.w	800584e <__ieee754_pow+0x9d6>
 8004eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb f9b7 	bl	8000224 <__adddf3>
 8004eb6:	ec41 0b10 	vmov	d0, r0, r1
 8004eba:	b009      	add	sp, #36	; 0x24
 8004ebc:	ecbd 8b06 	vpop	{d8-d10}
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	4b81      	ldr	r3, [pc, #516]	; (80050cc <__ieee754_pow+0x254>)
 8004ec6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004eca:	429c      	cmp	r4, r3
 8004ecc:	ee10 aa10 	vmov	sl, s0
 8004ed0:	463d      	mov	r5, r7
 8004ed2:	dc06      	bgt.n	8004ee2 <__ieee754_pow+0x6a>
 8004ed4:	d101      	bne.n	8004eda <__ieee754_pow+0x62>
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d1e7      	bne.n	8004eaa <__ieee754_pow+0x32>
 8004eda:	4598      	cmp	r8, r3
 8004edc:	dc01      	bgt.n	8004ee2 <__ieee754_pow+0x6a>
 8004ede:	d10f      	bne.n	8004f00 <__ieee754_pow+0x88>
 8004ee0:	b172      	cbz	r2, 8004f00 <__ieee754_pow+0x88>
 8004ee2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004ee6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004eea:	ea55 050a 	orrs.w	r5, r5, sl
 8004eee:	d1dc      	bne.n	8004eaa <__ieee754_pow+0x32>
 8004ef0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004ef4:	18db      	adds	r3, r3, r3
 8004ef6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004efa:	4152      	adcs	r2, r2
 8004efc:	429d      	cmp	r5, r3
 8004efe:	e7d0      	b.n	8004ea2 <__ieee754_pow+0x2a>
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	da3b      	bge.n	8004f7c <__ieee754_pow+0x104>
 8004f04:	4b72      	ldr	r3, [pc, #456]	; (80050d0 <__ieee754_pow+0x258>)
 8004f06:	4598      	cmp	r8, r3
 8004f08:	dc51      	bgt.n	8004fae <__ieee754_pow+0x136>
 8004f0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004f0e:	4598      	cmp	r8, r3
 8004f10:	f340 84ac 	ble.w	800586c <__ieee754_pow+0x9f4>
 8004f14:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f1c:	2b14      	cmp	r3, #20
 8004f1e:	dd0f      	ble.n	8004f40 <__ieee754_pow+0xc8>
 8004f20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004f24:	fa22 f103 	lsr.w	r1, r2, r3
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	f040 849d 	bne.w	800586c <__ieee754_pow+0x9f4>
 8004f32:	f001 0101 	and.w	r1, r1, #1
 8004f36:	f1c1 0302 	rsb	r3, r1, #2
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	b182      	cbz	r2, 8004f60 <__ieee754_pow+0xe8>
 8004f3e:	e05f      	b.n	8005000 <__ieee754_pow+0x188>
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d15b      	bne.n	8004ffc <__ieee754_pow+0x184>
 8004f44:	f1c3 0314 	rsb	r3, r3, #20
 8004f48:	fa48 f103 	asr.w	r1, r8, r3
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	4543      	cmp	r3, r8
 8004f52:	f040 8488 	bne.w	8005866 <__ieee754_pow+0x9ee>
 8004f56:	f001 0101 	and.w	r1, r1, #1
 8004f5a:	f1c1 0302 	rsb	r3, r1, #2
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <__ieee754_pow+0x25c>)
 8004f62:	4598      	cmp	r8, r3
 8004f64:	d132      	bne.n	8004fcc <__ieee754_pow+0x154>
 8004f66:	f1b9 0f00 	cmp.w	r9, #0
 8004f6a:	f280 8478 	bge.w	800585e <__ieee754_pow+0x9e6>
 8004f6e:	4959      	ldr	r1, [pc, #356]	; (80050d4 <__ieee754_pow+0x25c>)
 8004f70:	4632      	mov	r2, r6
 8004f72:	463b      	mov	r3, r7
 8004f74:	2000      	movs	r0, #0
 8004f76:	f7fb fc35 	bl	80007e4 <__aeabi_ddiv>
 8004f7a:	e79c      	b.n	8004eb6 <__ieee754_pow+0x3e>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	d13d      	bne.n	8005000 <__ieee754_pow+0x188>
 8004f84:	4b51      	ldr	r3, [pc, #324]	; (80050cc <__ieee754_pow+0x254>)
 8004f86:	4598      	cmp	r8, r3
 8004f88:	d1ea      	bne.n	8004f60 <__ieee754_pow+0xe8>
 8004f8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004f8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004f92:	ea53 030a 	orrs.w	r3, r3, sl
 8004f96:	f000 845a 	beq.w	800584e <__ieee754_pow+0x9d6>
 8004f9a:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <__ieee754_pow+0x260>)
 8004f9c:	429c      	cmp	r4, r3
 8004f9e:	dd08      	ble.n	8004fb2 <__ieee754_pow+0x13a>
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	f2c0 8457 	blt.w	8005856 <__ieee754_pow+0x9de>
 8004fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fac:	e783      	b.n	8004eb6 <__ieee754_pow+0x3e>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e7e5      	b.n	8004f7e <__ieee754_pow+0x106>
 8004fb2:	f1b9 0f00 	cmp.w	r9, #0
 8004fb6:	f04f 0000 	mov.w	r0, #0
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	f6bf af7a 	bge.w	8004eb6 <__ieee754_pow+0x3e>
 8004fc2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004fc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004fca:	e774      	b.n	8004eb6 <__ieee754_pow+0x3e>
 8004fcc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004fd0:	d106      	bne.n	8004fe0 <__ieee754_pow+0x168>
 8004fd2:	4632      	mov	r2, r6
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	4639      	mov	r1, r7
 8004fda:	f7fb fad9 	bl	8000590 <__aeabi_dmul>
 8004fde:	e76a      	b.n	8004eb6 <__ieee754_pow+0x3e>
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <__ieee754_pow+0x264>)
 8004fe2:	4599      	cmp	r9, r3
 8004fe4:	d10c      	bne.n	8005000 <__ieee754_pow+0x188>
 8004fe6:	2d00      	cmp	r5, #0
 8004fe8:	db0a      	blt.n	8005000 <__ieee754_pow+0x188>
 8004fea:	ec47 6b10 	vmov	d0, r6, r7
 8004fee:	b009      	add	sp, #36	; 0x24
 8004ff0:	ecbd 8b06 	vpop	{d8-d10}
 8004ff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	f000 bc6c 	b.w	80058d4 <__ieee754_sqrt>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	ec47 6b10 	vmov	d0, r6, r7
 8005004:	f000 fd48 	bl	8005a98 <fabs>
 8005008:	ec51 0b10 	vmov	r0, r1, d0
 800500c:	f1ba 0f00 	cmp.w	sl, #0
 8005010:	d129      	bne.n	8005066 <__ieee754_pow+0x1ee>
 8005012:	b124      	cbz	r4, 800501e <__ieee754_pow+0x1a6>
 8005014:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <__ieee754_pow+0x25c>)
 8005016:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800501a:	429a      	cmp	r2, r3
 800501c:	d123      	bne.n	8005066 <__ieee754_pow+0x1ee>
 800501e:	f1b9 0f00 	cmp.w	r9, #0
 8005022:	da05      	bge.n	8005030 <__ieee754_pow+0x1b8>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	2000      	movs	r0, #0
 800502a:	492a      	ldr	r1, [pc, #168]	; (80050d4 <__ieee754_pow+0x25c>)
 800502c:	f7fb fbda 	bl	80007e4 <__aeabi_ddiv>
 8005030:	2d00      	cmp	r5, #0
 8005032:	f6bf af40 	bge.w	8004eb6 <__ieee754_pow+0x3e>
 8005036:	9b04      	ldr	r3, [sp, #16]
 8005038:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800503c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005040:	4323      	orrs	r3, r4
 8005042:	d108      	bne.n	8005056 <__ieee754_pow+0x1de>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	f7fb f8e8 	bl	8000220 <__aeabi_dsub>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	e78f      	b.n	8004f76 <__ieee754_pow+0xfe>
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	2b01      	cmp	r3, #1
 800505a:	f47f af2c 	bne.w	8004eb6 <__ieee754_pow+0x3e>
 800505e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005062:	4619      	mov	r1, r3
 8005064:	e727      	b.n	8004eb6 <__ieee754_pow+0x3e>
 8005066:	0feb      	lsrs	r3, r5, #31
 8005068:	3b01      	subs	r3, #1
 800506a:	9306      	str	r3, [sp, #24]
 800506c:	9a06      	ldr	r2, [sp, #24]
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	d102      	bne.n	800507a <__ieee754_pow+0x202>
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	e7e6      	b.n	8005048 <__ieee754_pow+0x1d0>
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <__ieee754_pow+0x268>)
 800507c:	4598      	cmp	r8, r3
 800507e:	f340 80fb 	ble.w	8005278 <__ieee754_pow+0x400>
 8005082:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005086:	4598      	cmp	r8, r3
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <__ieee754_pow+0x260>)
 800508a:	dd0c      	ble.n	80050a6 <__ieee754_pow+0x22e>
 800508c:	429c      	cmp	r4, r3
 800508e:	dc0f      	bgt.n	80050b0 <__ieee754_pow+0x238>
 8005090:	f1b9 0f00 	cmp.w	r9, #0
 8005094:	da0f      	bge.n	80050b6 <__ieee754_pow+0x23e>
 8005096:	2000      	movs	r0, #0
 8005098:	b009      	add	sp, #36	; 0x24
 800509a:	ecbd 8b06 	vpop	{d8-d10}
 800509e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a2:	f000 bcf0 	b.w	8005a86 <__math_oflow>
 80050a6:	429c      	cmp	r4, r3
 80050a8:	dbf2      	blt.n	8005090 <__ieee754_pow+0x218>
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <__ieee754_pow+0x25c>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	dd19      	ble.n	80050e4 <__ieee754_pow+0x26c>
 80050b0:	f1b9 0f00 	cmp.w	r9, #0
 80050b4:	dcef      	bgt.n	8005096 <__ieee754_pow+0x21e>
 80050b6:	2000      	movs	r0, #0
 80050b8:	b009      	add	sp, #36	; 0x24
 80050ba:	ecbd 8b06 	vpop	{d8-d10}
 80050be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c2:	f000 bcd7 	b.w	8005a74 <__math_uflow>
 80050c6:	bf00      	nop
 80050c8:	fff00000 	.word	0xfff00000
 80050cc:	7ff00000 	.word	0x7ff00000
 80050d0:	433fffff 	.word	0x433fffff
 80050d4:	3ff00000 	.word	0x3ff00000
 80050d8:	3fefffff 	.word	0x3fefffff
 80050dc:	3fe00000 	.word	0x3fe00000
 80050e0:	41e00000 	.word	0x41e00000
 80050e4:	4b60      	ldr	r3, [pc, #384]	; (8005268 <__ieee754_pow+0x3f0>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	f7fb f89a 	bl	8000220 <__aeabi_dsub>
 80050ec:	a354      	add	r3, pc, #336	; (adr r3, 8005240 <__ieee754_pow+0x3c8>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	f7fb fa4b 	bl	8000590 <__aeabi_dmul>
 80050fa:	a353      	add	r3, pc, #332	; (adr r3, 8005248 <__ieee754_pow+0x3d0>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	4606      	mov	r6, r0
 8005102:	460f      	mov	r7, r1
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb fa42 	bl	8000590 <__aeabi_dmul>
 800510c:	4b57      	ldr	r3, [pc, #348]	; (800526c <__ieee754_pow+0x3f4>)
 800510e:	4682      	mov	sl, r0
 8005110:	468b      	mov	fp, r1
 8005112:	2200      	movs	r2, #0
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb fa3a 	bl	8000590 <__aeabi_dmul>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	a14b      	add	r1, pc, #300	; (adr r1, 8005250 <__ieee754_pow+0x3d8>)
 8005122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005126:	f7fb f87b 	bl	8000220 <__aeabi_dsub>
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	f7fb fa2f 	bl	8000590 <__aeabi_dmul>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	2000      	movs	r0, #0
 8005138:	494d      	ldr	r1, [pc, #308]	; (8005270 <__ieee754_pow+0x3f8>)
 800513a:	f7fb f871 	bl	8000220 <__aeabi_dsub>
 800513e:	4622      	mov	r2, r4
 8005140:	4680      	mov	r8, r0
 8005142:	4689      	mov	r9, r1
 8005144:	462b      	mov	r3, r5
 8005146:	4620      	mov	r0, r4
 8005148:	4629      	mov	r1, r5
 800514a:	f7fb fa21 	bl	8000590 <__aeabi_dmul>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb fa1b 	bl	8000590 <__aeabi_dmul>
 800515a:	a33f      	add	r3, pc, #252	; (adr r3, 8005258 <__ieee754_pow+0x3e0>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb fa16 	bl	8000590 <__aeabi_dmul>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4650      	mov	r0, sl
 800516a:	4659      	mov	r1, fp
 800516c:	f7fb f858 	bl	8000220 <__aeabi_dsub>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4680      	mov	r8, r0
 8005176:	4689      	mov	r9, r1
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	f7fb f852 	bl	8000224 <__adddf3>
 8005180:	2000      	movs	r0, #0
 8005182:	4632      	mov	r2, r6
 8005184:	463b      	mov	r3, r7
 8005186:	4604      	mov	r4, r0
 8005188:	460d      	mov	r5, r1
 800518a:	f7fb f849 	bl	8000220 <__aeabi_dsub>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	f7fb f843 	bl	8000220 <__aeabi_dsub>
 800519a:	9b04      	ldr	r3, [sp, #16]
 800519c:	9a06      	ldr	r2, [sp, #24]
 800519e:	3b01      	subs	r3, #1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4682      	mov	sl, r0
 80051a4:	468b      	mov	fp, r1
 80051a6:	f040 81e7 	bne.w	8005578 <__ieee754_pow+0x700>
 80051aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005260 <__ieee754_pow+0x3e8>
 80051ae:	eeb0 8a47 	vmov.f32	s16, s14
 80051b2:	eef0 8a67 	vmov.f32	s17, s15
 80051b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051ba:	2600      	movs	r6, #0
 80051bc:	4632      	mov	r2, r6
 80051be:	463b      	mov	r3, r7
 80051c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c4:	f7fb f82c 	bl	8000220 <__aeabi_dsub>
 80051c8:	4622      	mov	r2, r4
 80051ca:	462b      	mov	r3, r5
 80051cc:	f7fb f9e0 	bl	8000590 <__aeabi_dmul>
 80051d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051d4:	4680      	mov	r8, r0
 80051d6:	4689      	mov	r9, r1
 80051d8:	4650      	mov	r0, sl
 80051da:	4659      	mov	r1, fp
 80051dc:	f7fb f9d8 	bl	8000590 <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4640      	mov	r0, r8
 80051e6:	4649      	mov	r1, r9
 80051e8:	f7fb f81c 	bl	8000224 <__adddf3>
 80051ec:	4632      	mov	r2, r6
 80051ee:	463b      	mov	r3, r7
 80051f0:	4680      	mov	r8, r0
 80051f2:	4689      	mov	r9, r1
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fb f9ca 	bl	8000590 <__aeabi_dmul>
 80051fc:	460b      	mov	r3, r1
 80051fe:	4604      	mov	r4, r0
 8005200:	460d      	mov	r5, r1
 8005202:	4602      	mov	r2, r0
 8005204:	4649      	mov	r1, r9
 8005206:	4640      	mov	r0, r8
 8005208:	f7fb f80c 	bl	8000224 <__adddf3>
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <__ieee754_pow+0x3fc>)
 800520e:	4299      	cmp	r1, r3
 8005210:	ec45 4b19 	vmov	d9, r4, r5
 8005214:	4606      	mov	r6, r0
 8005216:	460f      	mov	r7, r1
 8005218:	468b      	mov	fp, r1
 800521a:	f340 82f1 	ble.w	8005800 <__ieee754_pow+0x988>
 800521e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005222:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005226:	4303      	orrs	r3, r0
 8005228:	f000 81e4 	beq.w	80055f4 <__ieee754_pow+0x77c>
 800522c:	ec51 0b18 	vmov	r0, r1, d8
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	f7fb fc1e 	bl	8000a74 <__aeabi_dcmplt>
 8005238:	3800      	subs	r0, #0
 800523a:	bf18      	it	ne
 800523c:	2001      	movne	r0, #1
 800523e:	e72b      	b.n	8005098 <__ieee754_pow+0x220>
 8005240:	60000000 	.word	0x60000000
 8005244:	3ff71547 	.word	0x3ff71547
 8005248:	f85ddf44 	.word	0xf85ddf44
 800524c:	3e54ae0b 	.word	0x3e54ae0b
 8005250:	55555555 	.word	0x55555555
 8005254:	3fd55555 	.word	0x3fd55555
 8005258:	652b82fe 	.word	0x652b82fe
 800525c:	3ff71547 	.word	0x3ff71547
 8005260:	00000000 	.word	0x00000000
 8005264:	bff00000 	.word	0xbff00000
 8005268:	3ff00000 	.word	0x3ff00000
 800526c:	3fd00000 	.word	0x3fd00000
 8005270:	3fe00000 	.word	0x3fe00000
 8005274:	408fffff 	.word	0x408fffff
 8005278:	4bd5      	ldr	r3, [pc, #852]	; (80055d0 <__ieee754_pow+0x758>)
 800527a:	402b      	ands	r3, r5
 800527c:	2200      	movs	r2, #0
 800527e:	b92b      	cbnz	r3, 800528c <__ieee754_pow+0x414>
 8005280:	4bd4      	ldr	r3, [pc, #848]	; (80055d4 <__ieee754_pow+0x75c>)
 8005282:	f7fb f985 	bl	8000590 <__aeabi_dmul>
 8005286:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800528a:	460c      	mov	r4, r1
 800528c:	1523      	asrs	r3, r4, #20
 800528e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005292:	4413      	add	r3, r2
 8005294:	9305      	str	r3, [sp, #20]
 8005296:	4bd0      	ldr	r3, [pc, #832]	; (80055d8 <__ieee754_pow+0x760>)
 8005298:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800529c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80052a0:	429c      	cmp	r4, r3
 80052a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80052a6:	dd08      	ble.n	80052ba <__ieee754_pow+0x442>
 80052a8:	4bcc      	ldr	r3, [pc, #816]	; (80055dc <__ieee754_pow+0x764>)
 80052aa:	429c      	cmp	r4, r3
 80052ac:	f340 8162 	ble.w	8005574 <__ieee754_pow+0x6fc>
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80052ba:	2400      	movs	r4, #0
 80052bc:	00e3      	lsls	r3, r4, #3
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	4bc7      	ldr	r3, [pc, #796]	; (80055e0 <__ieee754_pow+0x768>)
 80052c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052c6:	ed93 7b00 	vldr	d7, [r3]
 80052ca:	4629      	mov	r1, r5
 80052cc:	ec53 2b17 	vmov	r2, r3, d7
 80052d0:	eeb0 9a47 	vmov.f32	s18, s14
 80052d4:	eef0 9a67 	vmov.f32	s19, s15
 80052d8:	4682      	mov	sl, r0
 80052da:	f7fa ffa1 	bl	8000220 <__aeabi_dsub>
 80052de:	4652      	mov	r2, sl
 80052e0:	4606      	mov	r6, r0
 80052e2:	460f      	mov	r7, r1
 80052e4:	462b      	mov	r3, r5
 80052e6:	ec51 0b19 	vmov	r0, r1, d9
 80052ea:	f7fa ff9b 	bl	8000224 <__adddf3>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	2000      	movs	r0, #0
 80052f4:	49bb      	ldr	r1, [pc, #748]	; (80055e4 <__ieee754_pow+0x76c>)
 80052f6:	f7fb fa75 	bl	80007e4 <__aeabi_ddiv>
 80052fa:	ec41 0b1a 	vmov	d10, r0, r1
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fb f943 	bl	8000590 <__aeabi_dmul>
 800530a:	2300      	movs	r3, #0
 800530c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005310:	9302      	str	r3, [sp, #8]
 8005312:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005316:	46ab      	mov	fp, r5
 8005318:	106d      	asrs	r5, r5, #1
 800531a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800531e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005322:	ec41 0b18 	vmov	d8, r0, r1
 8005326:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800532a:	2200      	movs	r2, #0
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	4614      	mov	r4, r2
 8005332:	461d      	mov	r5, r3
 8005334:	f7fb f92c 	bl	8000590 <__aeabi_dmul>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fa ff6e 	bl	8000220 <__aeabi_dsub>
 8005344:	ec53 2b19 	vmov	r2, r3, d9
 8005348:	4606      	mov	r6, r0
 800534a:	460f      	mov	r7, r1
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	f7fa ff66 	bl	8000220 <__aeabi_dsub>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4650      	mov	r0, sl
 800535a:	4659      	mov	r1, fp
 800535c:	f7fa ff60 	bl	8000220 <__aeabi_dsub>
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	f7fb f914 	bl	8000590 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4630      	mov	r0, r6
 800536e:	4639      	mov	r1, r7
 8005370:	f7fa ff56 	bl	8000220 <__aeabi_dsub>
 8005374:	ec53 2b1a 	vmov	r2, r3, d10
 8005378:	f7fb f90a 	bl	8000590 <__aeabi_dmul>
 800537c:	ec53 2b18 	vmov	r2, r3, d8
 8005380:	ec41 0b19 	vmov	d9, r0, r1
 8005384:	ec51 0b18 	vmov	r0, r1, d8
 8005388:	f7fb f902 	bl	8000590 <__aeabi_dmul>
 800538c:	a37c      	add	r3, pc, #496	; (adr r3, 8005580 <__ieee754_pow+0x708>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	4604      	mov	r4, r0
 8005394:	460d      	mov	r5, r1
 8005396:	f7fb f8fb 	bl	8000590 <__aeabi_dmul>
 800539a:	a37b      	add	r3, pc, #492	; (adr r3, 8005588 <__ieee754_pow+0x710>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fa ff40 	bl	8000224 <__adddf3>
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	f7fb f8f2 	bl	8000590 <__aeabi_dmul>
 80053ac:	a378      	add	r3, pc, #480	; (adr r3, 8005590 <__ieee754_pow+0x718>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fa ff37 	bl	8000224 <__adddf3>
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	f7fb f8e9 	bl	8000590 <__aeabi_dmul>
 80053be:	a376      	add	r3, pc, #472	; (adr r3, 8005598 <__ieee754_pow+0x720>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fa ff2e 	bl	8000224 <__adddf3>
 80053c8:	4622      	mov	r2, r4
 80053ca:	462b      	mov	r3, r5
 80053cc:	f7fb f8e0 	bl	8000590 <__aeabi_dmul>
 80053d0:	a373      	add	r3, pc, #460	; (adr r3, 80055a0 <__ieee754_pow+0x728>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fa ff25 	bl	8000224 <__adddf3>
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	f7fb f8d7 	bl	8000590 <__aeabi_dmul>
 80053e2:	a371      	add	r3, pc, #452	; (adr r3, 80055a8 <__ieee754_pow+0x730>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fa ff1c 	bl	8000224 <__adddf3>
 80053ec:	4622      	mov	r2, r4
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	462b      	mov	r3, r5
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	f7fb f8ca 	bl	8000590 <__aeabi_dmul>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	f7fb f8c4 	bl	8000590 <__aeabi_dmul>
 8005408:	4642      	mov	r2, r8
 800540a:	4604      	mov	r4, r0
 800540c:	460d      	mov	r5, r1
 800540e:	464b      	mov	r3, r9
 8005410:	ec51 0b18 	vmov	r0, r1, d8
 8005414:	f7fa ff06 	bl	8000224 <__adddf3>
 8005418:	ec53 2b19 	vmov	r2, r3, d9
 800541c:	f7fb f8b8 	bl	8000590 <__aeabi_dmul>
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	f7fa fefe 	bl	8000224 <__adddf3>
 8005428:	4642      	mov	r2, r8
 800542a:	4682      	mov	sl, r0
 800542c:	468b      	mov	fp, r1
 800542e:	464b      	mov	r3, r9
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fb f8ac 	bl	8000590 <__aeabi_dmul>
 8005438:	4b6b      	ldr	r3, [pc, #428]	; (80055e8 <__ieee754_pow+0x770>)
 800543a:	2200      	movs	r2, #0
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	f7fa fef0 	bl	8000224 <__adddf3>
 8005444:	4652      	mov	r2, sl
 8005446:	465b      	mov	r3, fp
 8005448:	f7fa feec 	bl	8000224 <__adddf3>
 800544c:	2000      	movs	r0, #0
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4640      	mov	r0, r8
 8005458:	4649      	mov	r1, r9
 800545a:	f7fb f899 	bl	8000590 <__aeabi_dmul>
 800545e:	4b62      	ldr	r3, [pc, #392]	; (80055e8 <__ieee754_pow+0x770>)
 8005460:	4680      	mov	r8, r0
 8005462:	4689      	mov	r9, r1
 8005464:	2200      	movs	r2, #0
 8005466:	4620      	mov	r0, r4
 8005468:	4629      	mov	r1, r5
 800546a:	f7fa fed9 	bl	8000220 <__aeabi_dsub>
 800546e:	4632      	mov	r2, r6
 8005470:	463b      	mov	r3, r7
 8005472:	f7fa fed5 	bl	8000220 <__aeabi_dsub>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4650      	mov	r0, sl
 800547c:	4659      	mov	r1, fp
 800547e:	f7fa fecf 	bl	8000220 <__aeabi_dsub>
 8005482:	ec53 2b18 	vmov	r2, r3, d8
 8005486:	f7fb f883 	bl	8000590 <__aeabi_dmul>
 800548a:	4622      	mov	r2, r4
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	462b      	mov	r3, r5
 8005492:	ec51 0b19 	vmov	r0, r1, d9
 8005496:	f7fb f87b 	bl	8000590 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fa febf 	bl	8000224 <__adddf3>
 80054a6:	4606      	mov	r6, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4640      	mov	r0, r8
 80054b0:	4649      	mov	r1, r9
 80054b2:	f7fa feb7 	bl	8000224 <__adddf3>
 80054b6:	a33e      	add	r3, pc, #248	; (adr r3, 80055b0 <__ieee754_pow+0x738>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	2000      	movs	r0, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	460d      	mov	r5, r1
 80054c2:	f7fb f865 	bl	8000590 <__aeabi_dmul>
 80054c6:	4642      	mov	r2, r8
 80054c8:	ec41 0b18 	vmov	d8, r0, r1
 80054cc:	464b      	mov	r3, r9
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fa fea5 	bl	8000220 <__aeabi_dsub>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	f7fa fe9f 	bl	8000220 <__aeabi_dsub>
 80054e2:	a335      	add	r3, pc, #212	; (adr r3, 80055b8 <__ieee754_pow+0x740>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fb f852 	bl	8000590 <__aeabi_dmul>
 80054ec:	a334      	add	r3, pc, #208	; (adr r3, 80055c0 <__ieee754_pow+0x748>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	4606      	mov	r6, r0
 80054f4:	460f      	mov	r7, r1
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fb f849 	bl	8000590 <__aeabi_dmul>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4630      	mov	r0, r6
 8005504:	4639      	mov	r1, r7
 8005506:	f7fa fe8d 	bl	8000224 <__adddf3>
 800550a:	9a07      	ldr	r2, [sp, #28]
 800550c:	4b37      	ldr	r3, [pc, #220]	; (80055ec <__ieee754_pow+0x774>)
 800550e:	4413      	add	r3, r2
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fa fe86 	bl	8000224 <__adddf3>
 8005518:	4682      	mov	sl, r0
 800551a:	9805      	ldr	r0, [sp, #20]
 800551c:	468b      	mov	fp, r1
 800551e:	f7fa ffcd 	bl	80004bc <__aeabi_i2d>
 8005522:	9a07      	ldr	r2, [sp, #28]
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <__ieee754_pow+0x778>)
 8005526:	4413      	add	r3, r2
 8005528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800552c:	4606      	mov	r6, r0
 800552e:	460f      	mov	r7, r1
 8005530:	4652      	mov	r2, sl
 8005532:	465b      	mov	r3, fp
 8005534:	ec51 0b18 	vmov	r0, r1, d8
 8005538:	f7fa fe74 	bl	8000224 <__adddf3>
 800553c:	4642      	mov	r2, r8
 800553e:	464b      	mov	r3, r9
 8005540:	f7fa fe70 	bl	8000224 <__adddf3>
 8005544:	4632      	mov	r2, r6
 8005546:	463b      	mov	r3, r7
 8005548:	f7fa fe6c 	bl	8000224 <__adddf3>
 800554c:	2000      	movs	r0, #0
 800554e:	4632      	mov	r2, r6
 8005550:	463b      	mov	r3, r7
 8005552:	4604      	mov	r4, r0
 8005554:	460d      	mov	r5, r1
 8005556:	f7fa fe63 	bl	8000220 <__aeabi_dsub>
 800555a:	4642      	mov	r2, r8
 800555c:	464b      	mov	r3, r9
 800555e:	f7fa fe5f 	bl	8000220 <__aeabi_dsub>
 8005562:	ec53 2b18 	vmov	r2, r3, d8
 8005566:	f7fa fe5b 	bl	8000220 <__aeabi_dsub>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4650      	mov	r0, sl
 8005570:	4659      	mov	r1, fp
 8005572:	e610      	b.n	8005196 <__ieee754_pow+0x31e>
 8005574:	2401      	movs	r4, #1
 8005576:	e6a1      	b.n	80052bc <__ieee754_pow+0x444>
 8005578:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80055c8 <__ieee754_pow+0x750>
 800557c:	e617      	b.n	80051ae <__ieee754_pow+0x336>
 800557e:	bf00      	nop
 8005580:	4a454eef 	.word	0x4a454eef
 8005584:	3fca7e28 	.word	0x3fca7e28
 8005588:	93c9db65 	.word	0x93c9db65
 800558c:	3fcd864a 	.word	0x3fcd864a
 8005590:	a91d4101 	.word	0xa91d4101
 8005594:	3fd17460 	.word	0x3fd17460
 8005598:	518f264d 	.word	0x518f264d
 800559c:	3fd55555 	.word	0x3fd55555
 80055a0:	db6fabff 	.word	0xdb6fabff
 80055a4:	3fdb6db6 	.word	0x3fdb6db6
 80055a8:	33333303 	.word	0x33333303
 80055ac:	3fe33333 	.word	0x3fe33333
 80055b0:	e0000000 	.word	0xe0000000
 80055b4:	3feec709 	.word	0x3feec709
 80055b8:	dc3a03fd 	.word	0xdc3a03fd
 80055bc:	3feec709 	.word	0x3feec709
 80055c0:	145b01f5 	.word	0x145b01f5
 80055c4:	be3e2fe0 	.word	0xbe3e2fe0
 80055c8:	00000000 	.word	0x00000000
 80055cc:	3ff00000 	.word	0x3ff00000
 80055d0:	7ff00000 	.word	0x7ff00000
 80055d4:	43400000 	.word	0x43400000
 80055d8:	0003988e 	.word	0x0003988e
 80055dc:	000bb679 	.word	0x000bb679
 80055e0:	08015790 	.word	0x08015790
 80055e4:	3ff00000 	.word	0x3ff00000
 80055e8:	40080000 	.word	0x40080000
 80055ec:	080157b0 	.word	0x080157b0
 80055f0:	080157a0 	.word	0x080157a0
 80055f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80058cc <__ieee754_pow+0xa54>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	4640      	mov	r0, r8
 80055fc:	4649      	mov	r1, r9
 80055fe:	f7fa fe11 	bl	8000224 <__adddf3>
 8005602:	4622      	mov	r2, r4
 8005604:	ec41 0b1a 	vmov	d10, r0, r1
 8005608:	462b      	mov	r3, r5
 800560a:	4630      	mov	r0, r6
 800560c:	4639      	mov	r1, r7
 800560e:	f7fa fe07 	bl	8000220 <__aeabi_dsub>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	ec51 0b1a 	vmov	r0, r1, d10
 800561a:	f7fb fa49 	bl	8000ab0 <__aeabi_dcmpgt>
 800561e:	2800      	cmp	r0, #0
 8005620:	f47f ae04 	bne.w	800522c <__ieee754_pow+0x3b4>
 8005624:	4aa4      	ldr	r2, [pc, #656]	; (80058b8 <__ieee754_pow+0xa40>)
 8005626:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800562a:	4293      	cmp	r3, r2
 800562c:	f340 8108 	ble.w	8005840 <__ieee754_pow+0x9c8>
 8005630:	151b      	asrs	r3, r3, #20
 8005632:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005636:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800563a:	fa4a f303 	asr.w	r3, sl, r3
 800563e:	445b      	add	r3, fp
 8005640:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005644:	4e9d      	ldr	r6, [pc, #628]	; (80058bc <__ieee754_pow+0xa44>)
 8005646:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800564a:	4116      	asrs	r6, r2
 800564c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005650:	2000      	movs	r0, #0
 8005652:	ea23 0106 	bic.w	r1, r3, r6
 8005656:	f1c2 0214 	rsb	r2, r2, #20
 800565a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800565e:	fa4a fa02 	asr.w	sl, sl, r2
 8005662:	f1bb 0f00 	cmp.w	fp, #0
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4620      	mov	r0, r4
 800566c:	4629      	mov	r1, r5
 800566e:	bfb8      	it	lt
 8005670:	f1ca 0a00 	rsblt	sl, sl, #0
 8005674:	f7fa fdd4 	bl	8000220 <__aeabi_dsub>
 8005678:	ec41 0b19 	vmov	d9, r0, r1
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	ec51 0b19 	vmov	r0, r1, d9
 8005684:	f7fa fdce 	bl	8000224 <__adddf3>
 8005688:	a37b      	add	r3, pc, #492	; (adr r3, 8005878 <__ieee754_pow+0xa00>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	2000      	movs	r0, #0
 8005690:	4604      	mov	r4, r0
 8005692:	460d      	mov	r5, r1
 8005694:	f7fa ff7c 	bl	8000590 <__aeabi_dmul>
 8005698:	ec53 2b19 	vmov	r2, r3, d9
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fdbc 	bl	8000220 <__aeabi_dsub>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fa fdb6 	bl	8000220 <__aeabi_dsub>
 80056b4:	a372      	add	r3, pc, #456	; (adr r3, 8005880 <__ieee754_pow+0xa08>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa ff69 	bl	8000590 <__aeabi_dmul>
 80056be:	a372      	add	r3, pc, #456	; (adr r3, 8005888 <__ieee754_pow+0xa10>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	4680      	mov	r8, r0
 80056c6:	4689      	mov	r9, r1
 80056c8:	4620      	mov	r0, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	f7fa ff60 	bl	8000590 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	f7fa fda4 	bl	8000224 <__adddf3>
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4630      	mov	r0, r6
 80056e6:	4639      	mov	r1, r7
 80056e8:	f7fa fd9c 	bl	8000224 <__adddf3>
 80056ec:	4632      	mov	r2, r6
 80056ee:	463b      	mov	r3, r7
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	f7fa fd94 	bl	8000220 <__aeabi_dsub>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa fd8e 	bl	8000220 <__aeabi_dsub>
 8005704:	4642      	mov	r2, r8
 8005706:	4606      	mov	r6, r0
 8005708:	460f      	mov	r7, r1
 800570a:	464b      	mov	r3, r9
 800570c:	4640      	mov	r0, r8
 800570e:	4649      	mov	r1, r9
 8005710:	f7fa ff3e 	bl	8000590 <__aeabi_dmul>
 8005714:	a35e      	add	r3, pc, #376	; (adr r3, 8005890 <__ieee754_pow+0xa18>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	4604      	mov	r4, r0
 800571c:	460d      	mov	r5, r1
 800571e:	f7fa ff37 	bl	8000590 <__aeabi_dmul>
 8005722:	a35d      	add	r3, pc, #372	; (adr r3, 8005898 <__ieee754_pow+0xa20>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa fd7a 	bl	8000220 <__aeabi_dsub>
 800572c:	4622      	mov	r2, r4
 800572e:	462b      	mov	r3, r5
 8005730:	f7fa ff2e 	bl	8000590 <__aeabi_dmul>
 8005734:	a35a      	add	r3, pc, #360	; (adr r3, 80058a0 <__ieee754_pow+0xa28>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa fd73 	bl	8000224 <__adddf3>
 800573e:	4622      	mov	r2, r4
 8005740:	462b      	mov	r3, r5
 8005742:	f7fa ff25 	bl	8000590 <__aeabi_dmul>
 8005746:	a358      	add	r3, pc, #352	; (adr r3, 80058a8 <__ieee754_pow+0xa30>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fa fd68 	bl	8000220 <__aeabi_dsub>
 8005750:	4622      	mov	r2, r4
 8005752:	462b      	mov	r3, r5
 8005754:	f7fa ff1c 	bl	8000590 <__aeabi_dmul>
 8005758:	a355      	add	r3, pc, #340	; (adr r3, 80058b0 <__ieee754_pow+0xa38>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa fd61 	bl	8000224 <__adddf3>
 8005762:	4622      	mov	r2, r4
 8005764:	462b      	mov	r3, r5
 8005766:	f7fa ff13 	bl	8000590 <__aeabi_dmul>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4640      	mov	r0, r8
 8005770:	4649      	mov	r1, r9
 8005772:	f7fa fd55 	bl	8000220 <__aeabi_dsub>
 8005776:	4604      	mov	r4, r0
 8005778:	460d      	mov	r5, r1
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fa ff05 	bl	8000590 <__aeabi_dmul>
 8005786:	2200      	movs	r2, #0
 8005788:	ec41 0b19 	vmov	d9, r0, r1
 800578c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005790:	4620      	mov	r0, r4
 8005792:	4629      	mov	r1, r5
 8005794:	f7fa fd44 	bl	8000220 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	ec51 0b19 	vmov	r0, r1, d9
 80057a0:	f7fb f820 	bl	80007e4 <__aeabi_ddiv>
 80057a4:	4632      	mov	r2, r6
 80057a6:	4604      	mov	r4, r0
 80057a8:	460d      	mov	r5, r1
 80057aa:	463b      	mov	r3, r7
 80057ac:	4640      	mov	r0, r8
 80057ae:	4649      	mov	r1, r9
 80057b0:	f7fa feee 	bl	8000590 <__aeabi_dmul>
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	f7fa fd34 	bl	8000224 <__adddf3>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4620      	mov	r0, r4
 80057c2:	4629      	mov	r1, r5
 80057c4:	f7fa fd2c 	bl	8000220 <__aeabi_dsub>
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	f7fa fd28 	bl	8000220 <__aeabi_dsub>
 80057d0:	460b      	mov	r3, r1
 80057d2:	4602      	mov	r2, r0
 80057d4:	493a      	ldr	r1, [pc, #232]	; (80058c0 <__ieee754_pow+0xa48>)
 80057d6:	2000      	movs	r0, #0
 80057d8:	f7fa fd22 	bl	8000220 <__aeabi_dsub>
 80057dc:	ec41 0b10 	vmov	d0, r0, r1
 80057e0:	ee10 3a90 	vmov	r3, s1
 80057e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80057e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ec:	da2b      	bge.n	8005846 <__ieee754_pow+0x9ce>
 80057ee:	4650      	mov	r0, sl
 80057f0:	f000 f966 	bl	8005ac0 <scalbn>
 80057f4:	ec51 0b10 	vmov	r0, r1, d0
 80057f8:	ec53 2b18 	vmov	r2, r3, d8
 80057fc:	f7ff bbed 	b.w	8004fda <__ieee754_pow+0x162>
 8005800:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <__ieee754_pow+0xa4c>)
 8005802:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005806:	429e      	cmp	r6, r3
 8005808:	f77f af0c 	ble.w	8005624 <__ieee754_pow+0x7ac>
 800580c:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <__ieee754_pow+0xa50>)
 800580e:	440b      	add	r3, r1
 8005810:	4303      	orrs	r3, r0
 8005812:	d009      	beq.n	8005828 <__ieee754_pow+0x9b0>
 8005814:	ec51 0b18 	vmov	r0, r1, d8
 8005818:	2200      	movs	r2, #0
 800581a:	2300      	movs	r3, #0
 800581c:	f7fb f92a 	bl	8000a74 <__aeabi_dcmplt>
 8005820:	3800      	subs	r0, #0
 8005822:	bf18      	it	ne
 8005824:	2001      	movne	r0, #1
 8005826:	e447      	b.n	80050b8 <__ieee754_pow+0x240>
 8005828:	4622      	mov	r2, r4
 800582a:	462b      	mov	r3, r5
 800582c:	f7fa fcf8 	bl	8000220 <__aeabi_dsub>
 8005830:	4642      	mov	r2, r8
 8005832:	464b      	mov	r3, r9
 8005834:	f7fb f932 	bl	8000a9c <__aeabi_dcmpge>
 8005838:	2800      	cmp	r0, #0
 800583a:	f43f aef3 	beq.w	8005624 <__ieee754_pow+0x7ac>
 800583e:	e7e9      	b.n	8005814 <__ieee754_pow+0x99c>
 8005840:	f04f 0a00 	mov.w	sl, #0
 8005844:	e71a      	b.n	800567c <__ieee754_pow+0x804>
 8005846:	ec51 0b10 	vmov	r0, r1, d0
 800584a:	4619      	mov	r1, r3
 800584c:	e7d4      	b.n	80057f8 <__ieee754_pow+0x980>
 800584e:	491c      	ldr	r1, [pc, #112]	; (80058c0 <__ieee754_pow+0xa48>)
 8005850:	2000      	movs	r0, #0
 8005852:	f7ff bb30 	b.w	8004eb6 <__ieee754_pow+0x3e>
 8005856:	2000      	movs	r0, #0
 8005858:	2100      	movs	r1, #0
 800585a:	f7ff bb2c 	b.w	8004eb6 <__ieee754_pow+0x3e>
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7ff bb28 	b.w	8004eb6 <__ieee754_pow+0x3e>
 8005866:	9204      	str	r2, [sp, #16]
 8005868:	f7ff bb7a 	b.w	8004f60 <__ieee754_pow+0xe8>
 800586c:	2300      	movs	r3, #0
 800586e:	f7ff bb64 	b.w	8004f3a <__ieee754_pow+0xc2>
 8005872:	bf00      	nop
 8005874:	f3af 8000 	nop.w
 8005878:	00000000 	.word	0x00000000
 800587c:	3fe62e43 	.word	0x3fe62e43
 8005880:	fefa39ef 	.word	0xfefa39ef
 8005884:	3fe62e42 	.word	0x3fe62e42
 8005888:	0ca86c39 	.word	0x0ca86c39
 800588c:	be205c61 	.word	0xbe205c61
 8005890:	72bea4d0 	.word	0x72bea4d0
 8005894:	3e663769 	.word	0x3e663769
 8005898:	c5d26bf1 	.word	0xc5d26bf1
 800589c:	3ebbbd41 	.word	0x3ebbbd41
 80058a0:	af25de2c 	.word	0xaf25de2c
 80058a4:	3f11566a 	.word	0x3f11566a
 80058a8:	16bebd93 	.word	0x16bebd93
 80058ac:	3f66c16c 	.word	0x3f66c16c
 80058b0:	5555553e 	.word	0x5555553e
 80058b4:	3fc55555 	.word	0x3fc55555
 80058b8:	3fe00000 	.word	0x3fe00000
 80058bc:	000fffff 	.word	0x000fffff
 80058c0:	3ff00000 	.word	0x3ff00000
 80058c4:	4090cbff 	.word	0x4090cbff
 80058c8:	3f6f3400 	.word	0x3f6f3400
 80058cc:	652b82fe 	.word	0x652b82fe
 80058d0:	3c971547 	.word	0x3c971547

080058d4 <__ieee754_sqrt>:
 80058d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d8:	ec55 4b10 	vmov	r4, r5, d0
 80058dc:	4e55      	ldr	r6, [pc, #340]	; (8005a34 <__ieee754_sqrt+0x160>)
 80058de:	43ae      	bics	r6, r5
 80058e0:	ee10 0a10 	vmov	r0, s0
 80058e4:	ee10 3a10 	vmov	r3, s0
 80058e8:	462a      	mov	r2, r5
 80058ea:	4629      	mov	r1, r5
 80058ec:	d110      	bne.n	8005910 <__ieee754_sqrt+0x3c>
 80058ee:	ee10 2a10 	vmov	r2, s0
 80058f2:	462b      	mov	r3, r5
 80058f4:	f7fa fe4c 	bl	8000590 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4620      	mov	r0, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	f7fa fc90 	bl	8000224 <__adddf3>
 8005904:	4604      	mov	r4, r0
 8005906:	460d      	mov	r5, r1
 8005908:	ec45 4b10 	vmov	d0, r4, r5
 800590c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005910:	2d00      	cmp	r5, #0
 8005912:	dc10      	bgt.n	8005936 <__ieee754_sqrt+0x62>
 8005914:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005918:	4330      	orrs	r0, r6
 800591a:	d0f5      	beq.n	8005908 <__ieee754_sqrt+0x34>
 800591c:	b15d      	cbz	r5, 8005936 <__ieee754_sqrt+0x62>
 800591e:	ee10 2a10 	vmov	r2, s0
 8005922:	462b      	mov	r3, r5
 8005924:	ee10 0a10 	vmov	r0, s0
 8005928:	f7fa fc7a 	bl	8000220 <__aeabi_dsub>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	f7fa ff58 	bl	80007e4 <__aeabi_ddiv>
 8005934:	e7e6      	b.n	8005904 <__ieee754_sqrt+0x30>
 8005936:	1512      	asrs	r2, r2, #20
 8005938:	d074      	beq.n	8005a24 <__ieee754_sqrt+0x150>
 800593a:	07d4      	lsls	r4, r2, #31
 800593c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005940:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005948:	bf5e      	ittt	pl
 800594a:	0fda      	lsrpl	r2, r3, #31
 800594c:	005b      	lslpl	r3, r3, #1
 800594e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005952:	2400      	movs	r4, #0
 8005954:	0fda      	lsrs	r2, r3, #31
 8005956:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800595a:	107f      	asrs	r7, r7, #1
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2516      	movs	r5, #22
 8005960:	4620      	mov	r0, r4
 8005962:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005966:	1886      	adds	r6, r0, r2
 8005968:	428e      	cmp	r6, r1
 800596a:	bfde      	ittt	le
 800596c:	1b89      	suble	r1, r1, r6
 800596e:	18b0      	addle	r0, r6, r2
 8005970:	18a4      	addle	r4, r4, r2
 8005972:	0049      	lsls	r1, r1, #1
 8005974:	3d01      	subs	r5, #1
 8005976:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800597a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800597e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005982:	d1f0      	bne.n	8005966 <__ieee754_sqrt+0x92>
 8005984:	462a      	mov	r2, r5
 8005986:	f04f 0e20 	mov.w	lr, #32
 800598a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800598e:	4281      	cmp	r1, r0
 8005990:	eb06 0c05 	add.w	ip, r6, r5
 8005994:	dc02      	bgt.n	800599c <__ieee754_sqrt+0xc8>
 8005996:	d113      	bne.n	80059c0 <__ieee754_sqrt+0xec>
 8005998:	459c      	cmp	ip, r3
 800599a:	d811      	bhi.n	80059c0 <__ieee754_sqrt+0xec>
 800599c:	f1bc 0f00 	cmp.w	ip, #0
 80059a0:	eb0c 0506 	add.w	r5, ip, r6
 80059a4:	da43      	bge.n	8005a2e <__ieee754_sqrt+0x15a>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	db41      	blt.n	8005a2e <__ieee754_sqrt+0x15a>
 80059aa:	f100 0801 	add.w	r8, r0, #1
 80059ae:	1a09      	subs	r1, r1, r0
 80059b0:	459c      	cmp	ip, r3
 80059b2:	bf88      	it	hi
 80059b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80059b8:	eba3 030c 	sub.w	r3, r3, ip
 80059bc:	4432      	add	r2, r6
 80059be:	4640      	mov	r0, r8
 80059c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80059c4:	f1be 0e01 	subs.w	lr, lr, #1
 80059c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80059cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059d4:	d1db      	bne.n	800598e <__ieee754_sqrt+0xba>
 80059d6:	430b      	orrs	r3, r1
 80059d8:	d006      	beq.n	80059e8 <__ieee754_sqrt+0x114>
 80059da:	1c50      	adds	r0, r2, #1
 80059dc:	bf13      	iteet	ne
 80059de:	3201      	addne	r2, #1
 80059e0:	3401      	addeq	r4, #1
 80059e2:	4672      	moveq	r2, lr
 80059e4:	f022 0201 	bicne.w	r2, r2, #1
 80059e8:	1063      	asrs	r3, r4, #1
 80059ea:	0852      	lsrs	r2, r2, #1
 80059ec:	07e1      	lsls	r1, r4, #31
 80059ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80059f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80059f6:	bf48      	it	mi
 80059f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80059fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005a00:	4614      	mov	r4, r2
 8005a02:	e781      	b.n	8005908 <__ieee754_sqrt+0x34>
 8005a04:	0ad9      	lsrs	r1, r3, #11
 8005a06:	3815      	subs	r0, #21
 8005a08:	055b      	lsls	r3, r3, #21
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d0fa      	beq.n	8005a04 <__ieee754_sqrt+0x130>
 8005a0e:	02cd      	lsls	r5, r1, #11
 8005a10:	d50a      	bpl.n	8005a28 <__ieee754_sqrt+0x154>
 8005a12:	f1c2 0420 	rsb	r4, r2, #32
 8005a16:	fa23 f404 	lsr.w	r4, r3, r4
 8005a1a:	1e55      	subs	r5, r2, #1
 8005a1c:	4093      	lsls	r3, r2
 8005a1e:	4321      	orrs	r1, r4
 8005a20:	1b42      	subs	r2, r0, r5
 8005a22:	e78a      	b.n	800593a <__ieee754_sqrt+0x66>
 8005a24:	4610      	mov	r0, r2
 8005a26:	e7f0      	b.n	8005a0a <__ieee754_sqrt+0x136>
 8005a28:	0049      	lsls	r1, r1, #1
 8005a2a:	3201      	adds	r2, #1
 8005a2c:	e7ef      	b.n	8005a0e <__ieee754_sqrt+0x13a>
 8005a2e:	4680      	mov	r8, r0
 8005a30:	e7bd      	b.n	80059ae <__ieee754_sqrt+0xda>
 8005a32:	bf00      	nop
 8005a34:	7ff00000 	.word	0x7ff00000

08005a38 <with_errno>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	4616      	mov	r6, r2
 8005a40:	f7ff f978 	bl	8004d34 <__errno>
 8005a44:	4629      	mov	r1, r5
 8005a46:	6006      	str	r6, [r0, #0]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}

08005a4c <xflow>:
 8005a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a4e:	4614      	mov	r4, r2
 8005a50:	461d      	mov	r5, r3
 8005a52:	b108      	cbz	r0, 8005a58 <xflow+0xc>
 8005a54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a58:	e9cd 2300 	strd	r2, r3, [sp]
 8005a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a60:	4620      	mov	r0, r4
 8005a62:	4629      	mov	r1, r5
 8005a64:	f7fa fd94 	bl	8000590 <__aeabi_dmul>
 8005a68:	2222      	movs	r2, #34	; 0x22
 8005a6a:	b003      	add	sp, #12
 8005a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a70:	f7ff bfe2 	b.w	8005a38 <with_errno>

08005a74 <__math_uflow>:
 8005a74:	b508      	push	{r3, lr}
 8005a76:	2200      	movs	r2, #0
 8005a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a7c:	f7ff ffe6 	bl	8005a4c <xflow>
 8005a80:	ec41 0b10 	vmov	d0, r0, r1
 8005a84:	bd08      	pop	{r3, pc}

08005a86 <__math_oflow>:
 8005a86:	b508      	push	{r3, lr}
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a8e:	f7ff ffdd 	bl	8005a4c <xflow>
 8005a92:	ec41 0b10 	vmov	d0, r0, r1
 8005a96:	bd08      	pop	{r3, pc}

08005a98 <fabs>:
 8005a98:	ec51 0b10 	vmov	r0, r1, d0
 8005a9c:	ee10 2a10 	vmov	r2, s0
 8005aa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005aa4:	ec43 2b10 	vmov	d0, r2, r3
 8005aa8:	4770      	bx	lr

08005aaa <finite>:
 8005aaa:	b082      	sub	sp, #8
 8005aac:	ed8d 0b00 	vstr	d0, [sp]
 8005ab0:	9801      	ldr	r0, [sp, #4]
 8005ab2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005ab6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005aba:	0fc0      	lsrs	r0, r0, #31
 8005abc:	b002      	add	sp, #8
 8005abe:	4770      	bx	lr

08005ac0 <scalbn>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	ec55 4b10 	vmov	r4, r5, d0
 8005ac6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005aca:	4606      	mov	r6, r0
 8005acc:	462b      	mov	r3, r5
 8005ace:	b99a      	cbnz	r2, 8005af8 <scalbn+0x38>
 8005ad0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ad4:	4323      	orrs	r3, r4
 8005ad6:	d036      	beq.n	8005b46 <scalbn+0x86>
 8005ad8:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <scalbn+0x100>)
 8005ada:	4629      	mov	r1, r5
 8005adc:	ee10 0a10 	vmov	r0, s0
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f7fa fd55 	bl	8000590 <__aeabi_dmul>
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <scalbn+0x104>)
 8005ae8:	429e      	cmp	r6, r3
 8005aea:	4604      	mov	r4, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	da10      	bge.n	8005b12 <scalbn+0x52>
 8005af0:	a32b      	add	r3, pc, #172	; (adr r3, 8005ba0 <scalbn+0xe0>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	e03a      	b.n	8005b6e <scalbn+0xae>
 8005af8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005afc:	428a      	cmp	r2, r1
 8005afe:	d10c      	bne.n	8005b1a <scalbn+0x5a>
 8005b00:	ee10 2a10 	vmov	r2, s0
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fb8c 	bl	8000224 <__adddf3>
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	460d      	mov	r5, r1
 8005b10:	e019      	b.n	8005b46 <scalbn+0x86>
 8005b12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b16:	460b      	mov	r3, r1
 8005b18:	3a36      	subs	r2, #54	; 0x36
 8005b1a:	4432      	add	r2, r6
 8005b1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b20:	428a      	cmp	r2, r1
 8005b22:	dd08      	ble.n	8005b36 <scalbn+0x76>
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	a120      	add	r1, pc, #128	; (adr r1, 8005ba8 <scalbn+0xe8>)
 8005b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b2c:	da1c      	bge.n	8005b68 <scalbn+0xa8>
 8005b2e:	a120      	add	r1, pc, #128	; (adr r1, 8005bb0 <scalbn+0xf0>)
 8005b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b34:	e018      	b.n	8005b68 <scalbn+0xa8>
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	dd08      	ble.n	8005b4c <scalbn+0x8c>
 8005b3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b46:	ec45 4b10 	vmov	d0, r4, r5
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b50:	da19      	bge.n	8005b86 <scalbn+0xc6>
 8005b52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b56:	429e      	cmp	r6, r3
 8005b58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005b5c:	dd0a      	ble.n	8005b74 <scalbn+0xb4>
 8005b5e:	a112      	add	r1, pc, #72	; (adr r1, 8005ba8 <scalbn+0xe8>)
 8005b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e2      	bne.n	8005b2e <scalbn+0x6e>
 8005b68:	a30f      	add	r3, pc, #60	; (adr r3, 8005ba8 <scalbn+0xe8>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fd0f 	bl	8000590 <__aeabi_dmul>
 8005b72:	e7cb      	b.n	8005b0c <scalbn+0x4c>
 8005b74:	a10a      	add	r1, pc, #40	; (adr r1, 8005ba0 <scalbn+0xe0>)
 8005b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0b8      	beq.n	8005af0 <scalbn+0x30>
 8005b7e:	a10e      	add	r1, pc, #56	; (adr r1, 8005bb8 <scalbn+0xf8>)
 8005b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b84:	e7b4      	b.n	8005af0 <scalbn+0x30>
 8005b86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b8a:	3236      	adds	r2, #54	; 0x36
 8005b8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005b94:	4620      	mov	r0, r4
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <scalbn+0x108>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	e7e8      	b.n	8005b6e <scalbn+0xae>
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	c2f8f359 	.word	0xc2f8f359
 8005ba4:	01a56e1f 	.word	0x01a56e1f
 8005ba8:	8800759c 	.word	0x8800759c
 8005bac:	7e37e43c 	.word	0x7e37e43c
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	fe37e43c 	.word	0xfe37e43c
 8005bb8:	c2f8f359 	.word	0xc2f8f359
 8005bbc:	81a56e1f 	.word	0x81a56e1f
 8005bc0:	43500000 	.word	0x43500000
 8005bc4:	ffff3cb0 	.word	0xffff3cb0
 8005bc8:	3c900000 	.word	0x3c900000

08005bcc <_init>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_fini>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr
