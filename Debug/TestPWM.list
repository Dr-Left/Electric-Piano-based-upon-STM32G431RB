
TestPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005664  08005664  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800566c  0800566c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08005680  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08005680  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ccd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207a  00000000  00000000  00031d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00034d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4f0  00000000  00000000  00035c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125f1  00000000  00000000  00053140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1f55  00000000  00000000  00065731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004500  00000000  00000000  001276d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004c7c 	.word	0x08004c7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004c7c 	.word	0x08004c7c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <setPWM>:

//int score_len = 0;
//long int dot[] = {0,300,300*2,300*4,(int)300/2};

void setPWM(double freq, int duty_percent)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e12:	6078      	str	r0, [r7, #4]
	if (freq == 0) {
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e20:	f7ff fe1e 	bl	8000a60 <__aeabi_dcmpeq>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <setPWM+0x2a>
		TIM3->CCR1 = 0;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <setPWM+0xb0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 8000e30:	e03b      	b.n	8000eaa <setPWM+0xa2>
	}
	TIM3->ARR = 10000 / freq - 1;
 8000e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e36:	a11e      	add	r1, pc, #120	; (adr r1, 8000eb0 <setPWM+0xa8>)
 8000e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e3c:	f7ff fcd2 	bl	80007e4 <__aeabi_ddiv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <setPWM+0xb4>)
 8000e4e:	f7ff f9e7 	bl	8000220 <__aeabi_dsub>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4c18      	ldr	r4, [pc, #96]	; (8000eb8 <setPWM+0xb0>)
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f7ff fe32 	bl	8000ac4 <__aeabi_d2uiz>
 8000e60:	4603      	mov	r3, r0
 8000e62:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->CCR1 = (double)duty_percent * (TIM3->ARR + 1) / 100.0;
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fb29 	bl	80004bc <__aeabi_i2d>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	460d      	mov	r5, r1
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <setPWM+0xb0>)
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	3301      	adds	r3, #1
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fb11 	bl	800049c <__aeabi_ui2d>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4620      	mov	r0, r4
 8000e80:	4629      	mov	r1, r5
 8000e82:	f7ff fb85 	bl	8000590 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <setPWM+0xb8>)
 8000e94:	f7ff fca6 	bl	80007e4 <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4c06      	ldr	r4, [pc, #24]	; (8000eb8 <setPWM+0xb0>)
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe0f 	bl	8000ac4 <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	40c38800 	.word	0x40c38800
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	3ff00000 	.word	0x3ff00000
 8000ec0:	40590000 	.word	0x40590000
 8000ec4:	00000000 	.word	0x00000000

08000ec8 <init_piano>:

void init_piano()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
	unsigned int i;
	for (i=1;i<8;i++) {
 8000ece:	2301      	movs	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	e013      	b.n	8000efc <init_piano+0x34>
		setPWM(note_freq[i], DEFAULT_DUTY);
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <init_piano+0x58>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fadd 	bl	800049c <__aeabi_ui2d>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	205a      	movs	r0, #90	; 0x5a
 8000ee8:	ec43 2b10 	vmov	d0, r2, r3
 8000eec:	f7ff ff8c 	bl	8000e08 <setPWM>
		HAL_Delay(200);
 8000ef0:	20c8      	movs	r0, #200	; 0xc8
 8000ef2:	f000 fd77 	bl	80019e4 <HAL_Delay>
	for (i=1;i<8;i++) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	d9e8      	bls.n	8000ed4 <init_piano+0xc>
	}
	setPWM(0, 100);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8000f18 <init_piano+0x50>
 8000f08:	f7ff ff7e 	bl	8000e08 <setPWM>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	f3af 8000 	nop.w
	...
 8000f20:	08004c94 	.word	0x08004c94

08000f24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Keys interrupt
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
//	if (clock - lastTime <= 80) {
//		lastTime = clock;
//		return ;
//	}
//	lastTime = clock;
	if (GPIO_Pin == GPIO_PIN_8) {
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f34:	d116      	bne.n	8000f64 <HAL_GPIO_EXTI_Callback+0x40>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8000f36:	2101      	movs	r1, #1
 8000f38:	4872      	ldr	r0, [pc, #456]	; (8001104 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000f3a:	f001 f807 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80db 	beq.w	80010fc <HAL_GPIO_EXTI_Callback+0x1d8>
			// switch mode
			play_mode = (play_mode + 1) % TOTAL_MODES;
 8000f46:	4b70      	ldr	r3, [pc, #448]	; (8001108 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1c59      	adds	r1, r3, #1
 8000f4c:	4b6f      	ldr	r3, [pc, #444]	; (800110c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f4e:	fb83 3201 	smull	r3, r2, r3, r1
 8000f52:	17cb      	asrs	r3, r1, #31
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	1aca      	subs	r2, r1, r3
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000f60:	601a      	str	r2, [r3, #0]
		}
		return ;
 8000f62:	e0cb      	b.n	80010fc <HAL_GPIO_EXTI_Callback+0x1d8>
	}
	double freq = 0.0;
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	switch (GPIO_Pin) {
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2b80      	cmp	r3, #128	; 0x80
 8000f74:	f000 808d 	beq.w	8001092 <HAL_GPIO_EXTI_Callback+0x16e>
 8000f78:	2b80      	cmp	r3, #128	; 0x80
 8000f7a:	f300 8094 	bgt.w	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
 8000f7e:	2b20      	cmp	r3, #32
 8000f80:	dc48      	bgt.n	8001014 <HAL_GPIO_EXTI_Callback+0xf0>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	f2c0 808f 	blt.w	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	2b1e      	cmp	r3, #30
 8000f8c:	f200 808b 	bhi.w	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	0800101b 	.word	0x0800101b
 8000f9c:	080010a7 	.word	0x080010a7
 8000fa0:	0800102f 	.word	0x0800102f
 8000fa4:	080010a7 	.word	0x080010a7
 8000fa8:	080010a7 	.word	0x080010a7
 8000fac:	080010a7 	.word	0x080010a7
 8000fb0:	08001043 	.word	0x08001043
 8000fb4:	080010a7 	.word	0x080010a7
 8000fb8:	080010a7 	.word	0x080010a7
 8000fbc:	080010a7 	.word	0x080010a7
 8000fc0:	080010a7 	.word	0x080010a7
 8000fc4:	080010a7 	.word	0x080010a7
 8000fc8:	080010a7 	.word	0x080010a7
 8000fcc:	080010a7 	.word	0x080010a7
 8000fd0:	08001057 	.word	0x08001057
 8000fd4:	080010a7 	.word	0x080010a7
 8000fd8:	080010a7 	.word	0x080010a7
 8000fdc:	080010a7 	.word	0x080010a7
 8000fe0:	080010a7 	.word	0x080010a7
 8000fe4:	080010a7 	.word	0x080010a7
 8000fe8:	080010a7 	.word	0x080010a7
 8000fec:	080010a7 	.word	0x080010a7
 8000ff0:	080010a7 	.word	0x080010a7
 8000ff4:	080010a7 	.word	0x080010a7
 8000ff8:	080010a7 	.word	0x080010a7
 8000ffc:	080010a7 	.word	0x080010a7
 8001000:	080010a7 	.word	0x080010a7
 8001004:	080010a7 	.word	0x080010a7
 8001008:	080010a7 	.word	0x080010a7
 800100c:	080010a7 	.word	0x080010a7
 8001010:	0800106b 	.word	0x0800106b
 8001014:	2b40      	cmp	r3, #64	; 0x40
 8001016:	d032      	beq.n	800107e <HAL_GPIO_EXTI_Callback+0x15a>
 8001018:	e045      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_1: freq = note_freq[1]; break;
 800101a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa3c 	bl	800049c <__aeabi_ui2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800102c:	e03b      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_2: freq = note_freq[2]; break;
 800102e:	f44f 7393 	mov.w	r3, #294	; 0x126
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa32 	bl	800049c <__aeabi_ui2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001040:	e031      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_3: freq = note_freq[3]; break;
 8001042:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa28 	bl	800049c <__aeabi_ui2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001054:	e027      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_4: freq = note_freq[4]; break;
 8001056:	f240 135d 	movw	r3, #349	; 0x15d
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa1e 	bl	800049c <__aeabi_ui2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001068:	e01d      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_5: freq = note_freq[5]; break;
 800106a:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa14 	bl	800049c <__aeabi_ui2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800107c:	e013      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_6: freq = note_freq[6]; break;
 800107e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa0a 	bl	800049c <__aeabi_ui2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001090:	e009      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x182>
	case GPIO_PIN_7: freq = note_freq[7]; break;
 8001092:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa00 	bl	800049c <__aeabi_ui2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80010a4:	bf00      	nop
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 80010a6:	2101      	movs	r1, #1
 80010a8:	4816      	ldr	r0, [pc, #88]	; (8001104 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80010aa:	f000 ff4f 	bl	8001f4c <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <HAL_GPIO_EXTI_Callback+0x1a4>
		// big button pushed down
		freq *= 2.0;
 80010b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	f7ff f8b2 	bl	8000224 <__adddf3>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0) {
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010ce:	f000 ff3d 	bl	8001f4c <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10b      	bne.n	80010f0 <HAL_GPIO_EXTI_Callback+0x1cc>
		// small button pushed down
		freq /= 2.0;
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e4:	f7ff fb7e 	bl	80007e4 <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	setPWM(freq, DEFAULT_DUTY);
 80010f0:	205a      	movs	r0, #90	; 0x5a
 80010f2:	ed97 0b02 	vldr	d0, [r7, #8]
 80010f6:	f7ff fe87 	bl	8000e08 <setPWM>
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_EXTI_Callback+0x1da>
		return ;
 80010fc:	bf00      	nop
}
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000800 	.word	0x48000800
 8001108:	20000028 	.word	0x20000028
 800110c:	55555556 	.word	0x55555556
 8001110:	48000400 	.word	0x48000400
 8001114:	00000000 	.word	0x00000000

08001118 <play_music>:



void play_music(const int* pnote, const int* pbeat, const int* ptone)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	int i;
	for (i=0;pnote[i]!=-1 && play_mode != PIANO_MODE;i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	e06f      	b.n	800120a <play_music+0xf2>
		double freq = note_freq[pnote[i]];
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a42      	ldr	r2, [pc, #264]	; (8001240 <play_music+0x128>)
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9ae 	bl	800049c <__aeabi_ui2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	e9c7 2304 	strd	r2, r3, [r7, #16]

		switch (ptone[i]) {
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3302      	adds	r3, #2
 8001154:	2b04      	cmp	r3, #4
 8001156:	d83d      	bhi.n	80011d4 <play_music+0xbc>
 8001158:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <play_music+0x48>)
 800115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	080011bd 	.word	0x080011bd
 8001164:	0800118b 	.word	0x0800118b
 8001168:	080011d5 	.word	0x080011d5
 800116c:	08001175 	.word	0x08001175
 8001170:	080011a5 	.word	0x080011a5
		case 1:  freq *= 2; break;
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	f7ff f852 	bl	8000224 <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001188:	e024      	b.n	80011d4 <play_music+0xbc>
		case -1: freq /= 2; break;
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001196:	f7ff fb25 	bl	80007e4 <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011a2:	e017      	b.n	80011d4 <play_music+0xbc>
		case 2:  freq *= INCRE; break;
 80011a4:	a322      	add	r3, pc, #136	; (adr r3, 8001230 <play_music+0x118>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff f9ef 	bl	8000590 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011ba:	e00b      	b.n	80011d4 <play_music+0xbc>
		case -2: freq /= INCRE; break;
 80011bc:	a31c      	add	r3, pc, #112	; (adr r3, 8001230 <play_music+0x118>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c6:	f7ff fb0d 	bl	80007e4 <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011d2:	bf00      	nop
		}
		setPWM(freq, DEFAULT_DUTY);
 80011d4:	205a      	movs	r0, #90	; 0x5a
 80011d6:	ed97 0b04 	vldr	d0, [r7, #16]
 80011da:	f7ff fe15 	bl	8000e08 <setPWM>
		HAL_Delay(200 * pbeat[i]);
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	22c8      	movs	r2, #200	; 0xc8
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fbf8 	bl	80019e4 <HAL_Delay>
        setPWM(0, 100);
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001238 <play_music+0x120>
 80011fa:	f7ff fe05 	bl	8000e08 <setPWM>
        HAL_Delay(50);
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f000 fbf0 	bl	80019e4 <HAL_Delay>
	for (i=0;pnote[i]!=-1 && play_mode != PIANO_MODE;i++) {
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	3301      	adds	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d003      	beq.n	8001222 <play_music+0x10a>
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <play_music+0x12c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d183      	bne.n	800112a <play_music+0x12>
	}
}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	f3af 8000 	nop.w
 8001230:	5436b8fa 	.word	0x5436b8fa
 8001234:	3ff0f38c 	.word	0x3ff0f38c
	...
 8001240:	08004c94 	.word	0x08004c94
 8001244:	20000028 	.word	0x20000028

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fb59 	bl	8001902 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f838 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 f944 	bl	80014e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001258:	f000 f8c8 	bl	80013ec <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 800125c:	f000 f87c 	bl	8001358 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //启动定时器TIM3通道1的PWM输出
 8001260:	2100      	movs	r1, #0
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <main+0x68>)
 8001264:	f001 ff32 	bl	80030cc <HAL_TIM_PWM_Start>
  //定义函数
  setPWM(0, DEFAULT_DUTY);
 8001268:	205a      	movs	r0, #90	; 0x5a
 800126a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80012a8 <main+0x60>
 800126e:	f7ff fdcb 	bl	8000e08 <setPWM>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (play_mode) {
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <main+0x6c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d014      	beq.n	80012a4 <main+0x5c>
 800127a:	2b02      	cmp	r3, #2
 800127c:	dcf9      	bgt.n	8001272 <main+0x2a>
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <main+0x40>
 8001282:	2b01      	cmp	r3, #1
 8001284:	d008      	beq.n	8001298 <main+0x50>
 8001286:	e7f4      	b.n	8001272 <main+0x2a>
	  case PIANO_MODE:
		  init_piano();
 8001288:	f7ff fe1e 	bl	8000ec8 <init_piano>
		  while (play_mode==PIANO_MODE);
 800128c:	bf00      	nop
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <main+0x6c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0fb      	beq.n	800128e <main+0x46>
		  break;
 8001296:	e006      	b.n	80012a6 <main+0x5e>
	  HAL_Delay(1000);
	  case SONG_MODE_1:
		  play_music(note, beat, tone);
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <main+0x70>)
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <main+0x74>)
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <main+0x78>)
 800129e:	f7ff ff3b 	bl	8001118 <play_music>
		  break;
 80012a2:	e000      	b.n	80012a6 <main+0x5e>
	  case SONG_MODE_2:
		  break;
 80012a4:	bf00      	nop
	  switch (play_mode) {
 80012a6:	e7e4      	b.n	8001272 <main+0x2a>
	...
 80012b0:	200000bc 	.word	0x200000bc
 80012b4:	20000028 	.word	0x20000028
 80012b8:	08005300 	.word	0x08005300
 80012bc:	08004fdc 	.word	0x08004fdc
 80012c0:	08004cb8 	.word	0x08004cb8

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	2238      	movs	r2, #56	; 0x38
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fcca 	bl	8004c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 fe60 	bl	8001fac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f6:	2302      	movs	r3, #2
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fa:	2303      	movs	r3, #3
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80012fe:	2306      	movs	r3, #6
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001302:	2355      	movs	r3, #85	; 0x55
 8001304:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001306:	2302      	movs	r3, #2
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800130a:	2302      	movs	r3, #2
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800130e:	2302      	movs	r3, #2
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fefc 	bl	8002114 <HAL_RCC_OscConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001322:	f000 f97b 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001326:	230f      	movs	r3, #15
 8001328:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132a:	2303      	movs	r3, #3
 800132c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2104      	movs	r1, #4
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fa00 	bl	8002744 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800134a:	f000 f967 	bl	800161c <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3750      	adds	r7, #80	; 0x50
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <MX_LPUART1_UART_Init+0x90>)
 8001360:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 800139c:	f002 fe6e 	bl	800407c <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f939 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 80013ae:	f003 fb6f 	bl	8004a90 <HAL_UARTEx_SetTxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80013b8:	f000 f930 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 80013c0:	f003 fba4 	bl	8004b0c <HAL_UARTEx_SetRxFifoThreshold>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80013ca:	f000 f927 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_LPUART1_UART_Init+0x8c>)
 80013d0:	f003 fb25 	bl	8004a1e <HAL_UARTEx_DisableFifoMode>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80013da:	f000 f91f 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000002c 	.word	0x2000002c
 80013e8:	40008000 	.word	0x40008000

080013ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001420:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <MX_TIM3_Init+0xf0>)
 8001422:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001426:	f244 2267 	movw	r2, #16999	; 0x4267
 800142a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_TIM3_Init+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001434:	f242 720f 	movw	r2, #9999	; 0x270f
 8001438:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_TIM3_Init+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001446:	4824      	ldr	r0, [pc, #144]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001448:	f001 fd88 	bl	8002f5c <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001452:	f000 f8e3 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800145c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001460:	4619      	mov	r1, r3
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001464:	f002 f846 	bl	80034f4 <HAL_TIM_ConfigClockSource>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800146e:	f000 f8d5 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001472:	4819      	ldr	r0, [pc, #100]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001474:	f001 fdc9 	bl	800300a <HAL_TIM_PWM_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800147e:	f000 f8cd 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_TIM3_Init+0xec>)
 8001492:	f002 fd71 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800149c:	f000 f8be 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a0:	2360      	movs	r3, #96	; 0x60
 80014a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 80014a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM3_Init+0xec>)
 80014ba:	f001 ff07 	bl	80032cc <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80014c4:	f000 f8aa 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM3_Init+0xec>)
 80014ca:	f000 f949 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3738      	adds	r7, #56	; 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000bc 	.word	0x200000bc
 80014dc:	40000400 	.word	0x40000400

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <MX_GPIO_Init+0x130>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a45      	ldr	r2, [pc, #276]	; (8001610 <MX_GPIO_Init+0x130>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <MX_GPIO_Init+0x130>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <MX_GPIO_Init+0x130>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <MX_GPIO_Init+0x130>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <MX_GPIO_Init+0x130>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <MX_GPIO_Init+0x130>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <MX_GPIO_Init+0x130>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <MX_GPIO_Init+0x130>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <MX_GPIO_Init+0x130>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <MX_GPIO_Init+0x130>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <MX_GPIO_Init+0x130>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4829      	ldr	r0, [pc, #164]	; (8001614 <MX_GPIO_Init+0x134>)
 800156e:	f000 fb6b 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <MX_GPIO_Init+0x134>)
 8001586:	f000 fb5f 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800158a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800158e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001590:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <MX_GPIO_Init+0x138>)
 80015a2:	f000 fb51 	bl	8001c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2007      	movs	r0, #7
 80015ac:	f000 fb17 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015b0:	2007      	movs	r0, #7
 80015b2:	f000 fb2e 	bl	8001c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2008      	movs	r0, #8
 80015bc:	f000 fb0f 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015c0:	2008      	movs	r0, #8
 80015c2:	f000 fb26 	bl	8001c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2009      	movs	r0, #9
 80015cc:	f000 fb07 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015d0:	2009      	movs	r0, #9
 80015d2:	f000 fb1e 	bl	8001c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2101      	movs	r1, #1
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 faff 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 fb16 	bl	8001c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	2017      	movs	r0, #23
 80015ec:	f000 faf7 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015f0:	2017      	movs	r0, #23
 80015f2:	f000 fb0e 	bl	8001c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	2028      	movs	r0, #40	; 0x28
 80015fc:	f000 faef 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001600:	2028      	movs	r0, #40	; 0x28
 8001602:	f000 fb06 	bl	8001c12 <HAL_NVIC_EnableIRQ>

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	48000800 	.word	0x48000800
 8001618:	48000400 	.word	0x48000400

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_MspInit+0x44>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_MspInit+0x44>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x44>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x44>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6593      	str	r3, [r2, #88]	; 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800165e:	f000 fd49 	bl	80020f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09a      	sub	sp, #104	; 0x68
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2244      	movs	r2, #68	; 0x44
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f003 faeb 	bl	8004c6c <memset>
  if(huart->Instance==LPUART1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_UART_MspInit+0xa8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d136      	bne.n	800170e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016a0:	2320      	movs	r3, #32
 80016a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fa65 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b8:	f7ff ffb0 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0xac>)
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	4a16      	ldr	r2, [pc, #88]	; (800171c <HAL_UART_MspInit+0xac>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0xac>)
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0xac>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_UART_MspInit+0xac>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_UART_MspInit+0xac>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ec:	230c      	movs	r3, #12
 80016ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016fc:	230c      	movs	r3, #12
 80016fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f000 fa9d 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3768      	adds	r7, #104	; 0x68
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40008000 	.word	0x40008000
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_TIM_Base_MspInit+0x38>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10b      	bne.n	800174a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40000400 	.word	0x40000400
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_TIM_MspPostInit+0x64>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11c      	bne.n	80017bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800179a:	2340      	movs	r3, #64	; 0x40
 800179c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f000 fa46 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40021000 	.word	0x40021000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 f8c6 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001824:	2002      	movs	r0, #2
 8001826:	f000 fba9 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}

0800182e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001832:	2004      	movs	r0, #4
 8001834:	f000 fba2 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001840:	2008      	movs	r0, #8
 8001842:	f000 fb9b 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800184e:	2010      	movs	r0, #16
 8001850:	f000 fb94 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800185c:	2020      	movs	r0, #32
 800185e:	f000 fb8d 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001862:	2040      	movs	r0, #64	; 0x40
 8001864:	f000 fb8a 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001868:	2080      	movs	r0, #128	; 0x80
 800186a:	f000 fb87 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800186e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001872:	f000 fb83 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800187e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001882:	f000 fb7b 	bl	8001f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <LoopForever+0x6>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	; (80018f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <LoopForever+0xe>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	; (80018fc <LoopForever+0x16>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018da:	f7ff ffd7 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f003 f9a1 	bl	8004c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e2:	f7ff fcb1 	bl	8001248 <main>

080018e6 <LoopForever>:

LoopForever:
    b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   r0, =_estack
 80018e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018f4:	08005674 	.word	0x08005674
  ldr r2, =_sbss
 80018f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018fc:	2000010c 	.word	0x2000010c

08001900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_2_IRQHandler>

08001902 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f95b 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f80e 	bl	8001934 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	e001      	b.n	8001928 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001924:	f7ff fe80 	bl	8001628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001928:	79fb      	ldrb	r3, [r7, #7]

}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_InitTick+0x68>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d022      	beq.n	800198e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_InitTick+0x6c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_InitTick+0x68>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001954:	fbb1 f3f3 	udiv	r3, r1, r3
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f966 	bl	8001c2e <HAL_SYSTICK_Config>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10f      	bne.n	8001988 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d809      	bhi.n	8001982 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196e:	2200      	movs	r2, #0
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	f04f 30ff 	mov.w	r0, #4294967295
 8001976:	f000 f932 	bl	8001bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_InitTick+0x70>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e007      	b.n	8001992 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e004      	b.n	8001992 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x1c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x20>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_IncTick+0x1c>)
 80019b8:	6013      	str	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	20000108 	.word	0x20000108
 80019c8:	20000008 	.word	0x20000008

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000108 	.word	0x20000108

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d004      	beq.n	8001a08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_Delay+0x40>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a08:	bf00      	nop
 8001a0a:	f7ff ffdf 	bl	80019cc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d8f7      	bhi.n	8001a0a <HAL_Delay+0x26>
  {
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000008 	.word	0x20000008

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff40 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff33 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa4 	bl	8001b84 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c56:	e15a      	b.n	8001f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 814c 	beq.w	8001f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d005      	beq.n	8001c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0201 	and.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d017      	beq.n	8001d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d123      	bne.n	8001d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	6939      	ldr	r1, [r7, #16]
 8001d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0203 	and.w	r2, r3, #3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a6 	beq.w	8001f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd4:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dfe:	d01f      	beq.n	8001e40 <HAL_GPIO_Init+0x1f8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4c      	ldr	r2, [pc, #304]	; (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d019      	beq.n	8001e3c <HAL_GPIO_Init+0x1f4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_GPIO_Init+0x1f0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a4a      	ldr	r2, [pc, #296]	; (8001f3c <HAL_GPIO_Init+0x2f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00d      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <HAL_GPIO_Init+0x2f8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <HAL_GPIO_Init+0x1e8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <HAL_GPIO_Init+0x2fc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_GPIO_Init+0x1e4>
 8001e28:	2305      	movs	r3, #5
 8001e2a:	e00a      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e2c:	2306      	movs	r3, #6
 8001e2e:	e008      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e34:	2303      	movs	r3, #3
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e40:	2300      	movs	r3, #0
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e52:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e84:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eae:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f02:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f ae9d 	bne.w	8001c58 <HAL_GPIO_Init+0x10>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000c00 	.word	0x48000c00
 8001f40:	48001000 	.word	0x48001000
 8001f44:	48001400 	.word	0x48001400
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e001      	b.n	8001f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe ffc2 	bl	8000f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d141      	bne.n	800203e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	d131      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fce:	4a46      	ldr	r2, [pc, #280]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe0:	4a41      	ldr	r2, [pc, #260]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe8:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2232      	movs	r2, #50	; 0x32
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	4a3f      	ldr	r2, [pc, #252]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffe:	e002      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3b01      	subs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d102      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f2      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002026:	d158      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e057      	b.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800203c:	e04d      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	d141      	bne.n	80020ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d131      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2232      	movs	r2, #50	; 0x32
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	3301      	adds	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208a:	e002      	b.n	8002092 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3b01      	subs	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d102      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f2      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d112      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e011      	b.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020c8:	e007      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40007000 	.word	0x40007000
 80020ec:	20000000 	.word	0x20000000
 80020f0:	431bde83 	.word	0x431bde83

080020f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002102:	6093      	str	r3, [r2, #8]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e306      	b.n	8002734 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d075      	beq.n	800221e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b97      	ldr	r3, [pc, #604]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4b94      	ldr	r3, [pc, #592]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d102      	bne.n	8002152 <HAL_RCC_OscConfig+0x3e>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d002      	beq.n	8002158 <HAL_RCC_OscConfig+0x44>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05b      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d157      	bne.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e2e1      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x74>
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7e      	ldr	r2, [pc, #504]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b7c      	ldr	r3, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7b      	ldr	r2, [pc, #492]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 80021ac:	4b78      	ldr	r3, [pc, #480]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a77      	ldr	r2, [pc, #476]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b75      	ldr	r3, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a74      	ldr	r2, [pc, #464]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff fbfe 	bl	80019cc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff fbfa 	bl	80019cc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e2a6      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fbea 	bl	80019cc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fbe6 	bl	80019cc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e292      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220e:	4b60      	ldr	r3, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d075      	beq.n	8002316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222a:	4b59      	ldr	r3, [pc, #356]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002234:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0x136>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d002      	beq.n	8002250 <HAL_RCC_OscConfig+0x13c>
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d11f      	bne.n	8002290 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002250:	4b4f      	ldr	r3, [pc, #316]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_OscConfig+0x154>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e265      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	4946      	ldr	r1, [pc, #280]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800227c:	4b45      	ldr	r3, [pc, #276]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fb57 	bl	8001934 <HAL_InitTick>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d043      	beq.n	8002314 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e251      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d023      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff fb92 	bl	80019cc <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7ff fb8e 	bl	80019cc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e23a      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	492d      	ldr	r1, [pc, #180]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e01a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff fb6e 	bl	80019cc <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff fb6a 	bl	80019cc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e216      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1e0>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d041      	beq.n	80023a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01c      	beq.n	8002364 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002330:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7ff fb47 	bl	80019cc <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002342:	f7ff fb43 	bl	80019cc <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1ef      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ef      	beq.n	8002342 <HAL_RCC_OscConfig+0x22e>
 8002362:	e020      	b.n	80023a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fb2a 	bl	80019cc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800237a:	e00d      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fb26 	bl	80019cc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d906      	bls.n	8002398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1d2      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002398:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ea      	bne.n	800237c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80a6 	beq.w	8002500 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2b4>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x2b6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a7e      	ldr	r2, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
 80023da:	4b7c      	ldr	r3, [pc, #496]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ea:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <HAL_RCC_OscConfig+0x4bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCC_OscConfig+0x4bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a75      	ldr	r2, [pc, #468]	; (80025d0 <HAL_RCC_OscConfig+0x4bc>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7ff fae3 	bl	80019cc <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7ff fadf 	bl	80019cc <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e18b      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_RCC_OscConfig+0x4bc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d108      	bne.n	8002442 <HAL_RCC_OscConfig+0x32e>
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	4a65      	ldr	r2, [pc, #404]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002440:	e024      	b.n	800248c <HAL_RCC_OscConfig+0x378>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d110      	bne.n	800246c <HAL_RCC_OscConfig+0x358>
 800244a:	4b60      	ldr	r3, [pc, #384]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	4a5e      	ldr	r2, [pc, #376]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800245a:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	4a5a      	ldr	r2, [pc, #360]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x378>
 800246c:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	4a56      	ldr	r2, [pc, #344]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7ff fa9a 	bl	80019cc <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7ff fa96 	bl	80019cc <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e140      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ed      	beq.n	800249c <HAL_RCC_OscConfig+0x388>
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7ff fa83 	bl	80019cc <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7ff fa7f 	bl	80019cc <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e129      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e0:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ed      	bne.n	80024ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03c      	beq.n	8002586 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251a:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7ff fa52 	bl	80019cc <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252c:	f7ff fa4e 	bl	80019cc <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0fa      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ef      	beq.n	800252c <HAL_RCC_OscConfig+0x418>
 800254c:	e01b      	b.n	8002586 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7ff fa35 	bl	80019cc <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002566:	f7ff fa31 	bl	80019cc <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0dd      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 800257a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ef      	bne.n	8002566 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80d1 	beq.w	8002732 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b0c      	cmp	r3, #12
 800259a:	f000 808b 	beq.w	80026b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d15e      	bne.n	8002664 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7ff fa0b 	bl	80019cc <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	e00c      	b.n	80025d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff fa07 	bl	80019cc <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d905      	bls.n	80025d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0b3      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x628>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ec      	bne.n	80025ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x628>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x62c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6a11      	ldr	r1, [r2, #32]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f0:	3a01      	subs	r2, #1
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	4311      	orrs	r1, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025fa:	0212      	lsls	r2, r2, #8
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0552      	lsls	r2, r2, #21
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260e:	0852      	lsrs	r2, r2, #1
 8002610:	3a01      	subs	r2, #1
 8002612:	0652      	lsls	r2, r2, #25
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800261a:	06d2      	lsls	r2, r2, #27
 800261c:	430a      	orrs	r2, r1
 800261e:	4947      	ldr	r1, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002620:	4313      	orrs	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a44      	ldr	r2, [pc, #272]	; (800273c <HAL_RCC_OscConfig+0x628>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a41      	ldr	r2, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f9c6 	bl	80019cc <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff f9c2 	bl	80019cc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e06e      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x530>
 8002662:	e066      	b.n	8002732 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_RCC_OscConfig+0x628>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_OscConfig+0x628>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a2e      	ldr	r2, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002682:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff f99e 	bl	80019cc <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7ff f99a 	bl	80019cc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e046      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x628>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x580>
 80026b2:	e03e      	b.n	8002732 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e039      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_OscConfig+0x628>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d12c      	bne.n	800272e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	3b01      	subs	r3, #1
 80026e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d123      	bne.n	800272e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d11b      	bne.n	800272e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d113      	bne.n	800272e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d109      	bne.n	800272e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	019f800c 	.word	0x019f800c

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e11e      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 020f 	bic.w	r2, r3, #15
 8002772:	498c      	ldr	r1, [pc, #560]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b8a      	ldr	r3, [pc, #552]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e106      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d073      	beq.n	8002880 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d129      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a0:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0f4      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027b0:	f000 f99e 	bl	8002af0 <RCC_GetSysClockFreqFromPLLSource>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4a7c      	ldr	r2, [pc, #496]	; (80029ac <HAL_RCC_ClockConfig+0x268>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d93f      	bls.n	800283e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027be:	4b7a      	ldr	r3, [pc, #488]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d033      	beq.n	800283e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d12f      	bne.n	800283e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e6:	4a70      	ldr	r2, [pc, #448]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e024      	b.n	800283e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d107      	bne.n	800280c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0c6      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280c:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0be      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800281c:	f000 f8ce 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002820:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a61      	ldr	r2, [pc, #388]	; (80029ac <HAL_RCC_ClockConfig+0x268>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d909      	bls.n	800283e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800282a:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002832:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283e:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f023 0203 	bic.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4957      	ldr	r1, [pc, #348]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800284c:	4313      	orrs	r3, r2
 800284e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7ff f8bc 	bl	80019cc <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7ff f8b8 	bl	80019cc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e095      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 020c 	and.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d1eb      	bne.n	8002858 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d023      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800289e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028b0:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028b8:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80028ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4936      	ldr	r1, [pc, #216]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 80028e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d21d      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 020f 	bic.w	r2, r3, #15
 80028fc:	4929      	ldr	r1, [pc, #164]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002904:	f7ff f862 	bl	80019cc <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7ff f85e 	bl	80019cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e03b      	b.n	800299a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d1ed      	bne.n	800290c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4917      	ldr	r1, [pc, #92]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490f      	ldr	r1, [pc, #60]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800296e:	f000 f825 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002972:	4602      	mov	r2, r0
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCC_ClockConfig+0x264>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	490c      	ldr	r1, [pc, #48]	; (80029b0 <HAL_RCC_ClockConfig+0x26c>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x270>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x274>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe ffce 	bl	8001934 <HAL_InitTick>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	04c4b400 	.word	0x04c4b400
 80029b0:	08005624 	.word	0x08005624
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d102      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ce:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e047      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e03e      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d136      	bne.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3301      	adds	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1a:	68d2      	ldr	r2, [r2, #12]
 8002a1c:	0a12      	lsrs	r2, r2, #8
 8002a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
      break;
 8002a28:	e00c      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0a12      	lsrs	r2, r2, #8
 8002a38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
      break;
 8002a42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0e5b      	lsrs	r3, r3, #25
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	e001      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a64:	693b      	ldr	r3, [r7, #16]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	00f42400 	.word	0x00f42400
 8002a7c:	016e3600 	.word	0x016e3600

08002a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08005634 	.word	0x08005634

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ac8:	f7ff ffda 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0adb      	lsrs	r3, r3, #11
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4904      	ldr	r1, [pc, #16]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08005634 	.word	0x08005634

08002af0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d10c      	bne.n	8002b2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b1e:	68d2      	ldr	r2, [r2, #12]
 8002b20:	0a12      	lsrs	r2, r2, #8
 8002b22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	617b      	str	r3, [r7, #20]
    break;
 8002b2c:	e00c      	b.n	8002b48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	0a12      	lsrs	r2, r2, #8
 8002b3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    break;
 8002b46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0e5b      	lsrs	r3, r3, #25
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b62:	687b      	ldr	r3, [r7, #4]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	016e3600 	.word	0x016e3600
 8002b78:	00f42400 	.word	0x00f42400

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b84:	2300      	movs	r3, #0
 8002b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8098 	beq.w	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	4a3f      	ldr	r2, [pc, #252]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fefb 	bl	80019cc <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd8:	e009      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe fef7 	bl	80019cc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d902      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	74fb      	strb	r3, [r7, #19]
        break;
 8002bec:	e005      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0ef      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d159      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01e      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c1c:	4b23      	ldr	r3, [pc, #140]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c48:	4a18      	ldr	r2, [pc, #96]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe feb7 	bl	80019cc <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c60:	e00b      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe feb3 	bl	80019cc <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d902      	bls.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	74fb      	strb	r3, [r7, #19]
            break;
 8002c78:	e006      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ec      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	4903      	ldr	r1, [pc, #12]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	74bb      	strb	r3, [r7, #18]
 8002caa:	e005      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb8:	7c7b      	ldrb	r3, [r7, #17]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4ba6      	ldr	r3, [pc, #664]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4aa5      	ldr	r2, [pc, #660]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd6:	4ba0      	ldr	r3, [pc, #640]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	499c      	ldr	r1, [pc, #624]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf8:	4b97      	ldr	r3, [pc, #604]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 020c 	bic.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4994      	ldr	r1, [pc, #592]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d1a:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	498b      	ldr	r1, [pc, #556]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d3c:	4b86      	ldr	r3, [pc, #536]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	4983      	ldr	r1, [pc, #524]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d5e:	4b7e      	ldr	r3, [pc, #504]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	497a      	ldr	r1, [pc, #488]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d80:	4b75      	ldr	r3, [pc, #468]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	4972      	ldr	r1, [pc, #456]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002da2:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4969      	ldr	r1, [pc, #420]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc4:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4961      	ldr	r1, [pc, #388]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de6:	4b5c      	ldr	r3, [pc, #368]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	4958      	ldr	r1, [pc, #352]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e08:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	4950      	ldr	r1, [pc, #320]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e26:	d105      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a4a      	ldr	r2, [pc, #296]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d015      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e40:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4942      	ldr	r1, [pc, #264]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a3c      	ldr	r2, [pc, #240]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d015      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e78:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4934      	ldr	r1, [pc, #208]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	4926      	ldr	r1, [pc, #152]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ece:	d105      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	4918      	ldr	r1, [pc, #96]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f06:	d105      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e049      	b.n	8003002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fbcc 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f000 fba4 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e049      	b.n	80030b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f841 	bl	80030b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f000 fb4d 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x24>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e03c      	b.n	800316a <HAL_TIM_PWM_Start+0x9e>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d109      	bne.n	800310a <HAL_TIM_PWM_Start+0x3e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e02f      	b.n	800316a <HAL_TIM_PWM_Start+0x9e>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x58>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e022      	b.n	800316a <HAL_TIM_PWM_Start+0x9e>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d109      	bne.n	800313e <HAL_TIM_PWM_Start+0x72>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e015      	b.n	800316a <HAL_TIM_PWM_Start+0x9e>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b10      	cmp	r3, #16
 8003142:	d109      	bne.n	8003158 <HAL_TIM_PWM_Start+0x8c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e008      	b.n	800316a <HAL_TIM_PWM_Start+0x9e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e097      	b.n	80032a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xb6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003180:	e023      	b.n	80031ca <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xc6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003190:	e01b      	b.n	80031ca <HAL_TIM_PWM_Start+0xfe>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xd6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	e013      	b.n	80031ca <HAL_TIM_PWM_Start+0xfe>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_PWM_Start+0xe6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b0:	e00b      	b.n	80031ca <HAL_TIM_PWM_Start+0xfe>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_PWM_Start+0xf6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c0:	e003      	b.n	80031ca <HAL_TIM_PWM_Start+0xfe>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 feaa 	bl	8003f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a33      	ldr	r2, [pc, #204]	; (80032ac <HAL_TIM_PWM_Start+0x1e0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_TIM_PWM_Start+0x13e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a32      	ldr	r2, [pc, #200]	; (80032b0 <HAL_TIM_PWM_Start+0x1e4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <HAL_TIM_PWM_Start+0x13e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_TIM_PWM_Start+0x1e8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_TIM_PWM_Start+0x13e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <HAL_TIM_PWM_Start+0x1ec>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_TIM_PWM_Start+0x13e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <HAL_TIM_PWM_Start+0x1f0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_TIM_PWM_Start+0x142>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_TIM_PWM_Start+0x144>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_TIM_PWM_Start+0x1e0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_TIM_PWM_Start+0x194>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d013      	beq.n	8003260 <HAL_TIM_PWM_Start+0x194>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_TIM_PWM_Start+0x1f4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_PWM_Start+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_TIM_PWM_Start+0x1f8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_TIM_PWM_Start+0x194>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_TIM_PWM_Start+0x1e4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_PWM_Start+0x194>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_TIM_PWM_Start+0x1e8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d115      	bne.n	800328c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_TIM_PWM_Start+0x1fc>)
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d015      	beq.n	800329e <HAL_TIM_PWM_Start+0x1d2>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d011      	beq.n	800329e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	e008      	b.n	800329e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e000      	b.n	80032a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	00010007 	.word	0x00010007

080032cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0ff      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b14      	cmp	r3, #20
 80032f6:	f200 80f0 	bhi.w	80034da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003355 	.word	0x08003355
 8003304:	080034db 	.word	0x080034db
 8003308:	080034db 	.word	0x080034db
 800330c:	080034db 	.word	0x080034db
 8003310:	08003395 	.word	0x08003395
 8003314:	080034db 	.word	0x080034db
 8003318:	080034db 	.word	0x080034db
 800331c:	080034db 	.word	0x080034db
 8003320:	080033d7 	.word	0x080033d7
 8003324:	080034db 	.word	0x080034db
 8003328:	080034db 	.word	0x080034db
 800332c:	080034db 	.word	0x080034db
 8003330:	08003417 	.word	0x08003417
 8003334:	080034db 	.word	0x080034db
 8003338:	080034db 	.word	0x080034db
 800333c:	080034db 	.word	0x080034db
 8003340:	08003459 	.word	0x08003459
 8003344:	080034db 	.word	0x080034db
 8003348:	080034db 	.word	0x080034db
 800334c:	080034db 	.word	0x080034db
 8003350:	08003499 	.word	0x08003499
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fa54 	bl	8003808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0208 	orr.w	r2, r2, #8
 800336e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6999      	ldr	r1, [r3, #24]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	619a      	str	r2, [r3, #24]
      break;
 8003392:	e0a5      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fac4 	bl	8003928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6999      	ldr	r1, [r3, #24]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]
      break;
 80033d4:	e084      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fb2d 	bl	8003a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0208 	orr.w	r2, r2, #8
 80033f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0204 	bic.w	r2, r2, #4
 8003400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69d9      	ldr	r1, [r3, #28]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	61da      	str	r2, [r3, #28]
      break;
 8003414:	e064      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fb95 	bl	8003b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	021a      	lsls	r2, r3, #8
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	61da      	str	r2, [r3, #28]
      break;
 8003456:	e043      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fbfe 	bl	8003c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003496:	e023      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fc42 	bl	8003d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
      break;
 80034de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop

080034f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIM_ConfigClockSource+0x1c>
 800350c:	2302      	movs	r3, #2
 800350e:	e0de      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x1da>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800352e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800353a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a63      	ldr	r2, [pc, #396]	; (80036d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	f000 80a9 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003550:	4a61      	ldr	r2, [pc, #388]	; (80036d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	f200 80ae 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003558:	4a60      	ldr	r2, [pc, #384]	; (80036dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	f000 80a1 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003560:	4a5e      	ldr	r2, [pc, #376]	; (80036dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f200 80a6 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003568:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800356a:	4293      	cmp	r3, r2
 800356c:	f000 8099 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003570:	4a5b      	ldr	r2, [pc, #364]	; (80036e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	f200 809e 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003578:	4a5a      	ldr	r2, [pc, #360]	; (80036e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	f000 8091 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	f200 8096 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003588:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800358c:	f000 8089 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003594:	f200 808e 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359c:	d03e      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x128>
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a2:	f200 8087 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	f000 8086 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x1c6>
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d87f      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035b4:	2b70      	cmp	r3, #112	; 0x70
 80035b6:	d01a      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0xfa>
 80035b8:	2b70      	cmp	r3, #112	; 0x70
 80035ba:	d87b      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035bc:	2b60      	cmp	r3, #96	; 0x60
 80035be:	d050      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
 80035c0:	2b60      	cmp	r3, #96	; 0x60
 80035c2:	d877      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035c4:	2b50      	cmp	r3, #80	; 0x50
 80035c6:	d03c      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x14e>
 80035c8:	2b50      	cmp	r3, #80	; 0x50
 80035ca:	d873      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d058      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x18e>
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d86f      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035d4:	2b30      	cmp	r3, #48	; 0x30
 80035d6:	d064      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80035d8:	2b30      	cmp	r3, #48	; 0x30
 80035da:	d86b      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d060      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d867      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05c      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d05a      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80035ec:	e062      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f000 fc75 	bl	8003eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	609a      	str	r2, [r3, #8]
      break;
 800361a:	e04f      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f000 fc5e 	bl	8003eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363e:	609a      	str	r2, [r3, #8]
      break;
 8003640:	e03c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 fbd0 	bl	8003df4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2150      	movs	r1, #80	; 0x50
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fc29 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 8003660:	e02c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	461a      	mov	r2, r3
 8003670:	f000 fbef 	bl	8003e52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2160      	movs	r1, #96	; 0x60
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fc19 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 8003680:	e01c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	f000 fbb0 	bl	8003df4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fc09 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 80036a0:	e00c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f000 fc00 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 80036b2:	e003      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e000      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80036ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	00100070 	.word	0x00100070
 80036dc:	00100040 	.word	0x00100040
 80036e0:	00100030 	.word	0x00100030
 80036e4:	00100020 	.word	0x00100020

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a3c      	ldr	r2, [pc, #240]	; (80037ec <TIM_Base_SetConfig+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <TIM_Base_SetConfig+0x108>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <TIM_Base_SetConfig+0x10c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <TIM_Base_SetConfig+0x110>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <TIM_Base_SetConfig+0x104>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01b      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d017      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <TIM_Base_SetConfig+0x108>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <TIM_Base_SetConfig+0x10c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00f      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <TIM_Base_SetConfig+0x110>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00b      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <TIM_Base_SetConfig+0x114>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <TIM_Base_SetConfig+0x118>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d003      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a25      	ldr	r2, [pc, #148]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d108      	bne.n	8003784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <TIM_Base_SetConfig+0x104>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00f      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <TIM_Base_SetConfig+0x110>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <TIM_Base_SetConfig+0x114>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <TIM_Base_SetConfig+0x118>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	615a      	str	r2, [r3, #20]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40013400 	.word	0x40013400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0201 	bic.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 0302 	bic.w	r3, r3, #2
 8003854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <TIM_OC1_SetConfig+0x10c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00f      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <TIM_OC1_SetConfig+0x110>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a2a      	ldr	r2, [pc, #168]	; (800391c <TIM_OC1_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <TIM_OC1_SetConfig+0x118>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <TIM_OC1_SetConfig+0x11c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10c      	bne.n	80038a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0308 	bic.w	r3, r3, #8
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <TIM_OC1_SetConfig+0x10c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <TIM_OC1_SetConfig+0x110>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <TIM_OC1_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <TIM_OC1_SetConfig+0x118>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a17      	ldr	r2, [pc, #92]	; (8003924 <TIM_OC1_SetConfig+0x11c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	621a      	str	r2, [r3, #32]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40013400 	.word	0x40013400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0320 	bic.w	r3, r3, #32
 8003976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <TIM_OC2_SetConfig+0x100>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_OC2_SetConfig+0x6c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <TIM_OC2_SetConfig+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d10d      	bne.n	80039b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC2_SetConfig+0x100>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00f      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <TIM_OC2_SetConfig+0x104>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <TIM_OC2_SetConfig+0x108>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <TIM_OC2_SetConfig+0x10c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <TIM_OC2_SetConfig+0x110>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d113      	bne.n	8003a00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40013400 	.word	0x40013400
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800

08003a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_OC3_SetConfig+0x6a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10d      	bne.n	8003ac2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <TIM_OC3_SetConfig+0x104>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <TIM_OC3_SetConfig+0x108>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <TIM_OC3_SetConfig+0x10c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d113      	bne.n	8003b12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800

08003b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	031b      	lsls	r3, r3, #12
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <TIM_OC4_SetConfig+0x100>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_OC4_SetConfig+0x6c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <TIM_OC4_SetConfig+0x104>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d10d      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_OC4_SetConfig+0x100>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_OC4_SetConfig+0x104>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <TIM_OC4_SetConfig+0x108>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <TIM_OC4_SetConfig+0x10c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <TIM_OC4_SetConfig+0x110>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800

08003c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <TIM_OC5_SetConfig+0xb4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <TIM_OC5_SetConfig+0xb8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <TIM_OC5_SetConfig+0xbc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <TIM_OC5_SetConfig+0xc0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <TIM_OC5_SetConfig+0xc4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d109      	bne.n	8003cee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40013400 	.word	0x40013400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40014800 	.word	0x40014800

08003d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	051b      	lsls	r3, r3, #20
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <TIM_OC6_SetConfig+0xb8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00f      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <TIM_OC6_SetConfig+0xbc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <TIM_OC6_SetConfig+0xc0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <TIM_OC6_SetConfig+0xc4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC6_SetConfig+0xc8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d109      	bne.n	8003db8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	029b      	lsls	r3, r3, #10
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40013400 	.word	0x40013400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 030a 	bic.w	r3, r3, #10
 8003e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0210 	bic.w	r2, r3, #16
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f043 0307 	orr.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e065      	b.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d013      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a12      	ldr	r2, [pc, #72]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40014000 	.word	0x40014000

0800407c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e042      	b.n	8004114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7fd fae5 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2224      	movs	r2, #36	; 0x24
 80040aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f82c 	bl	800411c <UART_SetConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e022      	b.n	8004114 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 faec 	bl	80046b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb73 	bl	80047f8 <UART_CheckIdleState>
 8004112:	4603      	mov	r3, r0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800411c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004120:	b08c      	sub	sp, #48	; 0x30
 8004122:	af00      	add	r7, sp, #0
 8004124:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	431a      	orrs	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	431a      	orrs	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	4313      	orrs	r3, r2
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4bab      	ldr	r3, [pc, #684]	; (80043f8 <UART_SetConfig+0x2dc>)
 800414c:	4013      	ands	r3, r2
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004154:	430b      	orrs	r3, r1
 8004156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4aa0      	ldr	r2, [pc, #640]	; (80043fc <UART_SetConfig+0x2e0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	4313      	orrs	r3, r2
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004192:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800419c:	430b      	orrs	r3, r1
 800419e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f023 010f 	bic.w	r1, r3, #15
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a91      	ldr	r2, [pc, #580]	; (8004400 <UART_SetConfig+0x2e4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d125      	bne.n	800420c <UART_SetConfig+0xf0>
 80041c0:	4b90      	ldr	r3, [pc, #576]	; (8004404 <UART_SetConfig+0x2e8>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d81a      	bhi.n	8004204 <UART_SetConfig+0xe8>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0xb8>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041fd 	.word	0x080041fd
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ea:	e0d6      	b.n	800439a <UART_SetConfig+0x27e>
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f2:	e0d2      	b.n	800439a <UART_SetConfig+0x27e>
 80041f4:	2304      	movs	r3, #4
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fa:	e0ce      	b.n	800439a <UART_SetConfig+0x27e>
 80041fc:	2308      	movs	r3, #8
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004202:	e0ca      	b.n	800439a <UART_SetConfig+0x27e>
 8004204:	2310      	movs	r3, #16
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420a:	e0c6      	b.n	800439a <UART_SetConfig+0x27e>
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a7d      	ldr	r2, [pc, #500]	; (8004408 <UART_SetConfig+0x2ec>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d138      	bne.n	8004288 <UART_SetConfig+0x16c>
 8004216:	4b7b      	ldr	r3, [pc, #492]	; (8004404 <UART_SetConfig+0x2e8>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d82d      	bhi.n	8004280 <UART_SetConfig+0x164>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x110>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004261 	.word	0x08004261
 8004230:	08004281 	.word	0x08004281
 8004234:	08004281 	.word	0x08004281
 8004238:	08004281 	.word	0x08004281
 800423c:	08004271 	.word	0x08004271
 8004240:	08004281 	.word	0x08004281
 8004244:	08004281 	.word	0x08004281
 8004248:	08004281 	.word	0x08004281
 800424c:	08004269 	.word	0x08004269
 8004250:	08004281 	.word	0x08004281
 8004254:	08004281 	.word	0x08004281
 8004258:	08004281 	.word	0x08004281
 800425c:	08004279 	.word	0x08004279
 8004260:	2300      	movs	r3, #0
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004266:	e098      	b.n	800439a <UART_SetConfig+0x27e>
 8004268:	2302      	movs	r3, #2
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426e:	e094      	b.n	800439a <UART_SetConfig+0x27e>
 8004270:	2304      	movs	r3, #4
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004276:	e090      	b.n	800439a <UART_SetConfig+0x27e>
 8004278:	2308      	movs	r3, #8
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427e:	e08c      	b.n	800439a <UART_SetConfig+0x27e>
 8004280:	2310      	movs	r3, #16
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004286:	e088      	b.n	800439a <UART_SetConfig+0x27e>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5f      	ldr	r2, [pc, #380]	; (800440c <UART_SetConfig+0x2f0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d125      	bne.n	80042de <UART_SetConfig+0x1c2>
 8004292:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <UART_SetConfig+0x2e8>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d016      	beq.n	80042ce <UART_SetConfig+0x1b2>
 80042a0:	2b30      	cmp	r3, #48	; 0x30
 80042a2:	d818      	bhi.n	80042d6 <UART_SetConfig+0x1ba>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d00a      	beq.n	80042be <UART_SetConfig+0x1a2>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d814      	bhi.n	80042d6 <UART_SetConfig+0x1ba>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <UART_SetConfig+0x19a>
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d008      	beq.n	80042c6 <UART_SetConfig+0x1aa>
 80042b4:	e00f      	b.n	80042d6 <UART_SetConfig+0x1ba>
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042bc:	e06d      	b.n	800439a <UART_SetConfig+0x27e>
 80042be:	2302      	movs	r3, #2
 80042c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c4:	e069      	b.n	800439a <UART_SetConfig+0x27e>
 80042c6:	2304      	movs	r3, #4
 80042c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042cc:	e065      	b.n	800439a <UART_SetConfig+0x27e>
 80042ce:	2308      	movs	r3, #8
 80042d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d4:	e061      	b.n	800439a <UART_SetConfig+0x27e>
 80042d6:	2310      	movs	r3, #16
 80042d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042dc:	e05d      	b.n	800439a <UART_SetConfig+0x27e>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a4b      	ldr	r2, [pc, #300]	; (8004410 <UART_SetConfig+0x2f4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d125      	bne.n	8004334 <UART_SetConfig+0x218>
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <UART_SetConfig+0x2e8>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042f2:	2bc0      	cmp	r3, #192	; 0xc0
 80042f4:	d016      	beq.n	8004324 <UART_SetConfig+0x208>
 80042f6:	2bc0      	cmp	r3, #192	; 0xc0
 80042f8:	d818      	bhi.n	800432c <UART_SetConfig+0x210>
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d00a      	beq.n	8004314 <UART_SetConfig+0x1f8>
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d814      	bhi.n	800432c <UART_SetConfig+0x210>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <UART_SetConfig+0x1f0>
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d008      	beq.n	800431c <UART_SetConfig+0x200>
 800430a:	e00f      	b.n	800432c <UART_SetConfig+0x210>
 800430c:	2300      	movs	r3, #0
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004312:	e042      	b.n	800439a <UART_SetConfig+0x27e>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431a:	e03e      	b.n	800439a <UART_SetConfig+0x27e>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004322:	e03a      	b.n	800439a <UART_SetConfig+0x27e>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800432a:	e036      	b.n	800439a <UART_SetConfig+0x27e>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004332:	e032      	b.n	800439a <UART_SetConfig+0x27e>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a30      	ldr	r2, [pc, #192]	; (80043fc <UART_SetConfig+0x2e0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d12a      	bne.n	8004394 <UART_SetConfig+0x278>
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <UART_SetConfig+0x2e8>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434c:	d01a      	beq.n	8004384 <UART_SetConfig+0x268>
 800434e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004352:	d81b      	bhi.n	800438c <UART_SetConfig+0x270>
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004358:	d00c      	beq.n	8004374 <UART_SetConfig+0x258>
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d815      	bhi.n	800438c <UART_SetConfig+0x270>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <UART_SetConfig+0x250>
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004368:	d008      	beq.n	800437c <UART_SetConfig+0x260>
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x270>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004372:	e012      	b.n	800439a <UART_SetConfig+0x27e>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437a:	e00e      	b.n	800439a <UART_SetConfig+0x27e>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004382:	e00a      	b.n	800439a <UART_SetConfig+0x27e>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438a:	e006      	b.n	800439a <UART_SetConfig+0x27e>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004392:	e002      	b.n	800439a <UART_SetConfig+0x27e>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a17      	ldr	r2, [pc, #92]	; (80043fc <UART_SetConfig+0x2e0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	f040 80a8 	bne.w	80044f6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d834      	bhi.n	8004418 <UART_SetConfig+0x2fc>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x298>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	08004419 	.word	0x08004419
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	08004419 	.word	0x08004419
 80043c4:	080043e7 	.word	0x080043e7
 80043c8:	08004419 	.word	0x08004419
 80043cc:	08004419 	.word	0x08004419
 80043d0:	08004419 	.word	0x08004419
 80043d4:	080043ef 	.word	0x080043ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fe fb5e 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043de:	e021      	b.n	8004424 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <UART_SetConfig+0x2f8>)
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043e4:	e01e      	b.n	8004424 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e6:	f7fe fae9 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043ec:	e01a      	b.n	8004424 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043f4:	e016      	b.n	8004424 <UART_SetConfig+0x308>
 80043f6:	bf00      	nop
 80043f8:	cfff69f3 	.word	0xcfff69f3
 80043fc:	40008000 	.word	0x40008000
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
 8004410:	40004c00 	.word	0x40004c00
 8004414:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004422:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 812a 	beq.w	8004680 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	4a9e      	ldr	r2, [pc, #632]	; (80046ac <UART_SetConfig+0x590>)
 8004432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004436:	461a      	mov	r2, r3
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	fbb3 f3f2 	udiv	r3, r3, r2
 800443e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	429a      	cmp	r2, r3
 800444e:	d305      	bcc.n	800445c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	429a      	cmp	r2, r3
 800445a:	d903      	bls.n	8004464 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004462:	e10d      	b.n	8004680 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2200      	movs	r2, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	60fa      	str	r2, [r7, #12]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	4a8e      	ldr	r2, [pc, #568]	; (80046ac <UART_SetConfig+0x590>)
 8004472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004476:	b29b      	uxth	r3, r3
 8004478:	2200      	movs	r2, #0
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004486:	f7fc fb3d 	bl	8000b04 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	020b      	lsls	r3, r1, #8
 800449c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044a0:	0202      	lsls	r2, r0, #8
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	6849      	ldr	r1, [r1, #4]
 80044a6:	0849      	lsrs	r1, r1, #1
 80044a8:	2000      	movs	r0, #0
 80044aa:	460c      	mov	r4, r1
 80044ac:	4605      	mov	r5, r0
 80044ae:	eb12 0804 	adds.w	r8, r2, r4
 80044b2:	eb43 0905 	adc.w	r9, r3, r5
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	469a      	mov	sl, r3
 80044be:	4693      	mov	fp, r2
 80044c0:	4652      	mov	r2, sl
 80044c2:	465b      	mov	r3, fp
 80044c4:	4640      	mov	r0, r8
 80044c6:	4649      	mov	r1, r9
 80044c8:	f7fc fb1c 	bl	8000b04 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4613      	mov	r3, r2
 80044d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044da:	d308      	bcc.n	80044ee <UART_SetConfig+0x3d2>
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d204      	bcs.n	80044ee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	e0c8      	b.n	8004680 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044f4:	e0c4      	b.n	8004680 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fe:	d167      	bne.n	80045d0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004504:	2b08      	cmp	r3, #8
 8004506:	d828      	bhi.n	800455a <UART_SetConfig+0x43e>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x3f4>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	0800455b 	.word	0x0800455b
 8004520:	0800454b 	.word	0x0800454b
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800455b 	.word	0x0800455b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fe fab0 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800453a:	e014      	b.n	8004566 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fe fac2 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8004540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004542:	e010      	b.n	8004566 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b5a      	ldr	r3, [pc, #360]	; (80046b0 <UART_SetConfig+0x594>)
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004548:	e00d      	b.n	8004566 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fa37 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004550:	e009      	b.n	8004566 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004558:	e005      	b.n	8004566 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8089 	beq.w	8004680 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	4a4e      	ldr	r2, [pc, #312]	; (80046ac <UART_SetConfig+0x590>)
 8004574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004578:	461a      	mov	r2, r3
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004580:	005a      	lsls	r2, r3, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	441a      	add	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	d916      	bls.n	80045c8 <UART_SetConfig+0x4ac>
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a0:	d212      	bcs.n	80045c8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f023 030f 	bic.w	r3, r3, #15
 80045aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	8bfb      	ldrh	r3, [r7, #30]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	8bfa      	ldrh	r2, [r7, #30]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	e05b      	b.n	8004680 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045ce:	e057      	b.n	8004680 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d828      	bhi.n	800462a <UART_SetConfig+0x50e>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <UART_SetConfig+0x4c4>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800462b 	.word	0x0800462b
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fe fa48 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004608:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800460a:	e014      	b.n	8004636 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe fa5a 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8004610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004612:	e010      	b.n	8004636 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <UART_SetConfig+0x594>)
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004618:	e00d      	b.n	8004636 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fe f9cf 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004620:	e009      	b.n	8004636 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004628:	e005      	b.n	8004636 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004634:	bf00      	nop
    }

    if (pclk != 0U)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	2b00      	cmp	r3, #0
 800463a:	d021      	beq.n	8004680 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <UART_SetConfig+0x590>)
 8004642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004646:	461a      	mov	r2, r3
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	fbb3 f2f2 	udiv	r2, r3, r2
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	441a      	add	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	d909      	bls.n	800467a <UART_SetConfig+0x55e>
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d205      	bcs.n	800467a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	b29a      	uxth	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	e002      	b.n	8004680 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2201      	movs	r2, #1
 8004684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2201      	movs	r2, #1
 800468c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800469c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046aa:	bf00      	nop
 80046ac:	0800563c 	.word	0x0800563c
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01a      	beq.n	80047ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b2:	d10a      	bne.n	80047ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004808:	f7fd f8e0 	bl	80019cc <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10e      	bne.n	800483a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800481c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f82f 	bl	800488e <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e025      	b.n	8004886 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d10e      	bne.n	8004866 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f819 	bl	800488e <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00f      	b.n	8004886 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b09c      	sub	sp, #112	; 0x70
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489e:	e0a9      	b.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	f000 80a5 	beq.w	80049f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fd f88f 	bl	80019cc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d140      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048d4:	667b      	str	r3, [r7, #100]	; 0x64
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e6      	bne.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	663b      	str	r3, [r7, #96]	; 0x60
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004912:	64ba      	str	r2, [r7, #72]	; 0x48
 8004914:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e069      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d051      	beq.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495e:	d149      	bne.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800497e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
 800498a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800498e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	613b      	str	r3, [r7, #16]
   return(result);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049bc:	623a      	str	r2, [r7, #32]
 80049be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69f9      	ldr	r1, [r7, #28]
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e010      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69da      	ldr	r2, [r3, #28]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4013      	ands	r3, r2
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	f43f af46 	beq.w	80048a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3770      	adds	r7, #112	; 0x70
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e027      	b.n	8004a84 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e02d      	b.n	8004b04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	; 0x24
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f84f 	bl	8004b88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e02d      	b.n	8004b80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2224      	movs	r2, #36	; 0x24
 8004b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f811 	bl	8004b88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ba8:	e031      	b.n	8004c0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004baa:	2308      	movs	r3, #8
 8004bac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	0e5b      	lsrs	r3, r3, #25
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	0f5b      	lsrs	r3, r3, #29
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bd2:	7bbb      	ldrb	r3, [r7, #14]
 8004bd4:	7b3a      	ldrb	r2, [r7, #12]
 8004bd6:	4911      	ldr	r1, [pc, #68]	; (8004c1c <UARTEx_SetNbDataToProcess+0x94>)
 8004bd8:	5c8a      	ldrb	r2, [r1, r2]
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bde:	7b3a      	ldrb	r2, [r7, #12]
 8004be0:	490f      	ldr	r1, [pc, #60]	; (8004c20 <UARTEx_SetNbDataToProcess+0x98>)
 8004be2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	7b7a      	ldrb	r2, [r7, #13]
 8004bf4:	4909      	ldr	r1, [pc, #36]	; (8004c1c <UARTEx_SetNbDataToProcess+0x94>)
 8004bf6:	5c8a      	ldrb	r2, [r1, r2]
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bfc:	7b7a      	ldrb	r2, [r7, #13]
 8004bfe:	4908      	ldr	r1, [pc, #32]	; (8004c20 <UARTEx_SetNbDataToProcess+0x98>)
 8004c00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c02:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	08005654 	.word	0x08005654
 8004c20:	0800565c 	.word	0x0800565c

08004c24 <__libc_init_array>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4d0d      	ldr	r5, [pc, #52]	; (8004c5c <__libc_init_array+0x38>)
 8004c28:	4c0d      	ldr	r4, [pc, #52]	; (8004c60 <__libc_init_array+0x3c>)
 8004c2a:	1b64      	subs	r4, r4, r5
 8004c2c:	10a4      	asrs	r4, r4, #2
 8004c2e:	2600      	movs	r6, #0
 8004c30:	42a6      	cmp	r6, r4
 8004c32:	d109      	bne.n	8004c48 <__libc_init_array+0x24>
 8004c34:	4d0b      	ldr	r5, [pc, #44]	; (8004c64 <__libc_init_array+0x40>)
 8004c36:	4c0c      	ldr	r4, [pc, #48]	; (8004c68 <__libc_init_array+0x44>)
 8004c38:	f000 f820 	bl	8004c7c <_init>
 8004c3c:	1b64      	subs	r4, r4, r5
 8004c3e:	10a4      	asrs	r4, r4, #2
 8004c40:	2600      	movs	r6, #0
 8004c42:	42a6      	cmp	r6, r4
 8004c44:	d105      	bne.n	8004c52 <__libc_init_array+0x2e>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4c:	4798      	blx	r3
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7ee      	b.n	8004c30 <__libc_init_array+0xc>
 8004c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c56:	4798      	blx	r3
 8004c58:	3601      	adds	r6, #1
 8004c5a:	e7f2      	b.n	8004c42 <__libc_init_array+0x1e>
 8004c5c:	0800566c 	.word	0x0800566c
 8004c60:	0800566c 	.word	0x0800566c
 8004c64:	0800566c 	.word	0x0800566c
 8004c68:	08005670 	.word	0x08005670

08004c6c <memset>:
 8004c6c:	4402      	add	r2, r0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
