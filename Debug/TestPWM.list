
TestPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fbd8  080063c0  080063c0  000163c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f98  08015f98  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08015f98  08015f98  00025f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015fa0  08015fa0  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015fa0  08015fa0  00025fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015fa4  08015fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08015fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08016018  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08016018  000301d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128e1  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  00042981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00044b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00045b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de45  00000000  00000000  00046aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128dc  00000000  00000000  000648e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5760  00000000  00000000  000771c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a8  00000000  00000000  0013c974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080063a4 	.word	0x080063a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080063a4 	.word	0x080063a4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b974 	b.w	8000e30 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9d08      	ldr	r5, [sp, #32]
 8000b66:	4604      	mov	r4, r0
 8000b68:	468e      	mov	lr, r1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d14d      	bne.n	8000c0a <__udivmoddi4+0xaa>
 8000b6e:	428a      	cmp	r2, r1
 8000b70:	4694      	mov	ip, r2
 8000b72:	d969      	bls.n	8000c48 <__udivmoddi4+0xe8>
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	b152      	cbz	r2, 8000b90 <__udivmoddi4+0x30>
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	f1c2 0120 	rsb	r1, r2, #32
 8000b82:	fa20 f101 	lsr.w	r1, r0, r1
 8000b86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8e:	4094      	lsls	r4, r2
 8000b90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b94:	0c21      	lsrs	r1, r4, #16
 8000b96:	fbbe f6f8 	udiv	r6, lr, r8
 8000b9a:	fa1f f78c 	uxth.w	r7, ip
 8000b9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ba2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba6:	fb06 f107 	mul.w	r1, r6, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x64>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb6:	f080 811f 	bcs.w	8000df8 <__udivmoddi4+0x298>
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	f240 811c 	bls.w	8000df8 <__udivmoddi4+0x298>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	1a5b      	subs	r3, r3, r1
 8000bc6:	b2a4      	uxth	r4, r4
 8000bc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd4:	fb00 f707 	mul.w	r7, r0, r7
 8000bd8:	42a7      	cmp	r7, r4
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x92>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be4:	f080 810a 	bcs.w	8000dfc <__udivmoddi4+0x29c>
 8000be8:	42a7      	cmp	r7, r4
 8000bea:	f240 8107 	bls.w	8000dfc <__udivmoddi4+0x29c>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf6:	1be4      	subs	r4, r4, r7
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	b11d      	cbz	r5, 8000c04 <__udivmoddi4+0xa4>
 8000bfc:	40d4      	lsrs	r4, r2
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e9c5 4300 	strd	r4, r3, [r5]
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0xc2>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	f000 80ef 	beq.w	8000df2 <__udivmoddi4+0x292>
 8000c14:	2600      	movs	r6, #0
 8000c16:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	fab3 f683 	clz	r6, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d14a      	bne.n	8000cc0 <__udivmoddi4+0x160>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xd4>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 80f9 	bhi.w	8000e26 <__udivmoddi4+0x2c6>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb61 0303 	sbc.w	r3, r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	469e      	mov	lr, r3
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e0      	beq.n	8000c04 <__udivmoddi4+0xa4>
 8000c42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c46:	e7dd      	b.n	8000c04 <__udivmoddi4+0xa4>
 8000c48:	b902      	cbnz	r2, 8000c4c <__udivmoddi4+0xec>
 8000c4a:	deff      	udf	#255	; 0xff
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	f040 8092 	bne.w	8000d7a <__udivmoddi4+0x21a>
 8000c56:	eba1 010c 	sub.w	r1, r1, ip
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f fe8c 	uxth.w	lr, ip
 8000c62:	2601      	movs	r6, #1
 8000c64:	0c20      	lsrs	r0, r4, #16
 8000c66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c72:	fb0e f003 	mul.w	r0, lr, r3
 8000c76:	4288      	cmp	r0, r1
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x12c>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x12a>
 8000c84:	4288      	cmp	r0, r1
 8000c86:	f200 80cb 	bhi.w	8000e20 <__udivmoddi4+0x2c0>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	1a09      	subs	r1, r1, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c94:	fb07 1110 	mls	r1, r7, r0, r1
 8000c98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x156>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x154>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f200 80bb 	bhi.w	8000e2a <__udivmoddi4+0x2ca>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	eba4 040e 	sub.w	r4, r4, lr
 8000cba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cbe:	e79c      	b.n	8000bfa <__udivmoddi4+0x9a>
 8000cc0:	f1c6 0720 	rsb	r7, r6, #32
 8000cc4:	40b3      	lsls	r3, r6
 8000cc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cce:	fa20 f407 	lsr.w	r4, r0, r7
 8000cd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd6:	431c      	orrs	r4, r3
 8000cd8:	40f9      	lsrs	r1, r7
 8000cda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cde:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce6:	0c20      	lsrs	r0, r4, #16
 8000ce8:	fa1f fe8c 	uxth.w	lr, ip
 8000cec:	fb09 1118 	mls	r1, r9, r8, r1
 8000cf0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfe:	d90b      	bls.n	8000d18 <__udivmoddi4+0x1b8>
 8000d00:	eb1c 0101 	adds.w	r1, ip, r1
 8000d04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d08:	f080 8088 	bcs.w	8000e1c <__udivmoddi4+0x2bc>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f240 8085 	bls.w	8000e1c <__udivmoddi4+0x2bc>
 8000d12:	f1a8 0802 	sub.w	r8, r8, #2
 8000d16:	4461      	add	r1, ip
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d20:	fb09 1110 	mls	r1, r9, r0, r1
 8000d24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	458e      	cmp	lr, r1
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x1e2>
 8000d30:	eb1c 0101 	adds.w	r1, ip, r1
 8000d34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d38:	d26c      	bcs.n	8000e14 <__udivmoddi4+0x2b4>
 8000d3a:	458e      	cmp	lr, r1
 8000d3c:	d96a      	bls.n	8000e14 <__udivmoddi4+0x2b4>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	4461      	add	r1, ip
 8000d42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d46:	fba0 9402 	umull	r9, r4, r0, r2
 8000d4a:	eba1 010e 	sub.w	r1, r1, lr
 8000d4e:	42a1      	cmp	r1, r4
 8000d50:	46c8      	mov	r8, r9
 8000d52:	46a6      	mov	lr, r4
 8000d54:	d356      	bcc.n	8000e04 <__udivmoddi4+0x2a4>
 8000d56:	d053      	beq.n	8000e00 <__udivmoddi4+0x2a0>
 8000d58:	b15d      	cbz	r5, 8000d72 <__udivmoddi4+0x212>
 8000d5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d62:	fa01 f707 	lsl.w	r7, r1, r7
 8000d66:	fa22 f306 	lsr.w	r3, r2, r6
 8000d6a:	40f1      	lsrs	r1, r6
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d72:	2600      	movs	r6, #0
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	f1c2 0320 	rsb	r3, r2, #32
 8000d7e:	40d8      	lsrs	r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa21 f303 	lsr.w	r3, r1, r3
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d98:	fb07 3610 	mls	r6, r7, r0, r3
 8000d9c:	0c0b      	lsrs	r3, r1, #16
 8000d9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000da2:	fb00 f60e 	mul.w	r6, r0, lr
 8000da6:	429e      	cmp	r6, r3
 8000da8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x260>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db6:	d22f      	bcs.n	8000e18 <__udivmoddi4+0x2b8>
 8000db8:	429e      	cmp	r6, r3
 8000dba:	d92d      	bls.n	8000e18 <__udivmoddi4+0x2b8>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1b9b      	subs	r3, r3, r6
 8000dc2:	b289      	uxth	r1, r1
 8000dc4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x28a>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000de0:	d216      	bcs.n	8000e10 <__udivmoddi4+0x2b0>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d914      	bls.n	8000e10 <__udivmoddi4+0x2b0>
 8000de6:	3e02      	subs	r6, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000df0:	e738      	b.n	8000c64 <__udivmoddi4+0x104>
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e705      	b.n	8000c04 <__udivmoddi4+0xa4>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e3      	b.n	8000bc4 <__udivmoddi4+0x64>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6f8      	b.n	8000bf2 <__udivmoddi4+0x92>
 8000e00:	454b      	cmp	r3, r9
 8000e02:	d2a9      	bcs.n	8000d58 <__udivmoddi4+0x1f8>
 8000e04:	ebb9 0802 	subs.w	r8, r9, r2
 8000e08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7a3      	b.n	8000d58 <__udivmoddi4+0x1f8>
 8000e10:	4646      	mov	r6, r8
 8000e12:	e7ea      	b.n	8000dea <__udivmoddi4+0x28a>
 8000e14:	4620      	mov	r0, r4
 8000e16:	e794      	b.n	8000d42 <__udivmoddi4+0x1e2>
 8000e18:	4640      	mov	r0, r8
 8000e1a:	e7d1      	b.n	8000dc0 <__udivmoddi4+0x260>
 8000e1c:	46d0      	mov	r8, sl
 8000e1e:	e77b      	b.n	8000d18 <__udivmoddi4+0x1b8>
 8000e20:	3b02      	subs	r3, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	e732      	b.n	8000c8c <__udivmoddi4+0x12c>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e709      	b.n	8000c3e <__udivmoddi4+0xde>
 8000e2a:	4464      	add	r4, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e742      	b.n	8000cb6 <__udivmoddi4+0x156>

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <setPWM>:
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */

void setPWM(double freq, int duty_percent)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e42:	6078      	str	r0, [r7, #4]
	if (freq == 0) {
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e50:	f7ff fe06 	bl	8000a60 <__aeabi_dcmpeq>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <setPWM+0x2a>
		TIM3->CCR1 = 0;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <setPWM+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 8000e60:	e03b      	b.n	8000eda <setPWM+0xa2>
	}
	TIM3->ARR = 100000.0 / freq - 1;
 8000e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e66:	a11e      	add	r1, pc, #120	; (adr r1, 8000ee0 <setPWM+0xa8>)
 8000e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e6c:	f7ff fcba 	bl	80007e4 <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <setPWM+0xb4>)
 8000e7e:	f7ff f9cf 	bl	8000220 <__aeabi_dsub>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4c18      	ldr	r4, [pc, #96]	; (8000ee8 <setPWM+0xb0>)
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fe30 	bl	8000af0 <__aeabi_d2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->CCR1 = (double)duty_percent * (TIM3->ARR + 1) / 100.0;
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fb11 	bl	80004bc <__aeabi_i2d>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	460d      	mov	r5, r1
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <setPWM+0xb0>)
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff faf9 	bl	800049c <__aeabi_ui2d>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4620      	mov	r0, r4
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f7ff fb6d 	bl	8000590 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <setPWM+0xb8>)
 8000ec4:	f7ff fc8e 	bl	80007e4 <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4c06      	ldr	r4, [pc, #24]	; (8000ee8 <setPWM+0xb0>)
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fe0d 	bl	8000af0 <__aeabi_d2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40f86a00 	.word	0x40f86a00
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	3ff00000 	.word	0x3ff00000
 8000ef0:	40590000 	.word	0x40590000
 8000ef4:	00000000 	.word	0x00000000

08000ef8 <note_to_frequency>:

double note_to_frequency(int note)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	return 440.0 * pow(2, (note - 69)/12.0);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b45      	subs	r3, #69	; 0x45
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fad9 	bl	80004bc <__aeabi_i2d>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <note_to_frequency+0x60>)
 8000f10:	f7ff fc68 	bl	80007e4 <__aeabi_ddiv>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	ec43 2b17 	vmov	d7, r2, r3
 8000f1c:	eeb0 1a47 	vmov.f32	s2, s14
 8000f20:	eef0 1a67 	vmov.f32	s3, s15
 8000f24:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000f50 <note_to_frequency+0x58>
 8000f28:	f004 fb20 	bl	800556c <pow>
 8000f2c:	ec51 0b10 	vmov	r0, r1, d0
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <note_to_frequency+0x64>)
 8000f36:	f7ff fb2b 	bl	8000590 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f42:	eeb0 0a47 	vmov.f32	s0, s14
 8000f46:	eef0 0a67 	vmov.f32	s1, s15
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	00000000 	.word	0x00000000
 8000f54:	40000000 	.word	0x40000000
 8000f58:	40280000 	.word	0x40280000
 8000f5c:	407b8000 	.word	0x407b8000

08000f60 <produce_sound>:

void produce_sound(int note, int lasting_millisecond)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	if (output_device == OUTPUT_BUZZER) {
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <produce_sound+0x100>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d123      	bne.n	8000fba <produce_sound+0x5a>
		if (note == 0) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <produce_sound+0x2c>
			setPWM(0, 100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8001058 <produce_sound+0xf8>
 8000f7e:	f7ff ff5b 	bl	8000e38 <setPWM>
			HAL_Delay(lasting_millisecond);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 feaf 	bl	8001ce8 <HAL_Delay>
			return ;
 8000f8a:	e060      	b.n	800104e <produce_sound+0xee>
		}
		double freq = note_to_frequency(note);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffb3 	bl	8000ef8 <note_to_frequency>
 8000f92:	ed87 0b04 	vstr	d0, [r7, #16]
		setPWM(freq, DEFAULT_DUTY);
 8000f96:	205f      	movs	r0, #95	; 0x5f
 8000f98:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f9c:	f7ff ff4c 	bl	8000e38 <setPWM>
		HAL_Delay(lasting_millisecond);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fea0 	bl	8001ce8 <HAL_Delay>
		setPWM(0, 100);
 8000fa8:	2064      	movs	r0, #100	; 0x64
 8000faa:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8001058 <produce_sound+0xf8>
 8000fae:	f7ff ff43 	bl	8000e38 <setPWM>
		HAL_Delay(50);
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f000 fe98 	bl	8001ce8 <HAL_Delay>
 8000fb8:	e049      	b.n	800104e <produce_sound+0xee>
	}
	else {
		// send MIDI
		if (note == 0) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <produce_sound+0x6a>
			HAL_Delay(lasting_millisecond);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fe90 	bl	8001ce8 <HAL_Delay>
 8000fc8:	e041      	b.n	800104e <produce_sound+0xee>
			return ;
		}
		unsigned char operation;
		unsigned char sound;
		unsigned char force;
		operation = 0x90;
 8000fca:	2390      	movs	r3, #144	; 0x90
 8000fcc:	73fb      	strb	r3, [r7, #15]
		sound = note;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73bb      	strb	r3, [r7, #14]
		force = 0x7F;
 8000fd4:	237f      	movs	r3, #127	; 0x7f
 8000fd6:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&hlpuart1, &operation, 1, 0xffff);
 8000fd8:	f107 010f 	add.w	r1, r7, #15
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4820      	ldr	r0, [pc, #128]	; (8001064 <produce_sound+0x104>)
 8000fe4:	f003 fc76 	bl	80048d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &sound, 1, 0xffff);
 8000fe8:	f107 010e 	add.w	r1, r7, #14
 8000fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	481c      	ldr	r0, [pc, #112]	; (8001064 <produce_sound+0x104>)
 8000ff4:	f003 fc6e 	bl	80048d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &force, 1, 0xffff);
 8000ff8:	f107 010d 	add.w	r1, r7, #13
 8000ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001000:	2201      	movs	r2, #1
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <produce_sound+0x104>)
 8001004:	f003 fc66 	bl	80048d4 <HAL_UART_Transmit>
		HAL_Delay(lasting_millisecond);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe6c 	bl	8001ce8 <HAL_Delay>
		operation = 0x80;
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	73fb      	strb	r3, [r7, #15]
		force = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&hlpuart1, &operation, 1, 0xffff);
 8001018:	f107 010f 	add.w	r1, r7, #15
 800101c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001020:	2201      	movs	r2, #1
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <produce_sound+0x104>)
 8001024:	f003 fc56 	bl	80048d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &sound, 1, 0xffff);
 8001028:	f107 010e 	add.w	r1, r7, #14
 800102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001030:	2201      	movs	r2, #1
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <produce_sound+0x104>)
 8001034:	f003 fc4e 	bl	80048d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &force, 1, 0xffff);
 8001038:	f107 010d 	add.w	r1, r7, #13
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	2201      	movs	r2, #1
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <produce_sound+0x104>)
 8001044:	f003 fc46 	bl	80048d4 <HAL_UART_Transmit>
		HAL_Delay(50);
 8001048:	2032      	movs	r0, #50	; 0x32
 800104a:	f000 fe4d 	bl	8001ce8 <HAL_Delay>
	}
}
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f3af 8000 	nop.w
	...
 8001060:	20000090 	.word	0x20000090
 8001064:	200000a0 	.word	0x200000a0

08001068 <init_piano>:

void init_piano()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	produce_sound(0, 1000);
 800106e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ff74 	bl	8000f60 <produce_sound>
	unsigned int i;
	for (i=0;i<8;i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	e00b      	b.n	8001096 <init_piano+0x2e>
		produce_sound(MIDDLE_C + white_note[i], 200);
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <init_piano+0x44>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	333c      	adds	r3, #60	; 0x3c
 8001088:	21c8      	movs	r1, #200	; 0xc8
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff68 	bl	8000f60 <produce_sound>
	for (i=0;i<8;i++) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3301      	adds	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d9f0      	bls.n	800107e <init_piano+0x16>
	}
	produce_sound(0, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff5e 	bl	8000f60 <produce_sound>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	080063c0 	.word	0x080063c0

080010b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Keys interrupt
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
//	if (clock - lastTime <= 80) {
//		lastTime = clock;
//		return ;
//	}
//	lastTime = clock;
	if (GPIO_Pin == GPIO_PIN_8) {
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c0:	d116      	bne.n	80010f0 <HAL_GPIO_EXTI_Callback+0x40>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 80010c2:	2101      	movs	r1, #1
 80010c4:	4860      	ldr	r0, [pc, #384]	; (8001248 <HAL_GPIO_EXTI_Callback+0x198>)
 80010c6:	f001 f8c3 	bl	8002250 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b6 	beq.w	800123e <HAL_GPIO_EXTI_Callback+0x18e>
			// switch mode
			play_mode = (play_mode + 1) % TOTAL_MODES;
 80010d2:	4b5e      	ldr	r3, [pc, #376]	; (800124c <HAL_GPIO_EXTI_Callback+0x19c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1c59      	adds	r1, r3, #1
 80010d8:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80010da:	fb83 3201 	smull	r3, r2, r3, r1
 80010de:	17cb      	asrs	r3, r1, #31
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	1aca      	subs	r2, r1, r3
 80010ea:	4b58      	ldr	r3, [pc, #352]	; (800124c <HAL_GPIO_EXTI_Callback+0x19c>)
 80010ec:	601a      	str	r2, [r3, #0]
		}
		return ;
 80010ee:	e0a6      	b.n	800123e <HAL_GPIO_EXTI_Callback+0x18e>
//		// small button pushed down
//		freq /= 2.0;
//	}
//	if (play_mode == PIANO_MODE)
//		setPWM(freq, DEFAULT_DUTY); // TODO: change: last for a certain period of time
	if (play_mode == PIANO_MODE) {
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <HAL_GPIO_EXTI_Callback+0x19c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 80a3 	bne.w	8001240 <HAL_GPIO_EXTI_Callback+0x190>
		current_note = MIDDLE_C;
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80010fc:	223c      	movs	r2, #60	; 0x3c
 80010fe:	601a      	str	r2, [r3, #0]
		switch (GPIO_Pin) {
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	2b80      	cmp	r3, #128	; 0x80
 8001104:	d077      	beq.n	80011f6 <HAL_GPIO_EXTI_Callback+0x146>
 8001106:	2b80      	cmp	r3, #128	; 0x80
 8001108:	dc7c      	bgt.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
 800110a:	2b20      	cmp	r3, #32
 800110c:	dc46      	bgt.n	800119c <HAL_GPIO_EXTI_Callback+0xec>
 800110e:	2b02      	cmp	r3, #2
 8001110:	db78      	blt.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
 8001112:	3b02      	subs	r3, #2
 8001114:	2b1e      	cmp	r3, #30
 8001116:	d875      	bhi.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
 8001118:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <HAL_GPIO_EXTI_Callback+0x70>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	080011a3 	.word	0x080011a3
 8001124:	08001205 	.word	0x08001205
 8001128:	080011b1 	.word	0x080011b1
 800112c:	08001205 	.word	0x08001205
 8001130:	08001205 	.word	0x08001205
 8001134:	08001205 	.word	0x08001205
 8001138:	080011bf 	.word	0x080011bf
 800113c:	08001205 	.word	0x08001205
 8001140:	08001205 	.word	0x08001205
 8001144:	08001205 	.word	0x08001205
 8001148:	08001205 	.word	0x08001205
 800114c:	08001205 	.word	0x08001205
 8001150:	08001205 	.word	0x08001205
 8001154:	08001205 	.word	0x08001205
 8001158:	080011cd 	.word	0x080011cd
 800115c:	08001205 	.word	0x08001205
 8001160:	08001205 	.word	0x08001205
 8001164:	08001205 	.word	0x08001205
 8001168:	08001205 	.word	0x08001205
 800116c:	08001205 	.word	0x08001205
 8001170:	08001205 	.word	0x08001205
 8001174:	08001205 	.word	0x08001205
 8001178:	08001205 	.word	0x08001205
 800117c:	08001205 	.word	0x08001205
 8001180:	08001205 	.word	0x08001205
 8001184:	08001205 	.word	0x08001205
 8001188:	08001205 	.word	0x08001205
 800118c:	08001205 	.word	0x08001205
 8001190:	08001205 	.word	0x08001205
 8001194:	08001205 	.word	0x08001205
 8001198:	080011db 	.word	0x080011db
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	d023      	beq.n	80011e8 <HAL_GPIO_EXTI_Callback+0x138>
 80011a0:	e030      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_1: current_note += white_note[0]; break;
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a2a      	ldr	r2, [pc, #168]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e029      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_2: current_note += white_note[1]; break;
 80011b0:	2202      	movs	r2, #2
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a26      	ldr	r2, [pc, #152]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e022      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_3: current_note += white_note[2]; break;
 80011be:	2204      	movs	r2, #4
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01b      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_4: current_note += white_note[3]; break;
 80011cc:	2205      	movs	r2, #5
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e014      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_5: current_note += white_note[4]; break;
 80011da:	2207      	movs	r2, #7
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00d      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_6: current_note += white_note[5]; break;
 80011e8:	2209      	movs	r2, #9
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a18      	ldr	r2, [pc, #96]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x154>
		case GPIO_PIN_7: current_note += white_note[6]; break;
 80011f6:	220b      	movs	r2, #11
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	bf00      	nop
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001204:	2101      	movs	r1, #1
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <HAL_GPIO_EXTI_Callback+0x198>)
 8001208:	f001 f822 	bl	8002250 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <HAL_GPIO_EXTI_Callback+0x16c>
			// big button pushed down
			current_note += 12;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	330c      	adds	r3, #12
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800121a:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0) {
 800121c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001222:	f001 f815 	bl	8002250 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d104      	bne.n	8001236 <HAL_GPIO_EXTI_Callback+0x186>
			// small button pushed down
			current_note -= 12;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3b0c      	subs	r3, #12
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001234:	6013      	str	r3, [r2, #0]
		}
		sounding_buffer = 1;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e000      	b.n	8001240 <HAL_GPIO_EXTI_Callback+0x190>
		return ;
 800123e:	bf00      	nop
	}
	else {
		// switch the walkman
	}
}
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	48000800 	.word	0x48000800
 800124c:	2000008c 	.word	0x2000008c
 8001250:	55555556 	.word	0x55555556
 8001254:	20000094 	.word	0x20000094
 8001258:	48000400 	.word	0x48000400
 800125c:	2000009c 	.word	0x2000009c

08001260 <play_music>:



void play_music(const int* pnote, const int* pbeat, const int* ptone,
		int bpm, int tone_shift)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
	int i;
	int init_mode = play_mode;
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <play_music+0xf8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	617b      	str	r3, [r7, #20]
	if (init_mode == 0)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d069      	beq.n	800134e <play_music+0xee>
		return ;
	for (i=0;pnote[i]!=-1 && play_mode == init_mode;i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e058      	b.n	8001332 <play_music+0xd2>
		int note = pnote[i]>0?(white_note[pnote[i]-1] + MIDDLE_C - 1):0;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dd0a      	ble.n	80012a4 <play_music+0x44>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <play_music+0xfc>)
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	333b      	adds	r3, #59	; 0x3b
 80012a2:	e000      	b.n	80012a6 <play_music+0x46>
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
//		double freq = note_freq[pnote[i]];
		switch (ptone[i]) {
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3303      	adds	r3, #3
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d829      	bhi.n	800130c <play_music+0xac>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <play_music+0x60>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	08001305 	.word	0x08001305
 80012c4:	080012fd 	.word	0x080012fd
 80012c8:	080012ed 	.word	0x080012ed
 80012cc:	0800130d 	.word	0x0800130d
 80012d0:	080012dd 	.word	0x080012dd
 80012d4:	080012f5 	.word	0x080012f5
 80012d8:	080012e5 	.word	0x080012e5
		case 1:  note += 12; break;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	330c      	adds	r3, #12
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	e013      	b.n	800130c <play_music+0xac>
		case 3:  note += 13; break;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	330d      	adds	r3, #13
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	e00f      	b.n	800130c <play_music+0xac>
		case -1: note -= 12;; break;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3b0c      	subs	r3, #12
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	e00b      	b.n	800130c <play_music+0xac>
		case 2:  note++; break;
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3301      	adds	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	e007      	b.n	800130c <play_music+0xac>
		case -2: note--; break;
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	3b01      	subs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e003      	b.n	800130c <play_music+0xac>
		case -3: note -= 13; break;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	3b0d      	subs	r3, #13
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	bf00      	nop
		}
//		freq *= pow(INCRE, tone_shift);
		produce_sound(note, 60*1000*pbeat[i]/bpm);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f64e 2260 	movw	r2, #60000	; 0xea60
 800131a:	fb03 f202 	mul.w	r2, r3, r2
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	fb92 f3f3 	sdiv	r3, r2, r3
 8001324:	4619      	mov	r1, r3
 8001326:	69b8      	ldr	r0, [r7, #24]
 8001328:	f7ff fe1a 	bl	8000f60 <produce_sound>
	for (i=0;pnote[i]!=-1 && play_mode == init_mode;i++) {
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d006      	beq.n	8001350 <play_music+0xf0>
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <play_music+0xf8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	d099      	beq.n	8001280 <play_music+0x20>
 800134c:	e000      	b.n	8001350 <play_music+0xf0>
		return ;
 800134e:	bf00      	nop
	}
}
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000008c 	.word	0x2000008c
 800135c:	080063c0 	.word	0x080063c0

08001360 <HAL_TIM_PeriodElapsedCallback>:
int key0_last_status = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //定时器的定时回调函数
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM4) //确定是 TIM4 引起的中断
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d127      	bne.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		if (key0_last_status && KEY0) {
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01b      	beq.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x52>
 800137a:	2101      	movs	r1, #1
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800137e:	f000 ff67 	bl	8002250 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x52>
			// long pressed
			key0_long_pushed = 1;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
			output_device = !output_device;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80013a0:	601a      	str	r2, [r3, #0]
			while (KEY0);
 80013a2:	bf00      	nop
 80013a4:	2101      	movs	r1, #1
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013a8:	f000 ff52 	bl	8002250 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f8      	bne.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x44>
		}
		key0_last_status = KEY0;
 80013b2:	2101      	movs	r1, #1
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013b6:	f000 ff4b 	bl	8002250 <HAL_GPIO_ReadPin>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80013c0:	601a      	str	r2, [r3, #0]
	}
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40000800 	.word	0x40000800
 80013d0:	200001c8 	.word	0x200001c8
 80013d4:	48000800 	.word	0x48000800
 80013d8:	20000098 	.word	0x20000098
 80013dc:	20000090 	.word	0x20000090

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 fc0e 	bl	8001c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f879 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f000 f9d5 	bl	800179c <MX_GPIO_Init>
  MX_TIM3_Init();
 80013f2:	f000 f909 	bl	8001608 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 80013f6:	f000 f8bd 	bl	8001574 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 80013fa:	f000 f97f 	bl	80016fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //启动定时器TIM3通道1的PWM输出
 80013fe:	2100      	movs	r1, #0
 8001400:	4831      	ldr	r0, [pc, #196]	; (80014c8 <main+0xe8>)
 8001402:	f002 f851 	bl	80034a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001406:	4831      	ldr	r0, [pc, #196]	; (80014cc <main+0xec>)
 8001408:	f001 ff82 	bl	8003310 <HAL_TIM_Base_Start_IT>
  //定义函数
  setPWM(0, DEFAULT_DUTY);
 800140c:	205f      	movs	r0, #95	; 0x5f
 800140e:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80014c0 <main+0xe0>
 8001412:	f7ff fd11 	bl	8000e38 <setPWM>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode == PIANO_MODE) {
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <main+0xf0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d114      	bne.n	8001448 <main+0x68>
		  init_piano();
 800141e:	f7ff fe23 	bl	8001068 <init_piano>
		  while (play_mode==PIANO_MODE) {
 8001422:	e00d      	b.n	8001440 <main+0x60>
			  if (sounding_buffer) {
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <main+0xf4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <main+0x60>
				  produce_sound(current_note, 500);
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <main+0xf8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd93 	bl	8000f60 <produce_sound>
				  sounding_buffer = 0;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <main+0xf4>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
		  while (play_mode==PIANO_MODE) {
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <main+0xf0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ed      	beq.n	8001424 <main+0x44>
			  }
		  }
	  }
	  HAL_Delay(1000);
 8001448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800144c:	f000 fc4c 	bl	8001ce8 <HAL_Delay>
	  play_music(score[play_mode][1], score[play_mode][2], score[play_mode][3],
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <main+0xf0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8001460:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <main+0xfc>)
 8001462:	1898      	adds	r0, r3, r2
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <main+0xf0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <main+0xfc>)
 8001476:	1899      	adds	r1, r3, r2
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <main+0xf0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f44f 52c9 	mov.w	r2, #6432	; 0x1920
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8001488:	3318      	adds	r3, #24
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <main+0xfc>)
 800148c:	441a      	add	r2, r3
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <main+0xf0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4c12      	ldr	r4, [pc, #72]	; (80014dc <main+0xfc>)
 8001494:	f44f 55c9 	mov.w	r5, #6432	; 0x1920
 8001498:	fb05 f303 	mul.w	r3, r5, r3
 800149c:	4423      	add	r3, r4
 800149e:	681c      	ldr	r4, [r3, #0]
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <main+0xf0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4d0d      	ldr	r5, [pc, #52]	; (80014dc <main+0xfc>)
 80014a6:	f44f 56c9 	mov.w	r6, #6432	; 0x1920
 80014aa:	fb06 f303 	mul.w	r3, r6, r3
 80014ae:	442b      	add	r3, r5
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4623      	mov	r3, r4
 80014b8:	f7ff fed2 	bl	8001260 <play_music>
	  if (play_mode == PIANO_MODE) {
 80014bc:	e7ab      	b.n	8001416 <main+0x36>
 80014be:	bf00      	nop
	...
 80014c8:	20000130 	.word	0x20000130
 80014cc:	2000017c 	.word	0x2000017c
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	2000009c 	.word	0x2000009c
 80014d8:	20000094 	.word	0x20000094
 80014dc:	080063e4 	.word	0x080063e4

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2238      	movs	r2, #56	; 0x38
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 f834 	bl	800555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 fed4 	bl	80022b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	2303      	movs	r3, #3
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800151a:	2306      	movs	r3, #6
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800151e:	2355      	movs	r3, #85	; 0x55
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	4618      	mov	r0, r3
 8001534:	f000 ff70 	bl	8002418 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800153e:	f000 f9cb 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2303      	movs	r3, #3
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2104      	movs	r1, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fa74 	bl	8002a48 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001566:	f000 f9b7 	bl	80018d8 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 800157a:	4a22      	ldr	r2, [pc, #136]	; (8001604 <MX_LPUART1_UART_Init+0x90>)
 800157c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015b8:	f003 f93c 	bl	8004834 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 f989 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015ca:	f003 fed3 	bl	8005374 <HAL_UARTEx_SetTxFifoThreshold>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80015d4:	f000 f980 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	4809      	ldr	r0, [pc, #36]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015dc:	f003 ff08 	bl	80053f0 <HAL_UARTEx_SetRxFifoThreshold>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80015e6:	f000 f977 	bl	80018d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_LPUART1_UART_Init+0x8c>)
 80015ec:	f003 fe89 	bl	8005302 <HAL_UARTEx_DisableFifoMode>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80015f6:	f000 f96f 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200000a0 	.word	0x200000a0
 8001604:	40008000 	.word	0x40008000

08001608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <MX_TIM3_Init+0xec>)
 800163c:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <MX_TIM3_Init+0xf0>)
 800163e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_TIM3_Init+0xec>)
 8001642:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001646:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MX_TIM3_Init+0xec>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MX_TIM3_Init+0xec>)
 8001650:	f242 720f 	movw	r2, #9999	; 0x270f
 8001654:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <MX_TIM3_Init+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <MX_TIM3_Init+0xec>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001662:	4824      	ldr	r0, [pc, #144]	; (80016f4 <MX_TIM3_Init+0xec>)
 8001664:	f001 fdfc 	bl	8003260 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800166e:	f000 f933 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167c:	4619      	mov	r1, r3
 800167e:	481d      	ldr	r0, [pc, #116]	; (80016f4 <MX_TIM3_Init+0xec>)
 8001680:	f002 faa6 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800168a:	f000 f925 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800168e:	4819      	ldr	r0, [pc, #100]	; (80016f4 <MX_TIM3_Init+0xec>)
 8001690:	f001 fea8 	bl	80033e4 <HAL_TIM_PWM_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800169a:	f000 f91d 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4811      	ldr	r0, [pc, #68]	; (80016f4 <MX_TIM3_Init+0xec>)
 80016ae:	f002 fff9 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80016b8:	f000 f90e 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	2360      	movs	r3, #96	; 0x60
 80016be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 80016c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80016c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM3_Init+0xec>)
 80016d6:	f002 f967 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80016e0:	f000 f8fa 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM3_Init+0xec>)
 80016e6:	f000 f9b3 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 80016ea:	bf00      	nop
 80016ec:	3738      	adds	r7, #56	; 0x38
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000130 	.word	0x20000130
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_TIM4_Init+0x98>)
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <MX_TIM4_Init+0x9c>)
 800171e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16999;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_TIM4_Init+0x98>)
 8001722:	f244 2267 	movw	r2, #16999	; 0x4267
 8001726:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM4_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_TIM4_Init+0x98>)
 8001730:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001734:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_TIM4_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_TIM4_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001742:	4814      	ldr	r0, [pc, #80]	; (8001794 <MX_TIM4_Init+0x98>)
 8001744:	f001 fd8c 	bl	8003260 <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800174e:	f000 f8c3 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_TIM4_Init+0x98>)
 8001760:	f002 fa36 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800176a:	f000 f8b5 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_TIM4_Init+0x98>)
 800177c:	f002 ff92 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001786:	f000 f8a7 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000017c 	.word	0x2000017c
 8001798:	40000800 	.word	0x40000800

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <MX_GPIO_Init+0x130>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a45      	ldr	r2, [pc, #276]	; (80018cc <MX_GPIO_Init+0x130>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <MX_GPIO_Init+0x130>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_GPIO_Init+0x130>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <MX_GPIO_Init+0x130>)
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <MX_GPIO_Init+0x130>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <MX_GPIO_Init+0x130>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a39      	ldr	r2, [pc, #228]	; (80018cc <MX_GPIO_Init+0x130>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <MX_GPIO_Init+0x130>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <MX_GPIO_Init+0x130>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a33      	ldr	r2, [pc, #204]	; (80018cc <MX_GPIO_Init+0x130>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <MX_GPIO_Init+0x130>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001818:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181e:	2301      	movs	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4829      	ldr	r0, [pc, #164]	; (80018d0 <MX_GPIO_Init+0x134>)
 800182a:	f000 fb8f 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800182e:	2301      	movs	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4823      	ldr	r0, [pc, #140]	; (80018d0 <MX_GPIO_Init+0x134>)
 8001842:	f000 fb83 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001846:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800184a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <MX_GPIO_Init+0x138>)
 800185e:	f000 fb75 	bl	8001f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2007      	movs	r0, #7
 8001868:	f000 fb3b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800186c:	2007      	movs	r0, #7
 800186e:	f000 fb52 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2008      	movs	r0, #8
 8001878:	f000 fb33 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800187c:	2008      	movs	r0, #8
 800187e:	f000 fb4a 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2009      	movs	r0, #9
 8001888:	f000 fb2b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800188c:	2009      	movs	r0, #9
 800188e:	f000 fb42 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	200a      	movs	r0, #10
 8001898:	f000 fb23 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800189c:	200a      	movs	r0, #10
 800189e:	f000 fb3a 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2101      	movs	r1, #1
 80018a6:	2017      	movs	r0, #23
 80018a8:	f000 fb1b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018ac:	2017      	movs	r0, #23
 80018ae:	f000 fb32 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2101      	movs	r1, #1
 80018b6:	2028      	movs	r0, #40	; 0x28
 80018b8:	f000 fb13 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018bc:	2028      	movs	r0, #40	; 0x28
 80018be:	f000 fb2a 	bl	8001f16 <HAL_NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000400 	.word	0x48000400

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_MspInit+0x44>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x44>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800191a:	f000 fd6d 	bl	80023f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b09a      	sub	sp, #104	; 0x68
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2244      	movs	r2, #68	; 0x44
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fe05 	bl	800555c <memset>
  if(huart->Instance==LPUART1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_UART_MspInit+0xa8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d136      	bne.n	80019ca <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800195c:	2320      	movs	r3, #32
 800195e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fa89 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001974:	f7ff ffb0 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0xac>)
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_UART_MspInit+0xac>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_UART_MspInit+0xac>)
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_UART_MspInit+0xac>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_UART_MspInit+0xac>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_UART_MspInit+0xac>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019a8:	230c      	movs	r3, #12
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80019b8:	230c      	movs	r3, #12
 80019ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f000 fac1 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3768      	adds	r7, #104	; 0x68
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40008000 	.word	0x40008000
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_TIM_Base_MspInit+0x68>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10c      	bne.n	8001a08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_TIM_Base_MspInit+0x6c>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_TIM_Base_MspInit+0x6c>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_TIM_Base_MspInit+0x6c>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a06:	e018      	b.n	8001a3a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_TIM_Base_MspInit+0x70>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d113      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_TIM_Base_MspInit+0x6c>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_TIM_Base_MspInit+0x6c>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_TIM_Base_MspInit+0x6c>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	201e      	movs	r0, #30
 8001a30:	f000 fa57 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a34:	201e      	movs	r0, #30
 8001a36:	f000 fa6e 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000800 	.word	0x40000800

08001a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0x64>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d11c      	bne.n	8001aac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a8a:	2340      	movs	r3, #64	; 0x40
 8001a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa8:	f000 fa50 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40021000 	.word	0x40021000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f8d0 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b14:	2002      	movs	r0, #2
 8001b16:	f000 fbb3 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b22:	2004      	movs	r0, #4
 8001b24:	f000 fbac 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b30:	2008      	movs	r0, #8
 8001b32:	f000 fba5 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f000 fb9e 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b4c:	2020      	movs	r0, #32
 8001b4e:	f000 fb97 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b52:	2040      	movs	r0, #64	; 0x40
 8001b54:	f000 fb94 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b58:	2080      	movs	r0, #128	; 0x80
 8001b5a:	f000 fb91 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b62:	f000 fb8d 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM4_IRQHandler+0x10>)
 8001b72:	f001 fd99 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000017c 	.word	0x2000017c

08001b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b88:	f000 fb7a 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0b      	ldr	r4, [pc, #44]	; (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f7ff ffd7 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f003 fc97 	bl	8005514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7ff fbfb 	bl	80013e0 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   r0, =_estack
 8001bec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bf8:	08015fa8 	.word	0x08015fa8
  ldr r2, =_sbss
 8001bfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c00:	200001d0 	.word	0x200001d0

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>

08001c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f95b 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f80e 	bl	8001c38 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	e001      	b.n	8001c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c28:	f7ff fe5c 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_InitTick+0x68>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d022      	beq.n	8001c92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_InitTick+0x6c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_InitTick+0x68>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f966 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10f      	bne.n	8001c8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	d809      	bhi.n	8001c86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c72:	2200      	movs	r2, #0
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7a:	f000 f932 	bl	8001ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_InitTick+0x70>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e004      	b.n	8001c96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x1c>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_IncTick+0x1c>)
 8001cbc:	6013      	str	r3, [r2, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	200001cc 	.word	0x200001cc
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	200001cc 	.word	0x200001cc

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d004      	beq.n	8001d0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_Delay+0x40>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0c:	bf00      	nop
 8001d0e:	f7ff ffdf 	bl	8001cd0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d8f7      	bhi.n	8001d0e <HAL_Delay+0x26>
  {
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000008 	.word	0x20000008

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff40 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff33 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa4 	bl	8001e88 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f5a:	e15a      	b.n	8002212 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 814c 	beq.w	800220c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d005      	beq.n	8001f8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d130      	bne.n	8001fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 0201 	and.w	r2, r3, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d017      	beq.n	800202a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80a6 	beq.w	800220c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <HAL_GPIO_Init+0x2e4>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	4a5a      	ldr	r2, [pc, #360]	; (8002230 <HAL_GPIO_Init+0x2e4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6613      	str	r3, [r2, #96]	; 0x60
 80020cc:	4b58      	ldr	r3, [pc, #352]	; (8002230 <HAL_GPIO_Init+0x2e4>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_GPIO_Init+0x2e8>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002102:	d01f      	beq.n	8002144 <HAL_GPIO_Init+0x1f8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <HAL_GPIO_Init+0x2ec>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d019      	beq.n	8002140 <HAL_GPIO_Init+0x1f4>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_GPIO_Init+0x2f0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1f0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a4a      	ldr	r2, [pc, #296]	; (8002240 <HAL_GPIO_Init+0x2f4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1ec>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a49      	ldr	r2, [pc, #292]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a48      	ldr	r2, [pc, #288]	; (8002248 <HAL_GPIO_Init+0x2fc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1e4>
 800212c:	2305      	movs	r3, #5
 800212e:	e00a      	b.n	8002146 <HAL_GPIO_Init+0x1fa>
 8002130:	2306      	movs	r3, #6
 8002132:	e008      	b.n	8002146 <HAL_GPIO_Init+0x1fa>
 8002134:	2304      	movs	r3, #4
 8002136:	e006      	b.n	8002146 <HAL_GPIO_Init+0x1fa>
 8002138:	2303      	movs	r3, #3
 800213a:	e004      	b.n	8002146 <HAL_GPIO_Init+0x1fa>
 800213c:	2302      	movs	r3, #2
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0x1fa>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_GPIO_Init+0x1fa>
 8002144:	2300      	movs	r3, #0
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002156:	4937      	ldr	r1, [pc, #220]	; (8002234 <HAL_GPIO_Init+0x2e8>)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_GPIO_Init+0x300>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002188:	4a30      	ldr	r2, [pc, #192]	; (800224c <HAL_GPIO_Init+0x300>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_GPIO_Init+0x300>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <HAL_GPIO_Init+0x300>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_GPIO_Init+0x300>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_GPIO_Init+0x300>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_GPIO_Init+0x300>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_GPIO_Init+0x300>)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	f47f ae9d 	bne.w	8001f5c <HAL_GPIO_Init+0x10>
  }
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40021000 	.word	0x40021000
 8002234:	40010000 	.word	0x40010000
 8002238:	48000400 	.word	0x48000400
 800223c:	48000800 	.word	0x48000800
 8002240:	48000c00 	.word	0x48000c00
 8002244:	48001000 	.word	0x48001000
 8002248:	48001400 	.word	0x48001400
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e001      	b.n	8002272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ff06 	bl	80010b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d141      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022be:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d131      	bne.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022cc:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d2:	4a46      	ldr	r2, [pc, #280]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e4:	4a41      	ldr	r2, [pc, #260]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ec:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2232      	movs	r2, #50	; 0x32
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	0c9b      	lsrs	r3, r3, #18
 80022fe:	3301      	adds	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002302:	e002      	b.n	800230a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3b01      	subs	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002316:	d102      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f2      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232a:	d158      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e057      	b.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002336:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002340:	e04d      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002348:	d141      	bne.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d131      	bne.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	4a23      	ldr	r2, [pc, #140]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002368:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002370:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2232      	movs	r2, #50	; 0x32
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	3301      	adds	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238e:	e002      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3b01      	subs	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a2:	d102      	bne.n	80023aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f2      	bne.n	8002390 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d112      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e011      	b.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023cc:	e007      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40007000 	.word	0x40007000
 80023f0:	20000000 	.word	0x20000000
 80023f4:	431bde83 	.word	0x431bde83

080023f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002406:	6093      	str	r3, [r2, #8]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40007000 	.word	0x40007000

08002418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e306      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d075      	beq.n	8002522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	4b97      	ldr	r3, [pc, #604]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002440:	4b94      	ldr	r3, [pc, #592]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d102      	bne.n	8002456 <HAL_RCC_OscConfig+0x3e>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d002      	beq.n	800245c <HAL_RCC_OscConfig+0x44>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d157      	bne.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e2e1      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x74>
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a84      	ldr	r2, [pc, #528]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7e      	ldr	r2, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7b      	ldr	r2, [pc, #492]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a77      	ldr	r2, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b75      	ldr	r3, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a74      	ldr	r2, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fbfe 	bl	8001cd0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fbfa 	bl	8001cd0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e2a6      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff fbea 	bl	8001cd0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fbe6 	bl	8001cd0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e292      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d075      	beq.n	800261a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d102      	bne.n	800254e <HAL_RCC_OscConfig+0x136>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d002      	beq.n	8002554 <HAL_RCC_OscConfig+0x13c>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d11f      	bne.n	8002594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x154>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e265      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4946      	ldr	r1, [pc, #280]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002580:	4b45      	ldr	r3, [pc, #276]	; (8002698 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb57 	bl	8001c38 <HAL_InitTick>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d043      	beq.n	8002618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e251      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259c:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff fb92 	bl	8001cd0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff fb8e 	bl	8001cd0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e23a      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	492d      	ldr	r1, [pc, #180]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
 80025e2:	e01a      	b.n	800261a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff fb6e 	bl	8001cd0 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb6a 	bl	8001cd0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e216      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1e0>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d041      	beq.n	80026aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01c      	beq.n	8002668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002634:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7ff fb47 	bl	8001cd0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002646:	f7ff fb43 	bl	8001cd0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1ef      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ef      	beq.n	8002646 <HAL_RCC_OscConfig+0x22e>
 8002666:	e020      	b.n	80026aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff fb2a 	bl	8001cd0 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267e:	e00d      	b.n	800269c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fb26 	bl	8001cd0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d906      	bls.n	800269c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1d2      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ea      	bne.n	8002680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80a6 	beq.w	8002804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x2b4>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x2b6>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
 80026de:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7ff fae3 	bl	8001cd0 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7ff fadf 	bl	8001cd0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e18b      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_RCC_OscConfig+0x32e>
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002744:	e024      	b.n	8002790 <HAL_RCC_OscConfig+0x378>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d110      	bne.n	8002770 <HAL_RCC_OscConfig+0x358>
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	4a5e      	ldr	r2, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x378>
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	4a56      	ldr	r2, [pc, #344]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d016      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff fa9a 	bl	8001cd0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff fa96 	bl	8001cd0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e140      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ed      	beq.n	80027a0 <HAL_RCC_OscConfig+0x388>
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa83 	bl	8001cd0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff fa7f 	bl	8001cd0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e129      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ed      	bne.n	80027ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800281a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800281e:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff fa52 	bl	8001cd0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002830:	f7ff fa4e 	bl	8001cd0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0fa      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ef      	beq.n	8002830 <HAL_RCC_OscConfig+0x418>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff fa35 	bl	8001cd0 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286a:	f7ff fa31 	bl	8001cd0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0dd      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800287e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ef      	bne.n	800286a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80d1 	beq.w	8002a36 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b0c      	cmp	r3, #12
 800289e:	f000 808b 	beq.w	80029b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d15e      	bne.n	8002968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7ff fa0b 	bl	8001cd0 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	e00c      	b.n	80028d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7ff fa07 	bl	8001cd0 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d905      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0b3      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ec      	bne.n	80028be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <HAL_RCC_OscConfig+0x62c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a11      	ldr	r1, [r2, #32]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002906:	0852      	lsrs	r2, r2, #1
 8002908:	3a01      	subs	r2, #1
 800290a:	0552      	lsls	r2, r2, #21
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291e:	06d2      	lsls	r2, r2, #27
 8002920:	430a      	orrs	r2, r1
 8002922:	4947      	ldr	r1, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff f9c6 	bl	8001cd0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f9c2 	bl	8001cd0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e06e      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x530>
 8002966:	e066      	b.n	8002a36 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002986:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7ff f99e 	bl	8001cd0 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff f99a 	bl	8001cd0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e046      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x580>
 80029b6:	e03e      	b.n	8002a36 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e039      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d12c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	3b01      	subs	r3, #1
 80029e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d123      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d113      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	019f800c 	.word	0x019f800c

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e11e      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b91      	ldr	r3, [pc, #580]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	498c      	ldr	r1, [pc, #560]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b8a      	ldr	r3, [pc, #552]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e106      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d073      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d129      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa4:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0f4      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ab4:	f000 f99e 	bl	8002df4 <RCC_GetSysClockFreqFromPLLSource>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_RCC_ClockConfig+0x268>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d93f      	bls.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d033      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d12f      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae2:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	4a70      	ldr	r2, [pc, #448]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e024      	b.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0c6      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	4b66      	ldr	r3, [pc, #408]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0be      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b20:	f000 f8ce 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4a61      	ldr	r2, [pc, #388]	; (8002cb0 <HAL_RCC_ClockConfig+0x268>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d909      	bls.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b36:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4957      	ldr	r1, [pc, #348]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7ff f8bc 	bl	8001cd0 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7ff f8b8 	bl	8001cd0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e095      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1eb      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a42      	ldr	r2, [pc, #264]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ba6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bbc:	4a3b      	ldr	r2, [pc, #236]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4936      	ldr	r1, [pc, #216]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4a32      	ldr	r2, [pc, #200]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d21d      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 020f 	bic.w	r2, r3, #15
 8002c00:	4929      	ldr	r1, [pc, #164]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c08:	f7ff f862 	bl	8001cd0 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7ff f85e 	bl	8001cd0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e03b      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1ed      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4917      	ldr	r1, [pc, #92]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490f      	ldr	r1, [pc, #60]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c72:	f000 f825 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <HAL_RCC_ClockConfig+0x26c>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x270>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe ffce 	bl	8001c38 <HAL_InitTick>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	04c4b400 	.word	0x04c4b400
 8002cb4:	08015f24 	.word	0x08015f24
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	e047      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e03e      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d136      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1e:	68d2      	ldr	r2, [r2, #12]
 8002d20:	0a12      	lsrs	r2, r2, #8
 8002d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
      break;
 8002d2c:	e00c      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	0a12      	lsrs	r2, r2, #8
 8002d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
      break;
 8002d46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	e001      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d68:	693b      	ldr	r3, [r7, #16]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	016e3600 	.word	0x016e3600

08002d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000000 	.word	0x20000000

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002da0:	f7ff fff0 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08015f34 	.word	0x08015f34

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dcc:	f7ff ffda 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0adb      	lsrs	r3, r3, #11
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08015f34 	.word	0x08015f34

08002df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d10c      	bne.n	8002e32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e22:	68d2      	ldr	r2, [r2, #12]
 8002e24:	0a12      	lsrs	r2, r2, #8
 8002e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
    break;
 8002e30:	e00c      	b.n	8002e4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	0a12      	lsrs	r2, r2, #8
 8002e40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    break;
 8002e4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0e5b      	lsrs	r3, r3, #25
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	3301      	adds	r3, #1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40021000 	.word	0x40021000
 8002e78:	016e3600 	.word	0x016e3600
 8002e7c:	00f42400 	.word	0x00f42400

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8098 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fefb 	bl	8001cd0 <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002edc:	e009      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fe fef7 	bl	8001cd0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d902      	bls.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	74fb      	strb	r3, [r7, #19]
        break;
 8002ef0:	e005      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ef      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d159      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01e      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe feb7 	bl	8001cd0 <HAL_GetTick>
 8002f62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f64:	e00b      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe feb3 	bl	8001cd0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d902      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ec      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fa8:	e008      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	74bb      	strb	r3, [r7, #18]
 8002fae:	e005      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fbc:	7c7b      	ldrb	r3, [r7, #17]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4ba6      	ldr	r3, [pc, #664]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4aa5      	ldr	r2, [pc, #660]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fda:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f023 0203 	bic.w	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	499c      	ldr	r1, [pc, #624]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ffc:	4b97      	ldr	r3, [pc, #604]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f023 020c 	bic.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4994      	ldr	r1, [pc, #592]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800301e:	4b8f      	ldr	r3, [pc, #572]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	498b      	ldr	r1, [pc, #556]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003040:	4b86      	ldr	r3, [pc, #536]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	4983      	ldr	r1, [pc, #524]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003062:	4b7e      	ldr	r3, [pc, #504]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	497a      	ldr	r1, [pc, #488]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003084:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4972      	ldr	r1, [pc, #456]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4969      	ldr	r1, [pc, #420]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4961      	ldr	r1, [pc, #388]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ea:	4b5c      	ldr	r3, [pc, #368]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4958      	ldr	r1, [pc, #352]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4950      	ldr	r1, [pc, #320]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312a:	d105      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003136:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003144:	4b45      	ldr	r3, [pc, #276]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	4942      	ldr	r1, [pc, #264]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003162:	d105      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800316e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800317c:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800319a:	d105      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a2e      	ldr	r2, [pc, #184]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	4926      	ldr	r1, [pc, #152]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	4918      	ldr	r1, [pc, #96]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	490a      	ldr	r1, [pc, #40]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003250:	7cbb      	ldrb	r3, [r7, #18]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e049      	b.n	8003306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fe fba8 	bl	80019dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 fdb8 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d001      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04a      	b.n	80033be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_TIM_Base_Start_IT+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d013      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d115      	bne.n	80033a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d015      	beq.n	80033ba <HAL_TIM_Base_Start_IT+0xaa>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d011      	beq.n	80033ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	e008      	b.n	80033ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e000      	b.n	80033bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	00010007 	.word	0x00010007

080033e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e049      	b.n	800348a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f841 	bl	8003492 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 fcf6 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_TIM_PWM_Start+0x24>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e03c      	b.n	8003546 <HAL_TIM_PWM_Start+0x9e>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d109      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x3e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e02f      	b.n	8003546 <HAL_TIM_PWM_Start+0x9e>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d109      	bne.n	8003500 <HAL_TIM_PWM_Start+0x58>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e022      	b.n	8003546 <HAL_TIM_PWM_Start+0x9e>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d109      	bne.n	800351a <HAL_TIM_PWM_Start+0x72>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	bf14      	ite	ne
 8003512:	2301      	movne	r3, #1
 8003514:	2300      	moveq	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e015      	b.n	8003546 <HAL_TIM_PWM_Start+0x9e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d109      	bne.n	8003534 <HAL_TIM_PWM_Start+0x8c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e008      	b.n	8003546 <HAL_TIM_PWM_Start+0x9e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e097      	b.n	800367e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_Start+0xb6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800355c:	e023      	b.n	80035a6 <HAL_TIM_PWM_Start+0xfe>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0xc6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	e01b      	b.n	80035a6 <HAL_TIM_PWM_Start+0xfe>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0xd6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	e013      	b.n	80035a6 <HAL_TIM_PWM_Start+0xfe>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xe6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800358c:	e00b      	b.n	80035a6 <HAL_TIM_PWM_Start+0xfe>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b10      	cmp	r3, #16
 8003592:	d104      	bne.n	800359e <HAL_TIM_PWM_Start+0xf6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800359c:	e003      	b.n	80035a6 <HAL_TIM_PWM_Start+0xfe>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f852 	bl	8004658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a33      	ldr	r2, [pc, #204]	; (8003688 <HAL_TIM_PWM_Start+0x1e0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_TIM_PWM_Start+0x13e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a32      	ldr	r2, [pc, #200]	; (800368c <HAL_TIM_PWM_Start+0x1e4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIM_PWM_Start+0x13e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a30      	ldr	r2, [pc, #192]	; (8003690 <HAL_TIM_PWM_Start+0x1e8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_TIM_PWM_Start+0x13e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <HAL_TIM_PWM_Start+0x1ec>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIM_PWM_Start+0x13e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_TIM_PWM_Start+0x1f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_PWM_Start+0x142>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_TIM_PWM_Start+0x144>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <HAL_TIM_PWM_Start+0x1e0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_TIM_PWM_Start+0x194>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d013      	beq.n	800363c <HAL_TIM_PWM_Start+0x194>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_TIM_PWM_Start+0x1f4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_TIM_PWM_Start+0x194>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_TIM_PWM_Start+0x1f8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_TIM_PWM_Start+0x194>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_TIM_PWM_Start+0x1e4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_PWM_Start+0x194>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_TIM_PWM_Start+0x1e8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d115      	bne.n	8003668 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_TIM_PWM_Start+0x1fc>)
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d015      	beq.n	800367a <HAL_TIM_PWM_Start+0x1d2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d011      	beq.n	800367a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	e008      	b.n	800367a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e000      	b.n	800367c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40013400 	.word	0x40013400
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	00010007 	.word	0x00010007

080036a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0202 	mvn.w	r2, #2
 80036d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fb74 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb66 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fb77 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0204 	mvn.w	r2, #4
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fb4a 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fb3c 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fb4d 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0208 	mvn.w	r2, #8
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2204      	movs	r2, #4
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fb20 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fb12 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb23 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0210 	mvn.w	r2, #16
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2208      	movs	r2, #8
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 faf6 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fae8 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 faf9 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0201 	mvn.w	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fd9a 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 ffb2 	bl	80047bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d10e      	bne.n	8003886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d107      	bne.n	8003886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800387e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ffa5 	bl	80047d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d10e      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d107      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 faa7 	bl	8003e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d10e      	bne.n	80038de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d107      	bne.n	80038de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f06f 0220 	mvn.w	r2, #32
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 ff65 	bl	80047a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ec:	d10f      	bne.n	800390e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 ff6b 	bl	80047e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391c:	d10f      	bne.n	800393e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff5d 	bl	80047f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394c:	d10f      	bne.n	800396e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395c:	d107      	bne.n	800396e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 ff4f 	bl	800480c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800397c:	d10f      	bne.n	800399e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 ff41 	bl	8004820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0ff      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b14      	cmp	r3, #20
 80039d2:	f200 80f0 	bhi.w	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003bb7 	.word	0x08003bb7
 80039e4:	08003bb7 	.word	0x08003bb7
 80039e8:	08003bb7 	.word	0x08003bb7
 80039ec:	08003a71 	.word	0x08003a71
 80039f0:	08003bb7 	.word	0x08003bb7
 80039f4:	08003bb7 	.word	0x08003bb7
 80039f8:	08003bb7 	.word	0x08003bb7
 80039fc:	08003ab3 	.word	0x08003ab3
 8003a00:	08003bb7 	.word	0x08003bb7
 8003a04:	08003bb7 	.word	0x08003bb7
 8003a08:	08003bb7 	.word	0x08003bb7
 8003a0c:	08003af3 	.word	0x08003af3
 8003a10:	08003bb7 	.word	0x08003bb7
 8003a14:	08003bb7 	.word	0x08003bb7
 8003a18:	08003bb7 	.word	0x08003bb7
 8003a1c:	08003b35 	.word	0x08003b35
 8003a20:	08003bb7 	.word	0x08003bb7
 8003a24:	08003bb7 	.word	0x08003bb7
 8003a28:	08003bb7 	.word	0x08003bb7
 8003a2c:	08003b75 	.word	0x08003b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fa7c 	bl	8003f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6999      	ldr	r1, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
      break;
 8003a6e:	e0a5      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 faec 	bl	8004054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      break;
 8003ab0:	e084      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fb55 	bl	8004168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0208 	orr.w	r2, r2, #8
 8003acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0204 	bic.w	r2, r2, #4
 8003adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
      break;
 8003af0:	e064      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fbbd 	bl	8004278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
      break;
 8003b32:	e043      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fc26 	bl	800438c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b72:	e023      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc6a 	bl	8004454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop

08003bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_ConfigClockSource+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0de      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x1da>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a63      	ldr	r2, [pc, #396]	; (8003db4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f000 80a9 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c2c:	4a61      	ldr	r2, [pc, #388]	; (8003db4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f200 80ae 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c34:	4a60      	ldr	r2, [pc, #384]	; (8003db8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f000 80a1 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c3c:	4a5e      	ldr	r2, [pc, #376]	; (8003db8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f200 80a6 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c44:	4a5d      	ldr	r2, [pc, #372]	; (8003dbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f000 8099 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c4c:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f200 809e 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c54:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f000 8091 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c5c:	4a58      	ldr	r2, [pc, #352]	; (8003dc0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f200 8096 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c68:	f000 8089 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c70:	f200 808e 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d03e      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x128>
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	f200 8087 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	f000 8086 	beq.w	8003d96 <HAL_TIM_ConfigClockSource+0x1c6>
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	d87f      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c90:	2b70      	cmp	r3, #112	; 0x70
 8003c92:	d01a      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0xfa>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d87b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c98:	2b60      	cmp	r3, #96	; 0x60
 8003c9a:	d050      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x16e>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d877      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	d03c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x14e>
 8003ca4:	2b50      	cmp	r3, #80	; 0x50
 8003ca6:	d873      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d058      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0x18e>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d86f      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb0:	2b30      	cmp	r3, #48	; 0x30
 8003cb2:	d064      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d86b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d060      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d867      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05c      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d05a      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x1ae>
 8003cc8:	e062      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f000 fc9d 	bl	8004618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	609a      	str	r2, [r3, #8]
      break;
 8003cf6:	e04f      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f000 fc86 	bl	8004618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1a:	609a      	str	r2, [r3, #8]
      break;
 8003d1c:	e03c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 fbf8 	bl	8004520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2150      	movs	r1, #80	; 0x50
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fc51 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e02c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f000 fc17 	bl	800457e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2160      	movs	r1, #96	; 0x60
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fc41 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003d5c:	e01c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 fbd8 	bl	8004520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc31 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e00c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f000 fc28 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003d8e:	e003      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e000      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	00100070 	.word	0x00100070
 8003db8:	00100040 	.word	0x00100040
 8003dbc:	00100030 	.word	0x00100030
 8003dc0:	00100020 	.word	0x00100020

08003dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <TIM_Base_SetConfig+0x104>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00f      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d00b      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a39      	ldr	r2, [pc, #228]	; (8003f1c <TIM_Base_SetConfig+0x108>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <TIM_Base_SetConfig+0x10c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <TIM_Base_SetConfig+0x110>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <TIM_Base_SetConfig+0x104>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01b      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d017      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <TIM_Base_SetConfig+0x108>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a29      	ldr	r2, [pc, #164]	; (8003f20 <TIM_Base_SetConfig+0x10c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <TIM_Base_SetConfig+0x110>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <TIM_Base_SetConfig+0x104>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <TIM_Base_SetConfig+0x110>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d103      	bne.n	8003f04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	615a      	str	r2, [r3, #20]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0302 	bic.w	r3, r3, #2
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <TIM_OC1_SetConfig+0x10c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00f      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <TIM_OC1_SetConfig+0x110>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <TIM_OC1_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a29      	ldr	r2, [pc, #164]	; (800404c <TIM_OC1_SetConfig+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a28      	ldr	r2, [pc, #160]	; (8004050 <TIM_OC1_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <TIM_OC1_SetConfig+0x10c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00f      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <TIM_OC1_SetConfig+0x110>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <TIM_OC1_SetConfig+0x114>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <TIM_OC1_SetConfig+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <TIM_OC1_SetConfig+0x11c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d111      	bne.n	800401a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0210 	bic.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0320 	bic.w	r3, r3, #32
 80040a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a28      	ldr	r2, [pc, #160]	; (8004154 <TIM_OC2_SetConfig+0x100>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_OC2_SetConfig+0x6c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a27      	ldr	r2, [pc, #156]	; (8004158 <TIM_OC2_SetConfig+0x104>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10d      	bne.n	80040dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <TIM_OC2_SetConfig+0x100>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00f      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <TIM_OC2_SetConfig+0x104>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1b      	ldr	r2, [pc, #108]	; (800415c <TIM_OC2_SetConfig+0x108>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <TIM_OC2_SetConfig+0x10c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <TIM_OC2_SetConfig+0x110>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d113      	bne.n	800412c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800410a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <TIM_OC3_SetConfig+0xfc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x6a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_OC3_SetConfig+0x100>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <TIM_OC3_SetConfig+0xfc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00f      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <TIM_OC3_SetConfig+0x100>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1a      	ldr	r2, [pc, #104]	; (800426c <TIM_OC3_SetConfig+0x104>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <TIM_OC3_SetConfig+0x108>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <TIM_OC3_SetConfig+0x10c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d113      	bne.n	800423e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	031b      	lsls	r3, r3, #12
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a28      	ldr	r2, [pc, #160]	; (8004378 <TIM_OC4_SetConfig+0x100>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC4_SetConfig+0x6c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a27      	ldr	r2, [pc, #156]	; (800437c <TIM_OC4_SetConfig+0x104>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10d      	bne.n	8004300 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <TIM_OC4_SetConfig+0x100>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <TIM_OC4_SetConfig+0x104>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <TIM_OC4_SetConfig+0x108>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <TIM_OC4_SetConfig+0x10c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a19      	ldr	r2, [pc, #100]	; (8004388 <TIM_OC4_SetConfig+0x110>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d113      	bne.n	8004350 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004336:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40013400 	.word	0x40013400
 8004380:	40014000 	.word	0x40014000
 8004384:	40014400 	.word	0x40014400
 8004388:	40014800 	.word	0x40014800

0800438c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <TIM_OC5_SetConfig+0xb4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a16      	ldr	r2, [pc, #88]	; (8004444 <TIM_OC5_SetConfig+0xb8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <TIM_OC5_SetConfig+0xbc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <TIM_OC5_SetConfig+0xc0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <TIM_OC5_SetConfig+0xc4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d109      	bne.n	800441a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800449a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	051b      	lsls	r3, r3, #20
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <TIM_OC6_SetConfig+0xb8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00f      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a17      	ldr	r2, [pc, #92]	; (8004510 <TIM_OC6_SetConfig+0xbc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <TIM_OC6_SetConfig+0xc0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <TIM_OC6_SetConfig+0xc4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <TIM_OC6_SetConfig+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d109      	bne.n	80044e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0201 	bic.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 030a 	bic.w	r3, r3, #10
 800455c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	f043 0307 	orr.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	431a      	orrs	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2201      	movs	r2, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1a      	ldr	r2, [r3, #32]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	43db      	mvns	r3, r3
 800467a:	401a      	ands	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e065      	b.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d108      	bne.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d013      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d10c      	bne.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e042      	b.n	80048cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fd f867 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2224      	movs	r2, #36	; 0x24
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8c2 	bl	8004a00 <UART_SetConfig>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e022      	b.n	80048cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb82 	bl	8004f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fc09 	bl	80050dc <UART_CheckIdleState>
 80048ca:	4603      	mov	r3, r0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	f040 8083 	bne.w	80049f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Transmit+0x28>
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e07b      	b.n	80049f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_UART_Transmit+0x3a>
 800490a:	2302      	movs	r3, #2
 800490c:	e074      	b.n	80049f8 <HAL_UART_Transmit+0x124>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2221      	movs	r2, #33	; 0x21
 8004922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004926:	f7fd f9d3 	bl	8001cd0 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d108      	bne.n	8004958 <HAL_UART_Transmit+0x84>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e003      	b.n	8004960 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004968:	e02c      	b.n	80049c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	2180      	movs	r1, #128	; 0x80
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fbfc 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e039      	b.n	80049f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	3302      	adds	r3, #2
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	e007      	b.n	80049b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1cc      	bne.n	800496a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2140      	movs	r1, #64	; 0x40
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fbc9 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e006      	b.n	80049f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b08c      	sub	sp, #48	; 0x30
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4bab      	ldr	r3, [pc, #684]	; (8004cdc <UART_SetConfig+0x2dc>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4aa0      	ldr	r2, [pc, #640]	; (8004ce0 <UART_SetConfig+0x2e0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	f023 010f 	bic.w	r1, r3, #15
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a91      	ldr	r2, [pc, #580]	; (8004ce4 <UART_SetConfig+0x2e4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d125      	bne.n	8004af0 <UART_SetConfig+0xf0>
 8004aa4:	4b90      	ldr	r3, [pc, #576]	; (8004ce8 <UART_SetConfig+0x2e8>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d81a      	bhi.n	8004ae8 <UART_SetConfig+0xe8>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0xb8>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004ad9 	.word	0x08004ad9
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ae1 	.word	0x08004ae1
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ace:	e0d6      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e0d2      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e0ce      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e0ca      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e0c6      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a7d      	ldr	r2, [pc, #500]	; (8004cec <UART_SetConfig+0x2ec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d138      	bne.n	8004b6c <UART_SetConfig+0x16c>
 8004afa:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <UART_SetConfig+0x2e8>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d82d      	bhi.n	8004b64 <UART_SetConfig+0x164>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x110>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004b65 	.word	0x08004b65
 8004b1c:	08004b65 	.word	0x08004b65
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004b65 	.word	0x08004b65
 8004b28:	08004b65 	.word	0x08004b65
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b4d 	.word	0x08004b4d
 8004b34:	08004b65 	.word	0x08004b65
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e098      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	e094      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e090      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e08c      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6a:	e088      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a5f      	ldr	r2, [pc, #380]	; (8004cf0 <UART_SetConfig+0x2f0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d125      	bne.n	8004bc2 <UART_SetConfig+0x1c2>
 8004b76:	4b5c      	ldr	r3, [pc, #368]	; (8004ce8 <UART_SetConfig+0x2e8>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b80:	2b30      	cmp	r3, #48	; 0x30
 8004b82:	d016      	beq.n	8004bb2 <UART_SetConfig+0x1b2>
 8004b84:	2b30      	cmp	r3, #48	; 0x30
 8004b86:	d818      	bhi.n	8004bba <UART_SetConfig+0x1ba>
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d00a      	beq.n	8004ba2 <UART_SetConfig+0x1a2>
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d814      	bhi.n	8004bba <UART_SetConfig+0x1ba>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <UART_SetConfig+0x19a>
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d008      	beq.n	8004baa <UART_SetConfig+0x1aa>
 8004b98:	e00f      	b.n	8004bba <UART_SetConfig+0x1ba>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba0:	e06d      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba8:	e069      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004baa:	2304      	movs	r3, #4
 8004bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb0:	e065      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb8:	e061      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004bba:	2310      	movs	r3, #16
 8004bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc0:	e05d      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4b      	ldr	r2, [pc, #300]	; (8004cf4 <UART_SetConfig+0x2f4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d125      	bne.n	8004c18 <UART_SetConfig+0x218>
 8004bcc:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <UART_SetConfig+0x2e8>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd8:	d016      	beq.n	8004c08 <UART_SetConfig+0x208>
 8004bda:	2bc0      	cmp	r3, #192	; 0xc0
 8004bdc:	d818      	bhi.n	8004c10 <UART_SetConfig+0x210>
 8004bde:	2b80      	cmp	r3, #128	; 0x80
 8004be0:	d00a      	beq.n	8004bf8 <UART_SetConfig+0x1f8>
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d814      	bhi.n	8004c10 <UART_SetConfig+0x210>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <UART_SetConfig+0x1f0>
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d008      	beq.n	8004c00 <UART_SetConfig+0x200>
 8004bee:	e00f      	b.n	8004c10 <UART_SetConfig+0x210>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e042      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfe:	e03e      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c06:	e03a      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0e:	e036      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c16:	e032      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a30      	ldr	r2, [pc, #192]	; (8004ce0 <UART_SetConfig+0x2e0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d12a      	bne.n	8004c78 <UART_SetConfig+0x278>
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <UART_SetConfig+0x2e8>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c30:	d01a      	beq.n	8004c68 <UART_SetConfig+0x268>
 8004c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c36:	d81b      	bhi.n	8004c70 <UART_SetConfig+0x270>
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3c:	d00c      	beq.n	8004c58 <UART_SetConfig+0x258>
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	d815      	bhi.n	8004c70 <UART_SetConfig+0x270>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <UART_SetConfig+0x250>
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d008      	beq.n	8004c60 <UART_SetConfig+0x260>
 8004c4e:	e00f      	b.n	8004c70 <UART_SetConfig+0x270>
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e012      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e00e      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e00a      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e006      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e002      	b.n	8004c7e <UART_SetConfig+0x27e>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <UART_SetConfig+0x2e0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	f040 80a8 	bne.w	8004dda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d834      	bhi.n	8004cfc <UART_SetConfig+0x2fc>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0x298>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cfd 	.word	0x08004cfd
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004cfd 	.word	0x08004cfd
 8004ca8:	08004ccb 	.word	0x08004ccb
 8004cac:	08004cfd 	.word	0x08004cfd
 8004cb0:	08004cfd 	.word	0x08004cfd
 8004cb4:	08004cfd 	.word	0x08004cfd
 8004cb8:	08004cd3 	.word	0x08004cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f7fe f86e 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8004cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cc2:	e021      	b.n	8004d08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <UART_SetConfig+0x2f8>)
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc8:	e01e      	b.n	8004d08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cca:	f7fd fff9 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8004cce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cd0:	e01a      	b.n	8004d08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cd8:	e016      	b.n	8004d08 <UART_SetConfig+0x308>
 8004cda:	bf00      	nop
 8004cdc:	cfff69f3 	.word	0xcfff69f3
 8004ce0:	40008000 	.word	0x40008000
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40004800 	.word	0x40004800
 8004cf4:	40004c00 	.word	0x40004c00
 8004cf8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 812a 	beq.w	8004f64 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	4a9e      	ldr	r2, [pc, #632]	; (8004f90 <UART_SetConfig+0x590>)
 8004d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d305      	bcc.n	8004d40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d903      	bls.n	8004d48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d46:	e10d      	b.n	8004f64 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	60fa      	str	r2, [r7, #12]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	4a8e      	ldr	r2, [pc, #568]	; (8004f90 <UART_SetConfig+0x590>)
 8004d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d6a:	f7fb fee1 	bl	8000b30 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	020b      	lsls	r3, r1, #8
 8004d80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d84:	0202      	lsls	r2, r0, #8
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	6849      	ldr	r1, [r1, #4]
 8004d8a:	0849      	lsrs	r1, r1, #1
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	4605      	mov	r5, r0
 8004d92:	eb12 0804 	adds.w	r8, r2, r4
 8004d96:	eb43 0905 	adc.w	r9, r3, r5
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	469a      	mov	sl, r3
 8004da2:	4693      	mov	fp, r2
 8004da4:	4652      	mov	r2, sl
 8004da6:	465b      	mov	r3, fp
 8004da8:	4640      	mov	r0, r8
 8004daa:	4649      	mov	r1, r9
 8004dac:	f7fb fec0 	bl	8000b30 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dbe:	d308      	bcc.n	8004dd2 <UART_SetConfig+0x3d2>
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc6:	d204      	bcs.n	8004dd2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6a3a      	ldr	r2, [r7, #32]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e0c8      	b.n	8004f64 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dd8:	e0c4      	b.n	8004f64 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de2:	d167      	bne.n	8004eb4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d828      	bhi.n	8004e3e <UART_SetConfig+0x43e>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x3f4>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e3f 	.word	0x08004e3f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
 8004e14:	08004e37 	.word	0x08004e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fd ffc0 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8004e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e1e:	e014      	b.n	8004e4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fd ffd2 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8004e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e26:	e010      	b.n	8004e4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e28:	4b5a      	ldr	r3, [pc, #360]	; (8004f94 <UART_SetConfig+0x594>)
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e2c:	e00d      	b.n	8004e4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2e:	f7fd ff47 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e34:	e009      	b.n	8004e4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e3c:	e005      	b.n	8004e4a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8089 	beq.w	8004f64 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <UART_SetConfig+0x590>)
 8004e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e64:	005a      	lsls	r2, r3, #1
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	441a      	add	r2, r3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	d916      	bls.n	8004eac <UART_SetConfig+0x4ac>
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d212      	bcs.n	8004eac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f023 030f 	bic.w	r3, r3, #15
 8004e8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	8bfa      	ldrh	r2, [r7, #30]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	e05b      	b.n	8004f64 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eb2:	e057      	b.n	8004f64 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d828      	bhi.n	8004f0e <UART_SetConfig+0x50e>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x4c4>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004f0f 	.word	0x08004f0f
 8004edc:	08004f0f 	.word	0x08004f0f
 8004ee0:	08004f0f 	.word	0x08004f0f
 8004ee4:	08004f07 	.word	0x08004f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f7fd ff58 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eee:	e014      	b.n	8004f1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fd ff6a 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef6:	e010      	b.n	8004f1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef8:	4b26      	ldr	r3, [pc, #152]	; (8004f94 <UART_SetConfig+0x594>)
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004efc:	e00d      	b.n	8004f1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fd fedf 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8004f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f04:	e009      	b.n	8004f1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f0c:	e005      	b.n	8004f1a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f18:	bf00      	nop
    }

    if (pclk != 0U)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d021      	beq.n	8004f64 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <UART_SetConfig+0x590>)
 8004f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	441a      	add	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d909      	bls.n	8004f5e <UART_SetConfig+0x55e>
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d205      	bcs.n	8004f5e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	e002      	b.n	8004f64 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	; 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	08015f3c 	.word	0x08015f3c
 8004f94:	00f42400 	.word	0x00f42400

08004f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01a      	beq.n	80050ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005096:	d10a      	bne.n	80050ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ec:	f7fc fdf0 	bl	8001cd0 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d10e      	bne.n	800511e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f82f 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e025      	b.n	800516a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b04      	cmp	r3, #4
 800512a:	d10e      	bne.n	800514a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f819 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00f      	b.n	800516a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b09c      	sub	sp, #112	; 0x70
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	e0a9      	b.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	f000 80a5 	beq.w	80052d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fc fd9f 	bl	8001cd0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800519e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d140      	bne.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051b8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e6      	bne.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3308      	adds	r3, #8
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	663b      	str	r3, [r7, #96]	; 0x60
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e069      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d051      	beq.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005242:	d149      	bne.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800524c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005262:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
 800526e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e6      	bne.n	800524e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	613b      	str	r3, [r7, #16]
   return(result);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	66bb      	str	r3, [r7, #104]	; 0x68
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052a0:	623a      	str	r2, [r7, #32]
 80052a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	69f9      	ldr	r1, [r7, #28]
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e5      	bne.n	8005280 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e010      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	f43f af46 	beq.w	8005184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3770      	adds	r7, #112	; 0x70
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_UARTEx_DisableFifoMode+0x16>
 8005314:	2302      	movs	r3, #2
 8005316:	e027      	b.n	8005368 <HAL_UARTEx_DisableFifoMode+0x66>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2224      	movs	r2, #36	; 0x24
 8005324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005346:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e02d      	b.n	80053e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f84f 	bl	800546c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005404:	2302      	movs	r3, #2
 8005406:	e02d      	b.n	8005464 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f811 	bl	800546c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005478:	2b00      	cmp	r3, #0
 800547a:	d108      	bne.n	800548e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800548c:	e031      	b.n	80054f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800548e:	2308      	movs	r3, #8
 8005490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005492:	2308      	movs	r3, #8
 8005494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	0e5b      	lsrs	r3, r3, #25
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	0f5b      	lsrs	r3, r3, #29
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	7b3a      	ldrb	r2, [r7, #12]
 80054ba:	4911      	ldr	r1, [pc, #68]	; (8005500 <UARTEx_SetNbDataToProcess+0x94>)
 80054bc:	5c8a      	ldrb	r2, [r1, r2]
 80054be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054c2:	7b3a      	ldrb	r2, [r7, #12]
 80054c4:	490f      	ldr	r1, [pc, #60]	; (8005504 <UARTEx_SetNbDataToProcess+0x98>)
 80054c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	7b7a      	ldrb	r2, [r7, #13]
 80054d8:	4909      	ldr	r1, [pc, #36]	; (8005500 <UARTEx_SetNbDataToProcess+0x94>)
 80054da:	5c8a      	ldrb	r2, [r1, r2]
 80054dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054e0:	7b7a      	ldrb	r2, [r7, #13]
 80054e2:	4908      	ldr	r1, [pc, #32]	; (8005504 <UARTEx_SetNbDataToProcess+0x98>)
 80054e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	08015f54 	.word	0x08015f54
 8005504:	08015f5c 	.word	0x08015f5c

08005508 <__errno>:
 8005508:	4b01      	ldr	r3, [pc, #4]	; (8005510 <__errno+0x8>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000000c 	.word	0x2000000c

08005514 <__libc_init_array>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4d0d      	ldr	r5, [pc, #52]	; (800554c <__libc_init_array+0x38>)
 8005518:	4c0d      	ldr	r4, [pc, #52]	; (8005550 <__libc_init_array+0x3c>)
 800551a:	1b64      	subs	r4, r4, r5
 800551c:	10a4      	asrs	r4, r4, #2
 800551e:	2600      	movs	r6, #0
 8005520:	42a6      	cmp	r6, r4
 8005522:	d109      	bne.n	8005538 <__libc_init_array+0x24>
 8005524:	4d0b      	ldr	r5, [pc, #44]	; (8005554 <__libc_init_array+0x40>)
 8005526:	4c0c      	ldr	r4, [pc, #48]	; (8005558 <__libc_init_array+0x44>)
 8005528:	f000 ff3c 	bl	80063a4 <_init>
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	2600      	movs	r6, #0
 8005532:	42a6      	cmp	r6, r4
 8005534:	d105      	bne.n	8005542 <__libc_init_array+0x2e>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	f855 3b04 	ldr.w	r3, [r5], #4
 800553c:	4798      	blx	r3
 800553e:	3601      	adds	r6, #1
 8005540:	e7ee      	b.n	8005520 <__libc_init_array+0xc>
 8005542:	f855 3b04 	ldr.w	r3, [r5], #4
 8005546:	4798      	blx	r3
 8005548:	3601      	adds	r6, #1
 800554a:	e7f2      	b.n	8005532 <__libc_init_array+0x1e>
 800554c:	08015fa0 	.word	0x08015fa0
 8005550:	08015fa0 	.word	0x08015fa0
 8005554:	08015fa0 	.word	0x08015fa0
 8005558:	08015fa4 	.word	0x08015fa4

0800555c <memset>:
 800555c:	4402      	add	r2, r0
 800555e:	4603      	mov	r3, r0
 8005560:	4293      	cmp	r3, r2
 8005562:	d100      	bne.n	8005566 <memset+0xa>
 8005564:	4770      	bx	lr
 8005566:	f803 1b01 	strb.w	r1, [r3], #1
 800556a:	e7f9      	b.n	8005560 <memset+0x4>

0800556c <pow>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	ed2d 8b02 	vpush	{d8}
 8005572:	eeb0 8a40 	vmov.f32	s16, s0
 8005576:	eef0 8a60 	vmov.f32	s17, s1
 800557a:	ec55 4b11 	vmov	r4, r5, d1
 800557e:	f000 f867 	bl	8005650 <__ieee754_pow>
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	ec57 6b10 	vmov	r6, r7, d0
 800558e:	f7fb fa99 	bl	8000ac4 <__aeabi_dcmpun>
 8005592:	2800      	cmp	r0, #0
 8005594:	d13b      	bne.n	800560e <pow+0xa2>
 8005596:	ec51 0b18 	vmov	r0, r1, d8
 800559a:	2200      	movs	r2, #0
 800559c:	2300      	movs	r3, #0
 800559e:	f7fb fa5f 	bl	8000a60 <__aeabi_dcmpeq>
 80055a2:	b1b8      	cbz	r0, 80055d4 <pow+0x68>
 80055a4:	2200      	movs	r2, #0
 80055a6:	2300      	movs	r3, #0
 80055a8:	4620      	mov	r0, r4
 80055aa:	4629      	mov	r1, r5
 80055ac:	f7fb fa58 	bl	8000a60 <__aeabi_dcmpeq>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d146      	bne.n	8005642 <pow+0xd6>
 80055b4:	ec45 4b10 	vmov	d0, r4, r5
 80055b8:	f000 fe63 	bl	8006282 <finite>
 80055bc:	b338      	cbz	r0, 800560e <pow+0xa2>
 80055be:	2200      	movs	r2, #0
 80055c0:	2300      	movs	r3, #0
 80055c2:	4620      	mov	r0, r4
 80055c4:	4629      	mov	r1, r5
 80055c6:	f7fb fa55 	bl	8000a74 <__aeabi_dcmplt>
 80055ca:	b300      	cbz	r0, 800560e <pow+0xa2>
 80055cc:	f7ff ff9c 	bl	8005508 <__errno>
 80055d0:	2322      	movs	r3, #34	; 0x22
 80055d2:	e01b      	b.n	800560c <pow+0xa0>
 80055d4:	ec47 6b10 	vmov	d0, r6, r7
 80055d8:	f000 fe53 	bl	8006282 <finite>
 80055dc:	b9e0      	cbnz	r0, 8005618 <pow+0xac>
 80055de:	eeb0 0a48 	vmov.f32	s0, s16
 80055e2:	eef0 0a68 	vmov.f32	s1, s17
 80055e6:	f000 fe4c 	bl	8006282 <finite>
 80055ea:	b1a8      	cbz	r0, 8005618 <pow+0xac>
 80055ec:	ec45 4b10 	vmov	d0, r4, r5
 80055f0:	f000 fe47 	bl	8006282 <finite>
 80055f4:	b180      	cbz	r0, 8005618 <pow+0xac>
 80055f6:	4632      	mov	r2, r6
 80055f8:	463b      	mov	r3, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	4639      	mov	r1, r7
 80055fe:	f7fb fa61 	bl	8000ac4 <__aeabi_dcmpun>
 8005602:	2800      	cmp	r0, #0
 8005604:	d0e2      	beq.n	80055cc <pow+0x60>
 8005606:	f7ff ff7f 	bl	8005508 <__errno>
 800560a:	2321      	movs	r3, #33	; 0x21
 800560c:	6003      	str	r3, [r0, #0]
 800560e:	ecbd 8b02 	vpop	{d8}
 8005612:	ec47 6b10 	vmov	d0, r6, r7
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005618:	2200      	movs	r2, #0
 800561a:	2300      	movs	r3, #0
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fb fa1e 	bl	8000a60 <__aeabi_dcmpeq>
 8005624:	2800      	cmp	r0, #0
 8005626:	d0f2      	beq.n	800560e <pow+0xa2>
 8005628:	eeb0 0a48 	vmov.f32	s0, s16
 800562c:	eef0 0a68 	vmov.f32	s1, s17
 8005630:	f000 fe27 	bl	8006282 <finite>
 8005634:	2800      	cmp	r0, #0
 8005636:	d0ea      	beq.n	800560e <pow+0xa2>
 8005638:	ec45 4b10 	vmov	d0, r4, r5
 800563c:	f000 fe21 	bl	8006282 <finite>
 8005640:	e7c3      	b.n	80055ca <pow+0x5e>
 8005642:	4f01      	ldr	r7, [pc, #4]	; (8005648 <pow+0xdc>)
 8005644:	2600      	movs	r6, #0
 8005646:	e7e2      	b.n	800560e <pow+0xa2>
 8005648:	3ff00000 	.word	0x3ff00000
 800564c:	00000000 	.word	0x00000000

08005650 <__ieee754_pow>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	ed2d 8b06 	vpush	{d8-d10}
 8005658:	b089      	sub	sp, #36	; 0x24
 800565a:	ed8d 1b00 	vstr	d1, [sp]
 800565e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005662:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005666:	ea58 0102 	orrs.w	r1, r8, r2
 800566a:	ec57 6b10 	vmov	r6, r7, d0
 800566e:	d115      	bne.n	800569c <__ieee754_pow+0x4c>
 8005670:	19b3      	adds	r3, r6, r6
 8005672:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005676:	4152      	adcs	r2, r2
 8005678:	4299      	cmp	r1, r3
 800567a:	4b89      	ldr	r3, [pc, #548]	; (80058a0 <__ieee754_pow+0x250>)
 800567c:	4193      	sbcs	r3, r2
 800567e:	f080 84d2 	bcs.w	8006026 <__ieee754_pow+0x9d6>
 8005682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005686:	4630      	mov	r0, r6
 8005688:	4639      	mov	r1, r7
 800568a:	f7fa fdcb 	bl	8000224 <__adddf3>
 800568e:	ec41 0b10 	vmov	d0, r0, r1
 8005692:	b009      	add	sp, #36	; 0x24
 8005694:	ecbd 8b06 	vpop	{d8-d10}
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	4b81      	ldr	r3, [pc, #516]	; (80058a4 <__ieee754_pow+0x254>)
 800569e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80056a2:	429c      	cmp	r4, r3
 80056a4:	ee10 aa10 	vmov	sl, s0
 80056a8:	463d      	mov	r5, r7
 80056aa:	dc06      	bgt.n	80056ba <__ieee754_pow+0x6a>
 80056ac:	d101      	bne.n	80056b2 <__ieee754_pow+0x62>
 80056ae:	2e00      	cmp	r6, #0
 80056b0:	d1e7      	bne.n	8005682 <__ieee754_pow+0x32>
 80056b2:	4598      	cmp	r8, r3
 80056b4:	dc01      	bgt.n	80056ba <__ieee754_pow+0x6a>
 80056b6:	d10f      	bne.n	80056d8 <__ieee754_pow+0x88>
 80056b8:	b172      	cbz	r2, 80056d8 <__ieee754_pow+0x88>
 80056ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80056be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80056c2:	ea55 050a 	orrs.w	r5, r5, sl
 80056c6:	d1dc      	bne.n	8005682 <__ieee754_pow+0x32>
 80056c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80056cc:	18db      	adds	r3, r3, r3
 80056ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80056d2:	4152      	adcs	r2, r2
 80056d4:	429d      	cmp	r5, r3
 80056d6:	e7d0      	b.n	800567a <__ieee754_pow+0x2a>
 80056d8:	2d00      	cmp	r5, #0
 80056da:	da3b      	bge.n	8005754 <__ieee754_pow+0x104>
 80056dc:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <__ieee754_pow+0x258>)
 80056de:	4598      	cmp	r8, r3
 80056e0:	dc51      	bgt.n	8005786 <__ieee754_pow+0x136>
 80056e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80056e6:	4598      	cmp	r8, r3
 80056e8:	f340 84ac 	ble.w	8006044 <__ieee754_pow+0x9f4>
 80056ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80056f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80056f4:	2b14      	cmp	r3, #20
 80056f6:	dd0f      	ble.n	8005718 <__ieee754_pow+0xc8>
 80056f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80056fc:	fa22 f103 	lsr.w	r1, r2, r3
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	4293      	cmp	r3, r2
 8005706:	f040 849d 	bne.w	8006044 <__ieee754_pow+0x9f4>
 800570a:	f001 0101 	and.w	r1, r1, #1
 800570e:	f1c1 0302 	rsb	r3, r1, #2
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	b182      	cbz	r2, 8005738 <__ieee754_pow+0xe8>
 8005716:	e05f      	b.n	80057d8 <__ieee754_pow+0x188>
 8005718:	2a00      	cmp	r2, #0
 800571a:	d15b      	bne.n	80057d4 <__ieee754_pow+0x184>
 800571c:	f1c3 0314 	rsb	r3, r3, #20
 8005720:	fa48 f103 	asr.w	r1, r8, r3
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	4543      	cmp	r3, r8
 800572a:	f040 8488 	bne.w	800603e <__ieee754_pow+0x9ee>
 800572e:	f001 0101 	and.w	r1, r1, #1
 8005732:	f1c1 0302 	rsb	r3, r1, #2
 8005736:	9304      	str	r3, [sp, #16]
 8005738:	4b5c      	ldr	r3, [pc, #368]	; (80058ac <__ieee754_pow+0x25c>)
 800573a:	4598      	cmp	r8, r3
 800573c:	d132      	bne.n	80057a4 <__ieee754_pow+0x154>
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	f280 8478 	bge.w	8006036 <__ieee754_pow+0x9e6>
 8005746:	4959      	ldr	r1, [pc, #356]	; (80058ac <__ieee754_pow+0x25c>)
 8005748:	4632      	mov	r2, r6
 800574a:	463b      	mov	r3, r7
 800574c:	2000      	movs	r0, #0
 800574e:	f7fb f849 	bl	80007e4 <__aeabi_ddiv>
 8005752:	e79c      	b.n	800568e <__ieee754_pow+0x3e>
 8005754:	2300      	movs	r3, #0
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	2a00      	cmp	r2, #0
 800575a:	d13d      	bne.n	80057d8 <__ieee754_pow+0x188>
 800575c:	4b51      	ldr	r3, [pc, #324]	; (80058a4 <__ieee754_pow+0x254>)
 800575e:	4598      	cmp	r8, r3
 8005760:	d1ea      	bne.n	8005738 <__ieee754_pow+0xe8>
 8005762:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005766:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800576a:	ea53 030a 	orrs.w	r3, r3, sl
 800576e:	f000 845a 	beq.w	8006026 <__ieee754_pow+0x9d6>
 8005772:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <__ieee754_pow+0x260>)
 8005774:	429c      	cmp	r4, r3
 8005776:	dd08      	ble.n	800578a <__ieee754_pow+0x13a>
 8005778:	f1b9 0f00 	cmp.w	r9, #0
 800577c:	f2c0 8457 	blt.w	800602e <__ieee754_pow+0x9de>
 8005780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005784:	e783      	b.n	800568e <__ieee754_pow+0x3e>
 8005786:	2302      	movs	r3, #2
 8005788:	e7e5      	b.n	8005756 <__ieee754_pow+0x106>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	f04f 0000 	mov.w	r0, #0
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	f6bf af7a 	bge.w	800568e <__ieee754_pow+0x3e>
 800579a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800579e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80057a2:	e774      	b.n	800568e <__ieee754_pow+0x3e>
 80057a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80057a8:	d106      	bne.n	80057b8 <__ieee754_pow+0x168>
 80057aa:	4632      	mov	r2, r6
 80057ac:	463b      	mov	r3, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	4639      	mov	r1, r7
 80057b2:	f7fa feed 	bl	8000590 <__aeabi_dmul>
 80057b6:	e76a      	b.n	800568e <__ieee754_pow+0x3e>
 80057b8:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <__ieee754_pow+0x264>)
 80057ba:	4599      	cmp	r9, r3
 80057bc:	d10c      	bne.n	80057d8 <__ieee754_pow+0x188>
 80057be:	2d00      	cmp	r5, #0
 80057c0:	db0a      	blt.n	80057d8 <__ieee754_pow+0x188>
 80057c2:	ec47 6b10 	vmov	d0, r6, r7
 80057c6:	b009      	add	sp, #36	; 0x24
 80057c8:	ecbd 8b06 	vpop	{d8-d10}
 80057cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	f000 bc6c 	b.w	80060ac <__ieee754_sqrt>
 80057d4:	2300      	movs	r3, #0
 80057d6:	9304      	str	r3, [sp, #16]
 80057d8:	ec47 6b10 	vmov	d0, r6, r7
 80057dc:	f000 fd48 	bl	8006270 <fabs>
 80057e0:	ec51 0b10 	vmov	r0, r1, d0
 80057e4:	f1ba 0f00 	cmp.w	sl, #0
 80057e8:	d129      	bne.n	800583e <__ieee754_pow+0x1ee>
 80057ea:	b124      	cbz	r4, 80057f6 <__ieee754_pow+0x1a6>
 80057ec:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <__ieee754_pow+0x25c>)
 80057ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d123      	bne.n	800583e <__ieee754_pow+0x1ee>
 80057f6:	f1b9 0f00 	cmp.w	r9, #0
 80057fa:	da05      	bge.n	8005808 <__ieee754_pow+0x1b8>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	2000      	movs	r0, #0
 8005802:	492a      	ldr	r1, [pc, #168]	; (80058ac <__ieee754_pow+0x25c>)
 8005804:	f7fa ffee 	bl	80007e4 <__aeabi_ddiv>
 8005808:	2d00      	cmp	r5, #0
 800580a:	f6bf af40 	bge.w	800568e <__ieee754_pow+0x3e>
 800580e:	9b04      	ldr	r3, [sp, #16]
 8005810:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005814:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005818:	4323      	orrs	r3, r4
 800581a:	d108      	bne.n	800582e <__ieee754_pow+0x1de>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4610      	mov	r0, r2
 8005822:	4619      	mov	r1, r3
 8005824:	f7fa fcfc 	bl	8000220 <__aeabi_dsub>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	e78f      	b.n	800574e <__ieee754_pow+0xfe>
 800582e:	9b04      	ldr	r3, [sp, #16]
 8005830:	2b01      	cmp	r3, #1
 8005832:	f47f af2c 	bne.w	800568e <__ieee754_pow+0x3e>
 8005836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800583a:	4619      	mov	r1, r3
 800583c:	e727      	b.n	800568e <__ieee754_pow+0x3e>
 800583e:	0feb      	lsrs	r3, r5, #31
 8005840:	3b01      	subs	r3, #1
 8005842:	9306      	str	r3, [sp, #24]
 8005844:	9a06      	ldr	r2, [sp, #24]
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	d102      	bne.n	8005852 <__ieee754_pow+0x202>
 800584c:	4632      	mov	r2, r6
 800584e:	463b      	mov	r3, r7
 8005850:	e7e6      	b.n	8005820 <__ieee754_pow+0x1d0>
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <__ieee754_pow+0x268>)
 8005854:	4598      	cmp	r8, r3
 8005856:	f340 80fb 	ble.w	8005a50 <__ieee754_pow+0x400>
 800585a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800585e:	4598      	cmp	r8, r3
 8005860:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <__ieee754_pow+0x260>)
 8005862:	dd0c      	ble.n	800587e <__ieee754_pow+0x22e>
 8005864:	429c      	cmp	r4, r3
 8005866:	dc0f      	bgt.n	8005888 <__ieee754_pow+0x238>
 8005868:	f1b9 0f00 	cmp.w	r9, #0
 800586c:	da0f      	bge.n	800588e <__ieee754_pow+0x23e>
 800586e:	2000      	movs	r0, #0
 8005870:	b009      	add	sp, #36	; 0x24
 8005872:	ecbd 8b06 	vpop	{d8-d10}
 8005876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f000 bcf0 	b.w	800625e <__math_oflow>
 800587e:	429c      	cmp	r4, r3
 8005880:	dbf2      	blt.n	8005868 <__ieee754_pow+0x218>
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <__ieee754_pow+0x25c>)
 8005884:	429c      	cmp	r4, r3
 8005886:	dd19      	ble.n	80058bc <__ieee754_pow+0x26c>
 8005888:	f1b9 0f00 	cmp.w	r9, #0
 800588c:	dcef      	bgt.n	800586e <__ieee754_pow+0x21e>
 800588e:	2000      	movs	r0, #0
 8005890:	b009      	add	sp, #36	; 0x24
 8005892:	ecbd 8b06 	vpop	{d8-d10}
 8005896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f000 bcd7 	b.w	800624c <__math_uflow>
 800589e:	bf00      	nop
 80058a0:	fff00000 	.word	0xfff00000
 80058a4:	7ff00000 	.word	0x7ff00000
 80058a8:	433fffff 	.word	0x433fffff
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	3fefffff 	.word	0x3fefffff
 80058b4:	3fe00000 	.word	0x3fe00000
 80058b8:	41e00000 	.word	0x41e00000
 80058bc:	4b60      	ldr	r3, [pc, #384]	; (8005a40 <__ieee754_pow+0x3f0>)
 80058be:	2200      	movs	r2, #0
 80058c0:	f7fa fcae 	bl	8000220 <__aeabi_dsub>
 80058c4:	a354      	add	r3, pc, #336	; (adr r3, 8005a18 <__ieee754_pow+0x3c8>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	4604      	mov	r4, r0
 80058cc:	460d      	mov	r5, r1
 80058ce:	f7fa fe5f 	bl	8000590 <__aeabi_dmul>
 80058d2:	a353      	add	r3, pc, #332	; (adr r3, 8005a20 <__ieee754_pow+0x3d0>)
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	4620      	mov	r0, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	f7fa fe56 	bl	8000590 <__aeabi_dmul>
 80058e4:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <__ieee754_pow+0x3f4>)
 80058e6:	4682      	mov	sl, r0
 80058e8:	468b      	mov	fp, r1
 80058ea:	2200      	movs	r2, #0
 80058ec:	4620      	mov	r0, r4
 80058ee:	4629      	mov	r1, r5
 80058f0:	f7fa fe4e 	bl	8000590 <__aeabi_dmul>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	a14b      	add	r1, pc, #300	; (adr r1, 8005a28 <__ieee754_pow+0x3d8>)
 80058fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058fe:	f7fa fc8f 	bl	8000220 <__aeabi_dsub>
 8005902:	4622      	mov	r2, r4
 8005904:	462b      	mov	r3, r5
 8005906:	f7fa fe43 	bl	8000590 <__aeabi_dmul>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	2000      	movs	r0, #0
 8005910:	494d      	ldr	r1, [pc, #308]	; (8005a48 <__ieee754_pow+0x3f8>)
 8005912:	f7fa fc85 	bl	8000220 <__aeabi_dsub>
 8005916:	4622      	mov	r2, r4
 8005918:	4680      	mov	r8, r0
 800591a:	4689      	mov	r9, r1
 800591c:	462b      	mov	r3, r5
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fa fe35 	bl	8000590 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4640      	mov	r0, r8
 800592c:	4649      	mov	r1, r9
 800592e:	f7fa fe2f 	bl	8000590 <__aeabi_dmul>
 8005932:	a33f      	add	r3, pc, #252	; (adr r3, 8005a30 <__ieee754_pow+0x3e0>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fe2a 	bl	8000590 <__aeabi_dmul>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4650      	mov	r0, sl
 8005942:	4659      	mov	r1, fp
 8005944:	f7fa fc6c 	bl	8000220 <__aeabi_dsub>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4680      	mov	r8, r0
 800594e:	4689      	mov	r9, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa fc66 	bl	8000224 <__adddf3>
 8005958:	2000      	movs	r0, #0
 800595a:	4632      	mov	r2, r6
 800595c:	463b      	mov	r3, r7
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	f7fa fc5d 	bl	8000220 <__aeabi_dsub>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fa fc57 	bl	8000220 <__aeabi_dsub>
 8005972:	9b04      	ldr	r3, [sp, #16]
 8005974:	9a06      	ldr	r2, [sp, #24]
 8005976:	3b01      	subs	r3, #1
 8005978:	4313      	orrs	r3, r2
 800597a:	4682      	mov	sl, r0
 800597c:	468b      	mov	fp, r1
 800597e:	f040 81e7 	bne.w	8005d50 <__ieee754_pow+0x700>
 8005982:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005a38 <__ieee754_pow+0x3e8>
 8005986:	eeb0 8a47 	vmov.f32	s16, s14
 800598a:	eef0 8a67 	vmov.f32	s17, s15
 800598e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005992:	2600      	movs	r6, #0
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800599c:	f7fa fc40 	bl	8000220 <__aeabi_dsub>
 80059a0:	4622      	mov	r2, r4
 80059a2:	462b      	mov	r3, r5
 80059a4:	f7fa fdf4 	bl	8000590 <__aeabi_dmul>
 80059a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ac:	4680      	mov	r8, r0
 80059ae:	4689      	mov	r9, r1
 80059b0:	4650      	mov	r0, sl
 80059b2:	4659      	mov	r1, fp
 80059b4:	f7fa fdec 	bl	8000590 <__aeabi_dmul>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4640      	mov	r0, r8
 80059be:	4649      	mov	r1, r9
 80059c0:	f7fa fc30 	bl	8000224 <__adddf3>
 80059c4:	4632      	mov	r2, r6
 80059c6:	463b      	mov	r3, r7
 80059c8:	4680      	mov	r8, r0
 80059ca:	4689      	mov	r9, r1
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fdde 	bl	8000590 <__aeabi_dmul>
 80059d4:	460b      	mov	r3, r1
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	4602      	mov	r2, r0
 80059dc:	4649      	mov	r1, r9
 80059de:	4640      	mov	r0, r8
 80059e0:	f7fa fc20 	bl	8000224 <__adddf3>
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <__ieee754_pow+0x3fc>)
 80059e6:	4299      	cmp	r1, r3
 80059e8:	ec45 4b19 	vmov	d9, r4, r5
 80059ec:	4606      	mov	r6, r0
 80059ee:	460f      	mov	r7, r1
 80059f0:	468b      	mov	fp, r1
 80059f2:	f340 82f1 	ble.w	8005fd8 <__ieee754_pow+0x988>
 80059f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80059fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80059fe:	4303      	orrs	r3, r0
 8005a00:	f000 81e4 	beq.w	8005dcc <__ieee754_pow+0x77c>
 8005a04:	ec51 0b18 	vmov	r0, r1, d8
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f7fb f832 	bl	8000a74 <__aeabi_dcmplt>
 8005a10:	3800      	subs	r0, #0
 8005a12:	bf18      	it	ne
 8005a14:	2001      	movne	r0, #1
 8005a16:	e72b      	b.n	8005870 <__ieee754_pow+0x220>
 8005a18:	60000000 	.word	0x60000000
 8005a1c:	3ff71547 	.word	0x3ff71547
 8005a20:	f85ddf44 	.word	0xf85ddf44
 8005a24:	3e54ae0b 	.word	0x3e54ae0b
 8005a28:	55555555 	.word	0x55555555
 8005a2c:	3fd55555 	.word	0x3fd55555
 8005a30:	652b82fe 	.word	0x652b82fe
 8005a34:	3ff71547 	.word	0x3ff71547
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	bff00000 	.word	0xbff00000
 8005a40:	3ff00000 	.word	0x3ff00000
 8005a44:	3fd00000 	.word	0x3fd00000
 8005a48:	3fe00000 	.word	0x3fe00000
 8005a4c:	408fffff 	.word	0x408fffff
 8005a50:	4bd5      	ldr	r3, [pc, #852]	; (8005da8 <__ieee754_pow+0x758>)
 8005a52:	402b      	ands	r3, r5
 8005a54:	2200      	movs	r2, #0
 8005a56:	b92b      	cbnz	r3, 8005a64 <__ieee754_pow+0x414>
 8005a58:	4bd4      	ldr	r3, [pc, #848]	; (8005dac <__ieee754_pow+0x75c>)
 8005a5a:	f7fa fd99 	bl	8000590 <__aeabi_dmul>
 8005a5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005a62:	460c      	mov	r4, r1
 8005a64:	1523      	asrs	r3, r4, #20
 8005a66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a6a:	4413      	add	r3, r2
 8005a6c:	9305      	str	r3, [sp, #20]
 8005a6e:	4bd0      	ldr	r3, [pc, #832]	; (8005db0 <__ieee754_pow+0x760>)
 8005a70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005a7e:	dd08      	ble.n	8005a92 <__ieee754_pow+0x442>
 8005a80:	4bcc      	ldr	r3, [pc, #816]	; (8005db4 <__ieee754_pow+0x764>)
 8005a82:	429c      	cmp	r4, r3
 8005a84:	f340 8162 	ble.w	8005d4c <__ieee754_pow+0x6fc>
 8005a88:	9b05      	ldr	r3, [sp, #20]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	9305      	str	r3, [sp, #20]
 8005a8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005a92:	2400      	movs	r4, #0
 8005a94:	00e3      	lsls	r3, r4, #3
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	4bc7      	ldr	r3, [pc, #796]	; (8005db8 <__ieee754_pow+0x768>)
 8005a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a9e:	ed93 7b00 	vldr	d7, [r3]
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	ec53 2b17 	vmov	r2, r3, d7
 8005aa8:	eeb0 9a47 	vmov.f32	s18, s14
 8005aac:	eef0 9a67 	vmov.f32	s19, s15
 8005ab0:	4682      	mov	sl, r0
 8005ab2:	f7fa fbb5 	bl	8000220 <__aeabi_dsub>
 8005ab6:	4652      	mov	r2, sl
 8005ab8:	4606      	mov	r6, r0
 8005aba:	460f      	mov	r7, r1
 8005abc:	462b      	mov	r3, r5
 8005abe:	ec51 0b19 	vmov	r0, r1, d9
 8005ac2:	f7fa fbaf 	bl	8000224 <__adddf3>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	2000      	movs	r0, #0
 8005acc:	49bb      	ldr	r1, [pc, #748]	; (8005dbc <__ieee754_pow+0x76c>)
 8005ace:	f7fa fe89 	bl	80007e4 <__aeabi_ddiv>
 8005ad2:	ec41 0b1a 	vmov	d10, r0, r1
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa fd57 	bl	8000590 <__aeabi_dmul>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae8:	9302      	str	r3, [sp, #8]
 8005aea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005aee:	46ab      	mov	fp, r5
 8005af0:	106d      	asrs	r5, r5, #1
 8005af2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005af6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005afa:	ec41 0b18 	vmov	d8, r0, r1
 8005afe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005b02:	2200      	movs	r2, #0
 8005b04:	4640      	mov	r0, r8
 8005b06:	4649      	mov	r1, r9
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	f7fa fd40 	bl	8000590 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa fb82 	bl	8000220 <__aeabi_dsub>
 8005b1c:	ec53 2b19 	vmov	r2, r3, d9
 8005b20:	4606      	mov	r6, r0
 8005b22:	460f      	mov	r7, r1
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fb7a 	bl	8000220 <__aeabi_dsub>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4650      	mov	r0, sl
 8005b32:	4659      	mov	r1, fp
 8005b34:	f7fa fb74 	bl	8000220 <__aeabi_dsub>
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	f7fa fd28 	bl	8000590 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa fb6a 	bl	8000220 <__aeabi_dsub>
 8005b4c:	ec53 2b1a 	vmov	r2, r3, d10
 8005b50:	f7fa fd1e 	bl	8000590 <__aeabi_dmul>
 8005b54:	ec53 2b18 	vmov	r2, r3, d8
 8005b58:	ec41 0b19 	vmov	d9, r0, r1
 8005b5c:	ec51 0b18 	vmov	r0, r1, d8
 8005b60:	f7fa fd16 	bl	8000590 <__aeabi_dmul>
 8005b64:	a37c      	add	r3, pc, #496	; (adr r3, 8005d58 <__ieee754_pow+0x708>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	f7fa fd0f 	bl	8000590 <__aeabi_dmul>
 8005b72:	a37b      	add	r3, pc, #492	; (adr r3, 8005d60 <__ieee754_pow+0x710>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f7fa fb54 	bl	8000224 <__adddf3>
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	f7fa fd06 	bl	8000590 <__aeabi_dmul>
 8005b84:	a378      	add	r3, pc, #480	; (adr r3, 8005d68 <__ieee754_pow+0x718>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fb4b 	bl	8000224 <__adddf3>
 8005b8e:	4622      	mov	r2, r4
 8005b90:	462b      	mov	r3, r5
 8005b92:	f7fa fcfd 	bl	8000590 <__aeabi_dmul>
 8005b96:	a376      	add	r3, pc, #472	; (adr r3, 8005d70 <__ieee754_pow+0x720>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f7fa fb42 	bl	8000224 <__adddf3>
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	f7fa fcf4 	bl	8000590 <__aeabi_dmul>
 8005ba8:	a373      	add	r3, pc, #460	; (adr r3, 8005d78 <__ieee754_pow+0x728>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f7fa fb39 	bl	8000224 <__adddf3>
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	f7fa fceb 	bl	8000590 <__aeabi_dmul>
 8005bba:	a371      	add	r3, pc, #452	; (adr r3, 8005d80 <__ieee754_pow+0x730>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f7fa fb30 	bl	8000224 <__adddf3>
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	462b      	mov	r3, r5
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa fcde 	bl	8000590 <__aeabi_dmul>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4639      	mov	r1, r7
 8005bdc:	f7fa fcd8 	bl	8000590 <__aeabi_dmul>
 8005be0:	4642      	mov	r2, r8
 8005be2:	4604      	mov	r4, r0
 8005be4:	460d      	mov	r5, r1
 8005be6:	464b      	mov	r3, r9
 8005be8:	ec51 0b18 	vmov	r0, r1, d8
 8005bec:	f7fa fb1a 	bl	8000224 <__adddf3>
 8005bf0:	ec53 2b19 	vmov	r2, r3, d9
 8005bf4:	f7fa fccc 	bl	8000590 <__aeabi_dmul>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	f7fa fb12 	bl	8000224 <__adddf3>
 8005c00:	4642      	mov	r2, r8
 8005c02:	4682      	mov	sl, r0
 8005c04:	468b      	mov	fp, r1
 8005c06:	464b      	mov	r3, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	f7fa fcc0 	bl	8000590 <__aeabi_dmul>
 8005c10:	4b6b      	ldr	r3, [pc, #428]	; (8005dc0 <__ieee754_pow+0x770>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	f7fa fb04 	bl	8000224 <__adddf3>
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	465b      	mov	r3, fp
 8005c20:	f7fa fb00 	bl	8000224 <__adddf3>
 8005c24:	2000      	movs	r0, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	460d      	mov	r5, r1
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4640      	mov	r0, r8
 8005c30:	4649      	mov	r1, r9
 8005c32:	f7fa fcad 	bl	8000590 <__aeabi_dmul>
 8005c36:	4b62      	ldr	r3, [pc, #392]	; (8005dc0 <__ieee754_pow+0x770>)
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7fa faed 	bl	8000220 <__aeabi_dsub>
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	f7fa fae9 	bl	8000220 <__aeabi_dsub>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4650      	mov	r0, sl
 8005c54:	4659      	mov	r1, fp
 8005c56:	f7fa fae3 	bl	8000220 <__aeabi_dsub>
 8005c5a:	ec53 2b18 	vmov	r2, r3, d8
 8005c5e:	f7fa fc97 	bl	8000590 <__aeabi_dmul>
 8005c62:	4622      	mov	r2, r4
 8005c64:	4606      	mov	r6, r0
 8005c66:	460f      	mov	r7, r1
 8005c68:	462b      	mov	r3, r5
 8005c6a:	ec51 0b19 	vmov	r0, r1, d9
 8005c6e:	f7fa fc8f 	bl	8000590 <__aeabi_dmul>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa fad3 	bl	8000224 <__adddf3>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460f      	mov	r7, r1
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa facb 	bl	8000224 <__adddf3>
 8005c8e:	a33e      	add	r3, pc, #248	; (adr r3, 8005d88 <__ieee754_pow+0x738>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	2000      	movs	r0, #0
 8005c96:	4604      	mov	r4, r0
 8005c98:	460d      	mov	r5, r1
 8005c9a:	f7fa fc79 	bl	8000590 <__aeabi_dmul>
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	ec41 0b18 	vmov	d8, r0, r1
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa fab9 	bl	8000220 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	f7fa fab3 	bl	8000220 <__aeabi_dsub>
 8005cba:	a335      	add	r3, pc, #212	; (adr r3, 8005d90 <__ieee754_pow+0x740>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fc66 	bl	8000590 <__aeabi_dmul>
 8005cc4:	a334      	add	r3, pc, #208	; (adr r3, 8005d98 <__ieee754_pow+0x748>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fa fc5d 	bl	8000590 <__aeabi_dmul>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa faa1 	bl	8000224 <__adddf3>
 8005ce2:	9a07      	ldr	r2, [sp, #28]
 8005ce4:	4b37      	ldr	r3, [pc, #220]	; (8005dc4 <__ieee754_pow+0x774>)
 8005ce6:	4413      	add	r3, r2
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fa9a 	bl	8000224 <__adddf3>
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	9805      	ldr	r0, [sp, #20]
 8005cf4:	468b      	mov	fp, r1
 8005cf6:	f7fa fbe1 	bl	80004bc <__aeabi_i2d>
 8005cfa:	9a07      	ldr	r2, [sp, #28]
 8005cfc:	4b32      	ldr	r3, [pc, #200]	; (8005dc8 <__ieee754_pow+0x778>)
 8005cfe:	4413      	add	r3, r2
 8005d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	465b      	mov	r3, fp
 8005d0c:	ec51 0b18 	vmov	r0, r1, d8
 8005d10:	f7fa fa88 	bl	8000224 <__adddf3>
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	f7fa fa84 	bl	8000224 <__adddf3>
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	463b      	mov	r3, r7
 8005d20:	f7fa fa80 	bl	8000224 <__adddf3>
 8005d24:	2000      	movs	r0, #0
 8005d26:	4632      	mov	r2, r6
 8005d28:	463b      	mov	r3, r7
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	f7fa fa77 	bl	8000220 <__aeabi_dsub>
 8005d32:	4642      	mov	r2, r8
 8005d34:	464b      	mov	r3, r9
 8005d36:	f7fa fa73 	bl	8000220 <__aeabi_dsub>
 8005d3a:	ec53 2b18 	vmov	r2, r3, d8
 8005d3e:	f7fa fa6f 	bl	8000220 <__aeabi_dsub>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4650      	mov	r0, sl
 8005d48:	4659      	mov	r1, fp
 8005d4a:	e610      	b.n	800596e <__ieee754_pow+0x31e>
 8005d4c:	2401      	movs	r4, #1
 8005d4e:	e6a1      	b.n	8005a94 <__ieee754_pow+0x444>
 8005d50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005da0 <__ieee754_pow+0x750>
 8005d54:	e617      	b.n	8005986 <__ieee754_pow+0x336>
 8005d56:	bf00      	nop
 8005d58:	4a454eef 	.word	0x4a454eef
 8005d5c:	3fca7e28 	.word	0x3fca7e28
 8005d60:	93c9db65 	.word	0x93c9db65
 8005d64:	3fcd864a 	.word	0x3fcd864a
 8005d68:	a91d4101 	.word	0xa91d4101
 8005d6c:	3fd17460 	.word	0x3fd17460
 8005d70:	518f264d 	.word	0x518f264d
 8005d74:	3fd55555 	.word	0x3fd55555
 8005d78:	db6fabff 	.word	0xdb6fabff
 8005d7c:	3fdb6db6 	.word	0x3fdb6db6
 8005d80:	33333303 	.word	0x33333303
 8005d84:	3fe33333 	.word	0x3fe33333
 8005d88:	e0000000 	.word	0xe0000000
 8005d8c:	3feec709 	.word	0x3feec709
 8005d90:	dc3a03fd 	.word	0xdc3a03fd
 8005d94:	3feec709 	.word	0x3feec709
 8005d98:	145b01f5 	.word	0x145b01f5
 8005d9c:	be3e2fe0 	.word	0xbe3e2fe0
 8005da0:	00000000 	.word	0x00000000
 8005da4:	3ff00000 	.word	0x3ff00000
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	43400000 	.word	0x43400000
 8005db0:	0003988e 	.word	0x0003988e
 8005db4:	000bb679 	.word	0x000bb679
 8005db8:	08015f68 	.word	0x08015f68
 8005dbc:	3ff00000 	.word	0x3ff00000
 8005dc0:	40080000 	.word	0x40080000
 8005dc4:	08015f88 	.word	0x08015f88
 8005dc8:	08015f78 	.word	0x08015f78
 8005dcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80060a4 <__ieee754_pow+0xa54>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f7fa fa25 	bl	8000224 <__adddf3>
 8005dda:	4622      	mov	r2, r4
 8005ddc:	ec41 0b1a 	vmov	d10, r0, r1
 8005de0:	462b      	mov	r3, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	f7fa fa1b 	bl	8000220 <__aeabi_dsub>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	ec51 0b1a 	vmov	r0, r1, d10
 8005df2:	f7fa fe5d 	bl	8000ab0 <__aeabi_dcmpgt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	f47f ae04 	bne.w	8005a04 <__ieee754_pow+0x3b4>
 8005dfc:	4aa4      	ldr	r2, [pc, #656]	; (8006090 <__ieee754_pow+0xa40>)
 8005dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f340 8108 	ble.w	8006018 <__ieee754_pow+0x9c8>
 8005e08:	151b      	asrs	r3, r3, #20
 8005e0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005e0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005e12:	fa4a f303 	asr.w	r3, sl, r3
 8005e16:	445b      	add	r3, fp
 8005e18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005e1c:	4e9d      	ldr	r6, [pc, #628]	; (8006094 <__ieee754_pow+0xa44>)
 8005e1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005e22:	4116      	asrs	r6, r2
 8005e24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005e28:	2000      	movs	r0, #0
 8005e2a:	ea23 0106 	bic.w	r1, r3, r6
 8005e2e:	f1c2 0214 	rsb	r2, r2, #20
 8005e32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005e36:	fa4a fa02 	asr.w	sl, sl, r2
 8005e3a:	f1bb 0f00 	cmp.w	fp, #0
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4620      	mov	r0, r4
 8005e44:	4629      	mov	r1, r5
 8005e46:	bfb8      	it	lt
 8005e48:	f1ca 0a00 	rsblt	sl, sl, #0
 8005e4c:	f7fa f9e8 	bl	8000220 <__aeabi_dsub>
 8005e50:	ec41 0b19 	vmov	d9, r0, r1
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	ec51 0b19 	vmov	r0, r1, d9
 8005e5c:	f7fa f9e2 	bl	8000224 <__adddf3>
 8005e60:	a37b      	add	r3, pc, #492	; (adr r3, 8006050 <__ieee754_pow+0xa00>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	2000      	movs	r0, #0
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	f7fa fb90 	bl	8000590 <__aeabi_dmul>
 8005e70:	ec53 2b19 	vmov	r2, r3, d9
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f7fa f9d0 	bl	8000220 <__aeabi_dsub>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4640      	mov	r0, r8
 8005e86:	4649      	mov	r1, r9
 8005e88:	f7fa f9ca 	bl	8000220 <__aeabi_dsub>
 8005e8c:	a372      	add	r3, pc, #456	; (adr r3, 8006058 <__ieee754_pow+0xa08>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f7fa fb7d 	bl	8000590 <__aeabi_dmul>
 8005e96:	a372      	add	r3, pc, #456	; (adr r3, 8006060 <__ieee754_pow+0xa10>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	4689      	mov	r9, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa fb74 	bl	8000590 <__aeabi_dmul>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4640      	mov	r0, r8
 8005eae:	4649      	mov	r1, r9
 8005eb0:	f7fa f9b8 	bl	8000224 <__adddf3>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa f9b0 	bl	8000224 <__adddf3>
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4689      	mov	r9, r1
 8005ecc:	f7fa f9a8 	bl	8000220 <__aeabi_dsub>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa f9a2 	bl	8000220 <__aeabi_dsub>
 8005edc:	4642      	mov	r2, r8
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	f7fa fb52 	bl	8000590 <__aeabi_dmul>
 8005eec:	a35e      	add	r3, pc, #376	; (adr r3, 8006068 <__ieee754_pow+0xa18>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	f7fa fb4b 	bl	8000590 <__aeabi_dmul>
 8005efa:	a35d      	add	r3, pc, #372	; (adr r3, 8006070 <__ieee754_pow+0xa20>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f98e 	bl	8000220 <__aeabi_dsub>
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	f7fa fb42 	bl	8000590 <__aeabi_dmul>
 8005f0c:	a35a      	add	r3, pc, #360	; (adr r3, 8006078 <__ieee754_pow+0xa28>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f987 	bl	8000224 <__adddf3>
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	f7fa fb39 	bl	8000590 <__aeabi_dmul>
 8005f1e:	a358      	add	r3, pc, #352	; (adr r3, 8006080 <__ieee754_pow+0xa30>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f97c 	bl	8000220 <__aeabi_dsub>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	f7fa fb30 	bl	8000590 <__aeabi_dmul>
 8005f30:	a355      	add	r3, pc, #340	; (adr r3, 8006088 <__ieee754_pow+0xa38>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f975 	bl	8000224 <__adddf3>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	f7fa fb27 	bl	8000590 <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4640      	mov	r0, r8
 8005f48:	4649      	mov	r1, r9
 8005f4a:	f7fa f969 	bl	8000220 <__aeabi_dsub>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	460d      	mov	r5, r1
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	f7fa fb19 	bl	8000590 <__aeabi_dmul>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	ec41 0b19 	vmov	d9, r0, r1
 8005f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa f958 	bl	8000220 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	ec51 0b19 	vmov	r0, r1, d9
 8005f78:	f7fa fc34 	bl	80007e4 <__aeabi_ddiv>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	4604      	mov	r4, r0
 8005f80:	460d      	mov	r5, r1
 8005f82:	463b      	mov	r3, r7
 8005f84:	4640      	mov	r0, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	f7fa fb02 	bl	8000590 <__aeabi_dmul>
 8005f8c:	4632      	mov	r2, r6
 8005f8e:	463b      	mov	r3, r7
 8005f90:	f7fa f948 	bl	8000224 <__adddf3>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7fa f940 	bl	8000220 <__aeabi_dsub>
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	f7fa f93c 	bl	8000220 <__aeabi_dsub>
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4602      	mov	r2, r0
 8005fac:	493a      	ldr	r1, [pc, #232]	; (8006098 <__ieee754_pow+0xa48>)
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f7fa f936 	bl	8000220 <__aeabi_dsub>
 8005fb4:	ec41 0b10 	vmov	d0, r0, r1
 8005fb8:	ee10 3a90 	vmov	r3, s1
 8005fbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc4:	da2b      	bge.n	800601e <__ieee754_pow+0x9ce>
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f000 f966 	bl	8006298 <scalbn>
 8005fcc:	ec51 0b10 	vmov	r0, r1, d0
 8005fd0:	ec53 2b18 	vmov	r2, r3, d8
 8005fd4:	f7ff bbed 	b.w	80057b2 <__ieee754_pow+0x162>
 8005fd8:	4b30      	ldr	r3, [pc, #192]	; (800609c <__ieee754_pow+0xa4c>)
 8005fda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005fde:	429e      	cmp	r6, r3
 8005fe0:	f77f af0c 	ble.w	8005dfc <__ieee754_pow+0x7ac>
 8005fe4:	4b2e      	ldr	r3, [pc, #184]	; (80060a0 <__ieee754_pow+0xa50>)
 8005fe6:	440b      	add	r3, r1
 8005fe8:	4303      	orrs	r3, r0
 8005fea:	d009      	beq.n	8006000 <__ieee754_pow+0x9b0>
 8005fec:	ec51 0b18 	vmov	r0, r1, d8
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f7fa fd3e 	bl	8000a74 <__aeabi_dcmplt>
 8005ff8:	3800      	subs	r0, #0
 8005ffa:	bf18      	it	ne
 8005ffc:	2001      	movne	r0, #1
 8005ffe:	e447      	b.n	8005890 <__ieee754_pow+0x240>
 8006000:	4622      	mov	r2, r4
 8006002:	462b      	mov	r3, r5
 8006004:	f7fa f90c 	bl	8000220 <__aeabi_dsub>
 8006008:	4642      	mov	r2, r8
 800600a:	464b      	mov	r3, r9
 800600c:	f7fa fd46 	bl	8000a9c <__aeabi_dcmpge>
 8006010:	2800      	cmp	r0, #0
 8006012:	f43f aef3 	beq.w	8005dfc <__ieee754_pow+0x7ac>
 8006016:	e7e9      	b.n	8005fec <__ieee754_pow+0x99c>
 8006018:	f04f 0a00 	mov.w	sl, #0
 800601c:	e71a      	b.n	8005e54 <__ieee754_pow+0x804>
 800601e:	ec51 0b10 	vmov	r0, r1, d0
 8006022:	4619      	mov	r1, r3
 8006024:	e7d4      	b.n	8005fd0 <__ieee754_pow+0x980>
 8006026:	491c      	ldr	r1, [pc, #112]	; (8006098 <__ieee754_pow+0xa48>)
 8006028:	2000      	movs	r0, #0
 800602a:	f7ff bb30 	b.w	800568e <__ieee754_pow+0x3e>
 800602e:	2000      	movs	r0, #0
 8006030:	2100      	movs	r1, #0
 8006032:	f7ff bb2c 	b.w	800568e <__ieee754_pow+0x3e>
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7ff bb28 	b.w	800568e <__ieee754_pow+0x3e>
 800603e:	9204      	str	r2, [sp, #16]
 8006040:	f7ff bb7a 	b.w	8005738 <__ieee754_pow+0xe8>
 8006044:	2300      	movs	r3, #0
 8006046:	f7ff bb64 	b.w	8005712 <__ieee754_pow+0xc2>
 800604a:	bf00      	nop
 800604c:	f3af 8000 	nop.w
 8006050:	00000000 	.word	0x00000000
 8006054:	3fe62e43 	.word	0x3fe62e43
 8006058:	fefa39ef 	.word	0xfefa39ef
 800605c:	3fe62e42 	.word	0x3fe62e42
 8006060:	0ca86c39 	.word	0x0ca86c39
 8006064:	be205c61 	.word	0xbe205c61
 8006068:	72bea4d0 	.word	0x72bea4d0
 800606c:	3e663769 	.word	0x3e663769
 8006070:	c5d26bf1 	.word	0xc5d26bf1
 8006074:	3ebbbd41 	.word	0x3ebbbd41
 8006078:	af25de2c 	.word	0xaf25de2c
 800607c:	3f11566a 	.word	0x3f11566a
 8006080:	16bebd93 	.word	0x16bebd93
 8006084:	3f66c16c 	.word	0x3f66c16c
 8006088:	5555553e 	.word	0x5555553e
 800608c:	3fc55555 	.word	0x3fc55555
 8006090:	3fe00000 	.word	0x3fe00000
 8006094:	000fffff 	.word	0x000fffff
 8006098:	3ff00000 	.word	0x3ff00000
 800609c:	4090cbff 	.word	0x4090cbff
 80060a0:	3f6f3400 	.word	0x3f6f3400
 80060a4:	652b82fe 	.word	0x652b82fe
 80060a8:	3c971547 	.word	0x3c971547

080060ac <__ieee754_sqrt>:
 80060ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b0:	ec55 4b10 	vmov	r4, r5, d0
 80060b4:	4e55      	ldr	r6, [pc, #340]	; (800620c <__ieee754_sqrt+0x160>)
 80060b6:	43ae      	bics	r6, r5
 80060b8:	ee10 0a10 	vmov	r0, s0
 80060bc:	ee10 3a10 	vmov	r3, s0
 80060c0:	462a      	mov	r2, r5
 80060c2:	4629      	mov	r1, r5
 80060c4:	d110      	bne.n	80060e8 <__ieee754_sqrt+0x3c>
 80060c6:	ee10 2a10 	vmov	r2, s0
 80060ca:	462b      	mov	r3, r5
 80060cc:	f7fa fa60 	bl	8000590 <__aeabi_dmul>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4620      	mov	r0, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	f7fa f8a4 	bl	8000224 <__adddf3>
 80060dc:	4604      	mov	r4, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	ec45 4b10 	vmov	d0, r4, r5
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	dc10      	bgt.n	800610e <__ieee754_sqrt+0x62>
 80060ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80060f0:	4330      	orrs	r0, r6
 80060f2:	d0f5      	beq.n	80060e0 <__ieee754_sqrt+0x34>
 80060f4:	b15d      	cbz	r5, 800610e <__ieee754_sqrt+0x62>
 80060f6:	ee10 2a10 	vmov	r2, s0
 80060fa:	462b      	mov	r3, r5
 80060fc:	ee10 0a10 	vmov	r0, s0
 8006100:	f7fa f88e 	bl	8000220 <__aeabi_dsub>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	f7fa fb6c 	bl	80007e4 <__aeabi_ddiv>
 800610c:	e7e6      	b.n	80060dc <__ieee754_sqrt+0x30>
 800610e:	1512      	asrs	r2, r2, #20
 8006110:	d074      	beq.n	80061fc <__ieee754_sqrt+0x150>
 8006112:	07d4      	lsls	r4, r2, #31
 8006114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006118:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800611c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006120:	bf5e      	ittt	pl
 8006122:	0fda      	lsrpl	r2, r3, #31
 8006124:	005b      	lslpl	r3, r3, #1
 8006126:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800612a:	2400      	movs	r4, #0
 800612c:	0fda      	lsrs	r2, r3, #31
 800612e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006132:	107f      	asrs	r7, r7, #1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	2516      	movs	r5, #22
 8006138:	4620      	mov	r0, r4
 800613a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800613e:	1886      	adds	r6, r0, r2
 8006140:	428e      	cmp	r6, r1
 8006142:	bfde      	ittt	le
 8006144:	1b89      	suble	r1, r1, r6
 8006146:	18b0      	addle	r0, r6, r2
 8006148:	18a4      	addle	r4, r4, r2
 800614a:	0049      	lsls	r1, r1, #1
 800614c:	3d01      	subs	r5, #1
 800614e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006152:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800615a:	d1f0      	bne.n	800613e <__ieee754_sqrt+0x92>
 800615c:	462a      	mov	r2, r5
 800615e:	f04f 0e20 	mov.w	lr, #32
 8006162:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006166:	4281      	cmp	r1, r0
 8006168:	eb06 0c05 	add.w	ip, r6, r5
 800616c:	dc02      	bgt.n	8006174 <__ieee754_sqrt+0xc8>
 800616e:	d113      	bne.n	8006198 <__ieee754_sqrt+0xec>
 8006170:	459c      	cmp	ip, r3
 8006172:	d811      	bhi.n	8006198 <__ieee754_sqrt+0xec>
 8006174:	f1bc 0f00 	cmp.w	ip, #0
 8006178:	eb0c 0506 	add.w	r5, ip, r6
 800617c:	da43      	bge.n	8006206 <__ieee754_sqrt+0x15a>
 800617e:	2d00      	cmp	r5, #0
 8006180:	db41      	blt.n	8006206 <__ieee754_sqrt+0x15a>
 8006182:	f100 0801 	add.w	r8, r0, #1
 8006186:	1a09      	subs	r1, r1, r0
 8006188:	459c      	cmp	ip, r3
 800618a:	bf88      	it	hi
 800618c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006190:	eba3 030c 	sub.w	r3, r3, ip
 8006194:	4432      	add	r2, r6
 8006196:	4640      	mov	r0, r8
 8006198:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800619c:	f1be 0e01 	subs.w	lr, lr, #1
 80061a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80061a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80061ac:	d1db      	bne.n	8006166 <__ieee754_sqrt+0xba>
 80061ae:	430b      	orrs	r3, r1
 80061b0:	d006      	beq.n	80061c0 <__ieee754_sqrt+0x114>
 80061b2:	1c50      	adds	r0, r2, #1
 80061b4:	bf13      	iteet	ne
 80061b6:	3201      	addne	r2, #1
 80061b8:	3401      	addeq	r4, #1
 80061ba:	4672      	moveq	r2, lr
 80061bc:	f022 0201 	bicne.w	r2, r2, #1
 80061c0:	1063      	asrs	r3, r4, #1
 80061c2:	0852      	lsrs	r2, r2, #1
 80061c4:	07e1      	lsls	r1, r4, #31
 80061c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80061ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80061ce:	bf48      	it	mi
 80061d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80061d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80061d8:	4614      	mov	r4, r2
 80061da:	e781      	b.n	80060e0 <__ieee754_sqrt+0x34>
 80061dc:	0ad9      	lsrs	r1, r3, #11
 80061de:	3815      	subs	r0, #21
 80061e0:	055b      	lsls	r3, r3, #21
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d0fa      	beq.n	80061dc <__ieee754_sqrt+0x130>
 80061e6:	02cd      	lsls	r5, r1, #11
 80061e8:	d50a      	bpl.n	8006200 <__ieee754_sqrt+0x154>
 80061ea:	f1c2 0420 	rsb	r4, r2, #32
 80061ee:	fa23 f404 	lsr.w	r4, r3, r4
 80061f2:	1e55      	subs	r5, r2, #1
 80061f4:	4093      	lsls	r3, r2
 80061f6:	4321      	orrs	r1, r4
 80061f8:	1b42      	subs	r2, r0, r5
 80061fa:	e78a      	b.n	8006112 <__ieee754_sqrt+0x66>
 80061fc:	4610      	mov	r0, r2
 80061fe:	e7f0      	b.n	80061e2 <__ieee754_sqrt+0x136>
 8006200:	0049      	lsls	r1, r1, #1
 8006202:	3201      	adds	r2, #1
 8006204:	e7ef      	b.n	80061e6 <__ieee754_sqrt+0x13a>
 8006206:	4680      	mov	r8, r0
 8006208:	e7bd      	b.n	8006186 <__ieee754_sqrt+0xda>
 800620a:	bf00      	nop
 800620c:	7ff00000 	.word	0x7ff00000

08006210 <with_errno>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4604      	mov	r4, r0
 8006214:	460d      	mov	r5, r1
 8006216:	4616      	mov	r6, r2
 8006218:	f7ff f976 	bl	8005508 <__errno>
 800621c:	4629      	mov	r1, r5
 800621e:	6006      	str	r6, [r0, #0]
 8006220:	4620      	mov	r0, r4
 8006222:	bd70      	pop	{r4, r5, r6, pc}

08006224 <xflow>:
 8006224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006226:	4614      	mov	r4, r2
 8006228:	461d      	mov	r5, r3
 800622a:	b108      	cbz	r0, 8006230 <xflow+0xc>
 800622c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006230:	e9cd 2300 	strd	r2, r3, [sp]
 8006234:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006238:	4620      	mov	r0, r4
 800623a:	4629      	mov	r1, r5
 800623c:	f7fa f9a8 	bl	8000590 <__aeabi_dmul>
 8006240:	2222      	movs	r2, #34	; 0x22
 8006242:	b003      	add	sp, #12
 8006244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006248:	f7ff bfe2 	b.w	8006210 <with_errno>

0800624c <__math_uflow>:
 800624c:	b508      	push	{r3, lr}
 800624e:	2200      	movs	r2, #0
 8006250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006254:	f7ff ffe6 	bl	8006224 <xflow>
 8006258:	ec41 0b10 	vmov	d0, r0, r1
 800625c:	bd08      	pop	{r3, pc}

0800625e <__math_oflow>:
 800625e:	b508      	push	{r3, lr}
 8006260:	2200      	movs	r2, #0
 8006262:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006266:	f7ff ffdd 	bl	8006224 <xflow>
 800626a:	ec41 0b10 	vmov	d0, r0, r1
 800626e:	bd08      	pop	{r3, pc}

08006270 <fabs>:
 8006270:	ec51 0b10 	vmov	r0, r1, d0
 8006274:	ee10 2a10 	vmov	r2, s0
 8006278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800627c:	ec43 2b10 	vmov	d0, r2, r3
 8006280:	4770      	bx	lr

08006282 <finite>:
 8006282:	b082      	sub	sp, #8
 8006284:	ed8d 0b00 	vstr	d0, [sp]
 8006288:	9801      	ldr	r0, [sp, #4]
 800628a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800628e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006292:	0fc0      	lsrs	r0, r0, #31
 8006294:	b002      	add	sp, #8
 8006296:	4770      	bx	lr

08006298 <scalbn>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	ec55 4b10 	vmov	r4, r5, d0
 800629e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80062a2:	4606      	mov	r6, r0
 80062a4:	462b      	mov	r3, r5
 80062a6:	b99a      	cbnz	r2, 80062d0 <scalbn+0x38>
 80062a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062ac:	4323      	orrs	r3, r4
 80062ae:	d036      	beq.n	800631e <scalbn+0x86>
 80062b0:	4b39      	ldr	r3, [pc, #228]	; (8006398 <scalbn+0x100>)
 80062b2:	4629      	mov	r1, r5
 80062b4:	ee10 0a10 	vmov	r0, s0
 80062b8:	2200      	movs	r2, #0
 80062ba:	f7fa f969 	bl	8000590 <__aeabi_dmul>
 80062be:	4b37      	ldr	r3, [pc, #220]	; (800639c <scalbn+0x104>)
 80062c0:	429e      	cmp	r6, r3
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
 80062c6:	da10      	bge.n	80062ea <scalbn+0x52>
 80062c8:	a32b      	add	r3, pc, #172	; (adr r3, 8006378 <scalbn+0xe0>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	e03a      	b.n	8006346 <scalbn+0xae>
 80062d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80062d4:	428a      	cmp	r2, r1
 80062d6:	d10c      	bne.n	80062f2 <scalbn+0x5a>
 80062d8:	ee10 2a10 	vmov	r2, s0
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	f7f9 ffa0 	bl	8000224 <__adddf3>
 80062e4:	4604      	mov	r4, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	e019      	b.n	800631e <scalbn+0x86>
 80062ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80062ee:	460b      	mov	r3, r1
 80062f0:	3a36      	subs	r2, #54	; 0x36
 80062f2:	4432      	add	r2, r6
 80062f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80062f8:	428a      	cmp	r2, r1
 80062fa:	dd08      	ble.n	800630e <scalbn+0x76>
 80062fc:	2d00      	cmp	r5, #0
 80062fe:	a120      	add	r1, pc, #128	; (adr r1, 8006380 <scalbn+0xe8>)
 8006300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006304:	da1c      	bge.n	8006340 <scalbn+0xa8>
 8006306:	a120      	add	r1, pc, #128	; (adr r1, 8006388 <scalbn+0xf0>)
 8006308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800630c:	e018      	b.n	8006340 <scalbn+0xa8>
 800630e:	2a00      	cmp	r2, #0
 8006310:	dd08      	ble.n	8006324 <scalbn+0x8c>
 8006312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800631a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800631e:	ec45 4b10 	vmov	d0, r4, r5
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006328:	da19      	bge.n	800635e <scalbn+0xc6>
 800632a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800632e:	429e      	cmp	r6, r3
 8006330:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006334:	dd0a      	ble.n	800634c <scalbn+0xb4>
 8006336:	a112      	add	r1, pc, #72	; (adr r1, 8006380 <scalbn+0xe8>)
 8006338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e2      	bne.n	8006306 <scalbn+0x6e>
 8006340:	a30f      	add	r3, pc, #60	; (adr r3, 8006380 <scalbn+0xe8>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7fa f923 	bl	8000590 <__aeabi_dmul>
 800634a:	e7cb      	b.n	80062e4 <scalbn+0x4c>
 800634c:	a10a      	add	r1, pc, #40	; (adr r1, 8006378 <scalbn+0xe0>)
 800634e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0b8      	beq.n	80062c8 <scalbn+0x30>
 8006356:	a10e      	add	r1, pc, #56	; (adr r1, 8006390 <scalbn+0xf8>)
 8006358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635c:	e7b4      	b.n	80062c8 <scalbn+0x30>
 800635e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006362:	3236      	adds	r2, #54	; 0x36
 8006364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006368:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800636c:	4620      	mov	r0, r4
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <scalbn+0x108>)
 8006370:	2200      	movs	r2, #0
 8006372:	e7e8      	b.n	8006346 <scalbn+0xae>
 8006374:	f3af 8000 	nop.w
 8006378:	c2f8f359 	.word	0xc2f8f359
 800637c:	01a56e1f 	.word	0x01a56e1f
 8006380:	8800759c 	.word	0x8800759c
 8006384:	7e37e43c 	.word	0x7e37e43c
 8006388:	8800759c 	.word	0x8800759c
 800638c:	fe37e43c 	.word	0xfe37e43c
 8006390:	c2f8f359 	.word	0xc2f8f359
 8006394:	81a56e1f 	.word	0x81a56e1f
 8006398:	43500000 	.word	0x43500000
 800639c:	ffff3cb0 	.word	0xffff3cb0
 80063a0:	3c900000 	.word	0x3c900000

080063a4 <_init>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr

080063b0 <_fini>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr
